.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HTML::Perlinfo::HTML 3"
.TH HTML::Perlinfo::HTML 3 "2011-06-13" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
HTML::Perlinfo::HTML \- HTML documentation for the perlinfo library
.SH "SUMMARY"
.IX Header "SUMMARY"
HTML::Perlinfo validates as \s-1XHTML\s0 1.0 Transitional.
.PP
In the perlinfo library, HTML::Perlinfo and HTML::Perlinfo::Modules use the internal module HTML::Perlinfo::Common for \s-1HTML\s0 generation. This document provides information on that \s-1HTML\s0 and its manipulation.
.SH "CUSTOMIZING THE HTML"
.IX Header "CUSTOMIZING THE HTML"
You can capture the \s-1HTML\s0 output by assigning it to a scalar. Then you can alter the \s-1HTML\s0 before printing it or doing something else with it. Here is an example that uses the perlinfo function from HTML::Perlinfo:
.PP
.Vb 1
\&    use HTML::Perlinfo;
\&
\&    my $example = perlinfo();    # Now I can do whatever I want with $example
\&    $example =~ s/Perl/Java/ig;  # Make everyone laugh  
\&    print $example;
.Ve
.PP
Another option is to use object attributes which make altering some \s-1HTML\s0 elements less helter skelter.
.SH "OBJECT ATTRIBUTES"
.IX Header "OBJECT ATTRIBUTES"
These object attributes allow you to change the \s-1HTML\s0 \s-1CSS\s0 settings to achieve a stylish effect. Please see your favorite \s-1HTML\s0 guide for acceptable \s-1CSS\s0 values. Refer to the \s-1HTML\s0 source code of the perlinfo page for the defaults.
.PP
Attribute name/Corresponding \s-1CSS\s0 element
.PP
.Vb 10
\& title              / page title (only non\-CSS element)
\& bg_image           / background_image
\& bg_position        / background_position
\& bg_repeat          / background_repeat
\& bg_attribute       / background_attribute 
\& bg_color           / background_color
\& ft_family          / font_familty 
\& ft_color           / font_color
\& lk_color           / link color
\& lk_decoration      / link text\-decoration  
\& lk_bgcolor         / link background\-color 
\& lk_hvdecoration    / link hover text\-decoration 
\& header_bgcolor     / table header background\-color 
\& header_ftcolor     / table header font color
\& leftcol_bgcolor    / background\-color of leftmost table cell  
\& leftcol_ftcolor    / font color of left table cell
\& rightcol_bgcolor   / background\-color of right table cell  
\& rightcol_ftcolor   / font color of right table cell
.Ve
.SS "\s-1CSS\s0 \s-1EXAMPLE\s0"
.IX Subsection "CSS EXAMPLE"
.Vb 5
\&    $p = HTML::Perlinfo\->new(
\&                bg_image  => \*(Aqhttp://i104.photobucket.com/albums/m176/perlinfo/camel.gif\*(Aq,
\&                bg_repeat => \*(Aqyes\-repeat\*(Aq
\&    );
\&    $p\->info_all;
.Ve
.SH "print_htmlhead"
.IX Header "print_htmlhead"
This method prints the head container tags containing the style sheet, along with a few other html tags. It is useful to call this method when full_page is set to 0 and you are piecing together multiple perlinfo pages into one page. For example:
.PP
.Vb 1
\&    $m = HTML::Perlinfo::Modules\->new( full_page => 0 );    # Just the bare essentials please
\&
\&    $m\->print_htmlhead;  # Print the beginning of an html document
\&
\&    $m\->print_modules(  from =>\*(Aq/home/paco\*(Aq, 
\&                        section  => \*(AqThe Modules in Paco\*(Aqs Home Directory\*(Aq 
\&     ); 
\&
\&    $m\->print_modules(  from =>\*(Aq/home/cowboy\*(Aq, 
\&                        section  => \*(AqThe Modules in Cowboy\*(Aqs Home Directory\*(Aq 
\&     );
.Ve
.PP
When full_page is set to 1 (the default value), print_htmlhead is called internally. Note that you can still set \s-1CSS\s0 values in the constructor even when full_page is set to 0 and see the results in print_htmlhead.
.PP
.Vb 4
\&    $m = HTML::Perlinfo::Modules\->new(
\&        full_page => 0,
\&        bg_color  => \*(Aqgray\*(Aq  
\&     );
\&
\&    $m\->print_htmlhead;  # Prints a HTML document with a gray background
.Ve
.PP
Of course, you don't have to use the print_htmlhead method. You could insert your own \s-1HTML\s0 with your own style sheet when you set full_page to 0.
.SH "full_page"
.IX Header "full_page"
Do you want only a fragment of \s-1HTML\s0 and not a page with body tags (among other things)? Then the full_page option is what you need to use (or a regular expression, as explained above). This option allows you to add your own header/footer if you so desire. By default, the value is 1. Set it to 0 to output the \s-1HTML\s0 report with as little \s-1HTML\s0 as possible.
.PP
.Vb 1
\&    $p = HTML::Perlinfo\->new( full_page  => 0  ); # Change value to 1 to get a full HTML page
.Ve
.SH "links"
.IX Header "links"
By default, there will be useful links in most of the presented \s-1HTML\s0 in the perlinfo library. These links are for pages on search.cpan.org. Even the info_config method lists links to the config options in the core Config module.
.PP
To manipulate links in the perlinfo library, you can use the links attribute in the info methods. Not to be confused with the \*(L"link\*(R" attribute in the HTML::Perlinfo::Module (which allows you to provide your own links for modules), this attribute's primary purpose is to turn on linking or turn it off. Of course, you can achieve the same effect by using regular expressions, as explained above. But using the links attribute makes your code cleaner.
.PP
There are several arguments (in an array reference) you can supply to the links attribute.
.PP
The number 1 turns on all default links and 0 will remove them.
.PP
For example, to remove the default links in the info_all method, you would say:
.PP
.Vb 1
\&        $p\->info_all( links=>[0] ); # contains no links. Good for printing!
.Ve
.PP
The example above removes all default links and it even ignores the link parameter in the print_modules method of HTML::Perlinfo::Modules.
.PP
The named parameters for the links attribute are 'docs' and 'local' which controls links associated with modules, programs in the Perl utilities section, and the Config section and everywhere else. The value for either parameter can be either '1' or '0'.
.IP "docs" 4
.IX Item "docs"
Using 'docs', you can control the display of the default links to module and program documentation on search.cpan.org. But the link parameter in HTML::Perlinfo::Modules can override this directive. By overridding 'docs=>0', you can show documentation for certain modules and not show documentation for any others. This is useful, for example, when you have homegrown modules without any documentation but want to show links to documentation for \s-1CPAN\s0 modules on the same page. Observe:
.Sp
.Vb 1
\&        $p\->print_modules( links => [docs=>0], link => [qr/Apache::/, \*(Aqhttp://www.myexample.com/perldoc/\*(Aq] );
.Ve
.Sp
In the above example, only links to Apache modules would appear. Other modules would not have links to any documentation. Note that had you simply set the value for links to zero, then the other attribute concerning Apache modules would have been irrelevant, since no links whatsoever would have appeared. In other words, you can mix and match these two atttibutes to achieve many different and wonderous effects. Have fun! Be imaginative!
.Sp
For more information on print_modules and its link parameter, please see HTML::Perlinfo::Modules.
.IP "local" 4
.IX Item "local"
With the 'local' parameter set to 1, the local location of a module or program will be a link. This is useful if you want to see the local installation directory of a module in your browser. (From there, you could also look at the contents of said files.)
.Sp
Note that this link would only work if you use the perlinfo library from the command-line and then view the resulting page on the same machine. Hence these local links are not present by default.
.Sp
You can even use 'docs' along with 'local'.
.Sp
.Vb 1
\&        $p\->info_all( links => [docs=>0,local=>1] )
.Ve
.SH "NOTES"
.IX Header "NOTES"
HTML::Perlinfo::Modules allows you to color code specific modules.
.PP
More \s-1HTML\s0 options should be available in future revisions. Want to see a new feature/change? Then contact me about it.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mike Accardo <accardo@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 1
\&   Copyright (c) 2009, Mike Accardo. All Rights Reserved.
.Ve
