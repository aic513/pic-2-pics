if(!function(t,e){function n(t,e){var n=t.createElement("p"),r=t.getElementsByTagName("head")[0]||t.documentElement;return n.innerHTML="x<style>"+e+"</style>",r.insertBefore(n.lastChild,r.firstChild)}function r(){var t=$.elements;return"string"==typeof t?t.split(" "):t}function i(t,e){var n=$.elements;"string"!=typeof n&&(n=n.join(" ")),"string"!=typeof t&&(t=t.join(" ")),$.elements=n+" "+t,u(e)}function o(t){var e=y[t[v]];return e||(e={},g++,t[v]=g,y[g]=e),e}function s(t,n,r){if(n||(n=e),f)return n.createElement(t);r||(r=o(n));var i;return i=r.cache[t]?r.cache[t].cloneNode():m.test(t)?(r.cache[t]=r.createElem(t)).cloneNode():r.createElem(t),!i.canHaveChildren||d.test(t)||i.tagUrn?i:r.frag.appendChild(i)}function a(t,n){if(t||(t=e),f)return t.createDocumentFragment();n=n||o(t);for(var i=n.frag.cloneNode(),s=0,a=r(),l=a.length;l>s;s++)i.createElement(a[s]);return i}function l(t,e){e.cache||(e.cache={},e.createElem=t.createElement,e.createFrag=t.createDocumentFragment,e.frag=e.createFrag()),t.createElement=function(n){return $.shivMethods?s(n,t,e):e.createElem(n)},t.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+r().join().replace(/[\w\-:]+/g,function(t){return e.createElem(t),e.frag.createElement(t),'c("'+t+'")'})+");return n}")($,e.frag)}function u(t){t||(t=e);var r=o(t);return!$.shivCSS||c||r.hasCSS||(r.hasCSS=!!n(t,"article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")),f||l(t,r),t}var c,f,p="3.7.2",h=t.html5||{},d=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,m=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,v="_html5shiv",g=0,y={};!function(){try{var t=e.createElement("a");t.innerHTML="<xyz></xyz>",c="hidden"in t,f=1==t.childNodes.length||function(){e.createElement("a");var t=e.createDocumentFragment();return"undefined"==typeof t.cloneNode||"undefined"==typeof t.createDocumentFragment||"undefined"==typeof t.createElement}()}catch(n){c=!0,f=!0}}();var $={elements:h.elements||"abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video",version:p,shivCSS:h.shivCSS!==!1,supportsUnknownElements:f,shivMethods:h.shivMethods!==!1,type:"default",shivDocument:u,createElement:s,createDocumentFragment:a,addElements:i};t.html5=$,u(e)}(this,document),!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function n(t){var e="length"in t&&t.length,n=J.type(t);return"function"===n||J.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t}function r(t,e,n){if(J.isFunction(e))return J.grep(t,function(t,r){return!!e.call(t,r,t)!==n});if(e.nodeType)return J.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(at.test(e))return J.filter(e,t,n);e=J.filter(e,t)}return J.grep(t,function(t){return W.call(e,t)>=0!==n})}function i(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e=dt[t]={};return J.each(t.match(ht)||[],function(t,n){e[n]=!0}),e}function s(){Z.removeEventListener("DOMContentLoaded",s,!1),t.removeEventListener("load",s,!1),J.ready()}function a(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=J.expando+a.uid++}function l(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(bt,"-$1").toLowerCase(),n=t.getAttribute(r),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:$t.test(n)?J.parseJSON(n):n}catch(i){}yt.set(t,e,n)}else n=void 0;return n}function u(){return!0}function c(){return!1}function f(){try{return Z.activeElement}catch(t){}}function p(t,e){return J.nodeName(t,"table")&&J.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function h(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function d(t){var e=It.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function m(t,e){for(var n=0,r=t.length;r>n;n++)gt.set(t[n],"globalEval",!e||gt.get(e[n],"globalEval"))}function v(t,e){var n,r,i,o,s,a,l,u;if(1===e.nodeType){if(gt.hasData(t)&&(o=gt.access(t),s=gt.set(e,o),u=o.events)){delete s.handle,s.events={};for(i in u)for(n=0,r=u[i].length;r>n;n++)J.event.add(e,i,u[i][n])}yt.hasData(t)&&(a=yt.access(t),l=J.extend({},a),yt.set(e,l))}}function g(t,e){var n=t.getElementsByTagName?t.getElementsByTagName(e||"*"):t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&J.nodeName(t,e)?J.merge([t],n):n}function y(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Tt.test(t.type)?e.checked=t.checked:("input"===n||"textarea"===n)&&(e.defaultValue=t.defaultValue)}function $(e,n){var r,i=J(n.createElement(e)).appendTo(n.body),o=t.getDefaultComputedStyle&&(r=t.getDefaultComputedStyle(i[0]))?r.display:J.css(i[0],"display");return i.detach(),o}function b(t){var e=Z,n=Lt[t];return n||(n=$(t,e),"none"!==n&&n||(Ft=(Ft||J("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=Ft[0].contentDocument,e.write(),e.close(),n=$(t,e),Ft.detach()),Lt[t]=n),n}function w(t,e,n){var r,i,o,s,a=t.style;return n=n||Bt(t),n&&(s=n.getPropertyValue(e)||n[e]),n&&(""!==s||J.contains(t.ownerDocument,t)||(s=J.style(t,e)),Ht.test(s)&&Vt.test(e)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function x(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function _(t,e){if(e in t)return e;for(var n=e[0].toUpperCase()+e.slice(1),r=e,i=Gt.length;i--;)if(e=Gt[i]+n,e in t)return e;return r}function T(t,e,n){var r=Ut.exec(e);return r?Math.max(0,r[1]-(n||0))+(r[2]||"px"):e}function C(t,e,n,r,i){for(var o=n===(r?"border":"content")?4:"width"===e?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=J.css(t,n+xt[o],!0,i)),r?("content"===n&&(s-=J.css(t,"padding"+xt[o],!0,i)),"margin"!==n&&(s-=J.css(t,"border"+xt[o]+"Width",!0,i))):(s+=J.css(t,"padding"+xt[o],!0,i),"padding"!==n&&(s+=J.css(t,"border"+xt[o]+"Width",!0,i)));return s}function S(t,e,n){var r=!0,i="width"===e?t.offsetWidth:t.offsetHeight,o=Bt(t),s="border-box"===J.css(t,"boxSizing",!1,o);if(0>=i||null==i){if(i=w(t,e,o),(0>i||null==i)&&(i=t.style[e]),Ht.test(i))return i;r=s&&(Q.boxSizingReliable()||i===t.style[e]),i=parseFloat(i)||0}return i+C(t,e,n||(s?"border":"content"),r,o)+"px"}function k(t,e){for(var n,r,i,o=[],s=0,a=t.length;a>s;s++)r=t[s],r.style&&(o[s]=gt.get(r,"olddisplay"),n=r.style.display,e?(o[s]||"none"!==n||(r.style.display=""),""===r.style.display&&_t(r)&&(o[s]=gt.access(r,"olddisplay",b(r.nodeName)))):(i=_t(r),"none"===n&&i||gt.set(r,"olddisplay",i?n:J.css(r,"display"))));for(s=0;a>s;s++)r=t[s],r.style&&(e&&"none"!==r.style.display&&""!==r.style.display||(r.style.display=e?o[s]||"":"none"));return t}function E(t,e,n,r,i){return new E.prototype.init(t,e,n,r,i)}function A(){return setTimeout(function(){Qt=void 0}),Qt=J.now()}function O(t,e){var n,r=0,i={height:t};for(e=e?1:0;4>r;r+=2-e)n=xt[r],i["margin"+n]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function j(t,e,n){for(var r,i=(ne[e]||[]).concat(ne["*"]),o=0,s=i.length;s>o;o++)if(r=i[o].call(n,e,t))return r}function P(t,e,n){var r,i,o,s,a,l,u,c,f=this,p={},h=t.style,d=t.nodeType&&_t(t),m=gt.get(t,"fxshow");n.queue||(a=J._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,J.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],u=J.css(t,"display"),c="none"===u?gt.get(t,"olddisplay")||b(t.nodeName):u,"inline"===c&&"none"===J.css(t,"float")&&(h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}));for(r in e)if(i=e[r],Kt.exec(i)){if(delete e[r],o=o||"toggle"===i,i===(d?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;d=!0}p[r]=m&&m[r]||J.style(t,r)}else u=void 0;if(J.isEmptyObject(p))"inline"===("none"===u?b(t.nodeName):u)&&(h.display=u);else{m?"hidden"in m&&(d=m.hidden):m=gt.access(t,"fxshow",{}),o&&(m.hidden=!d),d?J(t).show():f.done(function(){J(t).hide()}),f.done(function(){var e;gt.remove(t,"fxshow");for(e in p)J.style(t,e,p[e])});for(r in p)s=j(d?m[r]:0,r,f),r in m||(m[r]=s.start,d&&(s.end=s.start,s.start="width"===r||"height"===r?1:0))}}function N(t,e){var n,r,i,o,s;for(n in t)if(r=J.camelCase(n),i=e[r],o=t[n],J.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),s=J.cssHooks[r],s&&"expand"in s){o=s.expand(o),delete t[r];for(n in o)n in t||(t[n]=o[n],e[n]=i)}else e[r]=i}function D(t,e,n){var r,i,o=0,s=ee.length,a=J.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var e=Qt||A(),n=Math.max(0,u.startTime+u.duration-e),r=n/u.duration||0,o=1-r,s=0,l=u.tweens.length;l>s;s++)u.tweens[s].run(o);return a.notifyWith(t,[u,o,n]),1>o&&l?n:(a.resolveWith(t,[u]),!1)},u=a.promise({elem:t,props:J.extend({},e),opts:J.extend(!0,{specialEasing:{}},n),originalProperties:e,originalOptions:n,startTime:Qt||A(),duration:n.duration,tweens:[],createTween:function(e,n){var r=J.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(r),r},stop:function(e){var n=0,r=e?u.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)u.tweens[n].run(1);return e?a.resolveWith(t,[u,e]):a.rejectWith(t,[u,e]),this}}),c=u.props;for(N(c,u.opts.specialEasing);s>o;o++)if(r=ee[o].call(u,t,c,u.opts))return r;return J.map(c,j,u),J.isFunction(u.opts.start)&&u.opts.start.call(t,u),J.fx.timer(J.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function M(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(ht)||[];if(J.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function I(t,e,n,r){function i(a){var l;return o[a]=!0,J.each(t[a]||[],function(t,a){var u=a(e,n,r);return"string"!=typeof u||s||o[u]?s?!(l=u):void 0:(e.dataTypes.unshift(u),i(u),!1)}),l}var o={},s=t===$e;return i(e.dataTypes[0])||!o["*"]&&i("*")}function R(t,e){var n,r,i=J.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&J.extend(!0,t,r),t}function q(t,e,n){for(var r,i,o,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||t.converters[i+" "+l[0]]){o=i;break}s||(s=i)}o=o||s}return o?(o!==l[0]&&l.unshift(o),n[o]):void 0}function F(t,e,n,r){var i,o,s,a,l,u={},c=t.dataTypes.slice();if(c[1])for(s in t.converters)u[s.toLowerCase()]=t.converters[s];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(s=u[l+" "+o]||u["* "+o],!s)for(i in u)if(a=i.split(" "),a[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){s===!0?s=u[i]:u[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&t["throws"])e=s(e);else try{e=s(e)}catch(f){return{state:"parsererror",error:s?f:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}function L(t,e,n,r){var i;if(J.isArray(e))J.each(e,function(e,i){n||Te.test(t)?r(t,i):L(t+"["+("object"==typeof i?e:"")+"]",i,n,r)});else if(n||"object"!==J.type(e))r(t,e);else for(i in e)L(t+"["+i+"]",e[i],n,r)}function V(t){return J.isWindow(t)?t:9===t.nodeType&&t.defaultView}var H=[],B=H.slice,z=H.concat,U=H.push,W=H.indexOf,X={},Y=X.toString,G=X.hasOwnProperty,Q={},Z=t.document,K="2.1.4",J=function(t,e){return new J.fn.init(t,e)},tt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,et=/^-ms-/,nt=/-([\da-z])/gi,rt=function(t,e){return e.toUpperCase()};J.fn=J.prototype={jquery:K,constructor:J,selector:"",length:0,toArray:function(){return B.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:B.call(this)},pushStack:function(t){var e=J.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return J.each(this,t,e)},map:function(t){return this.pushStack(J.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(B.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(0>t?e:0);return this.pushStack(n>=0&&e>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:U,sort:H.sort,splice:H.splice},J.extend=J.fn.extend=function(){var t,e,n,r,i,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||J.isFunction(s)||(s={}),a===l&&(s=this,a--);l>a;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],r=t[e],s!==r&&(u&&r&&(J.isPlainObject(r)||(i=J.isArray(r)))?(i?(i=!1,o=n&&J.isArray(n)?n:[]):o=n&&J.isPlainObject(n)?n:{},s[e]=J.extend(u,o,r)):void 0!==r&&(s[e]=r));return s},J.extend({expando:"jQuery"+(K+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===J.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){return!J.isArray(t)&&t-parseFloat(t)+1>=0},isPlainObject:function(t){return"object"!==J.type(t)||t.nodeType||J.isWindow(t)?!1:t.constructor&&!G.call(t.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?X[Y.call(t)]||"object":typeof t},globalEval:function(t){var e,n=eval;t=J.trim(t),t&&(1===t.indexOf("use strict")?(e=Z.createElement("script"),e.text=t,Z.head.appendChild(e).parentNode.removeChild(e)):n(t))},camelCase:function(t){return t.replace(et,"ms-").replace(nt,rt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,r){var i,o=0,s=t.length,a=n(t);if(r){if(a)for(;s>o&&(i=e.apply(t[o],r),i!==!1);o++);else for(o in t)if(i=e.apply(t[o],r),i===!1)break}else if(a)for(;s>o&&(i=e.call(t[o],o,t[o]),i!==!1);o++);else for(o in t)if(i=e.call(t[o],o,t[o]),i===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(tt,"")},makeArray:function(t,e){var r=e||[];return null!=t&&(n(Object(t))?J.merge(r,"string"==typeof t?[t]:t):U.call(r,t)),r},inArray:function(t,e,n){return null==e?-1:W.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;n>r;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r,i=[],o=0,s=t.length,a=!n;s>o;o++)r=!e(t[o],o),r!==a&&i.push(t[o]);return i},map:function(t,e,r){var i,o=0,s=t.length,a=n(t),l=[];if(a)for(;s>o;o++)i=e(t[o],o,r),null!=i&&l.push(i);else for(o in t)i=e(t[o],o,r),null!=i&&l.push(i);return z.apply([],l)},guid:1,proxy:function(t,e){var n,r,i;return"string"==typeof e&&(n=t[e],e=t,t=n),J.isFunction(t)?(r=B.call(arguments,2),i=function(){return t.apply(e||this,r.concat(B.call(arguments)))},i.guid=t.guid=t.guid||J.guid++,i):void 0},now:Date.now,support:Q}),J.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){X["[object "+e+"]"]=e.toLowerCase()});var it=function(t){function e(t,e,n,r){var i,o,s,a,l,u,f,h,d,m;if((e?e.ownerDocument||e:L)!==P&&j(e),e=e||P,n=n||[],a=e.nodeType,"string"!=typeof t||!t||1!==a&&9!==a&&11!==a)return n;if(!r&&D){if(11!==a&&(i=yt.exec(t)))if(s=i[1]){if(9===a){if(o=e.getElementById(s),!o||!o.parentNode)return n;if(o.id===s)return n.push(o),n}else if(e.ownerDocument&&(o=e.ownerDocument.getElementById(s))&&q(e,o)&&o.id===s)return n.push(o),n}else{if(i[2])return K.apply(n,e.getElementsByTagName(t)),n;if((s=i[3])&&w.getElementsByClassName)return K.apply(n,e.getElementsByClassName(s)),n}if(w.qsa&&(!M||!M.test(t))){if(h=f=F,d=e,m=1!==a&&t,1===a&&"object"!==e.nodeName.toLowerCase()){for(u=C(t),(f=e.getAttribute("id"))?h=f.replace(bt,"\\$&"):e.setAttribute("id",h),h="[id='"+h+"'] ",l=u.length;l--;)u[l]=h+p(u[l]);d=$t.test(t)&&c(e.parentNode)||e,m=u.join(",")}if(m)try{return K.apply(n,d.querySelectorAll(m)),n}catch(v){}finally{f||e.removeAttribute("id")}}}return k(t.replace(lt,"$1"),e,n,r)}function n(){function t(n,r){return e.push(n+" ")>x.cacheLength&&delete t[e.shift()],t[n+" "]=r}var e=[];return t}function r(t){return t[F]=!0,t}function i(t){var e=P.createElement("div");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),r=t.length;r--;)x.attrHandle[n[r]]=e}function s(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||X)-(~t.sourceIndex||X);if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function u(t){return r(function(e){return e=+e,r(function(n,r){for(var i,o=t([],n.length,e),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function c(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function f(){}function p(t){for(var e=0,n=t.length,r="";n>e;e++)r+=t[e].value;return r}function h(t,e,n){var r=e.dir,i=n&&"parentNode"===r,o=H++;return e.first?function(e,n,o){for(;e=e[r];)if(1===e.nodeType||i)return t(e,n,o)}:function(e,n,s){var a,l,u=[V,o];if(s){for(;e=e[r];)if((1===e.nodeType||i)&&t(e,n,s))return!0}else for(;e=e[r];)if(1===e.nodeType||i){if(l=e[F]||(e[F]={}),(a=l[r])&&a[0]===V&&a[1]===o)return u[2]=a[2];if(l[r]=u,u[2]=t(e,n,s))return!0}}}function d(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function m(t,n,r){for(var i=0,o=n.length;o>i;i++)e(t,n[i],r);return r}function v(t,e,n,r,i){for(var o,s=[],a=0,l=t.length,u=null!=e;l>a;a++)(o=t[a])&&(!n||n(o,r,i))&&(s.push(o),u&&e.push(a));return s}function g(t,e,n,i,o,s){return i&&!i[F]&&(i=g(i)),o&&!o[F]&&(o=g(o,s)),r(function(r,s,a,l){var u,c,f,p=[],h=[],d=s.length,g=r||m(e||"*",a.nodeType?[a]:a,[]),y=!t||!r&&e?g:v(g,p,t,a,l),$=n?o||(r?t:d||i)?[]:s:y;if(n&&n(y,$,a,l),i)for(u=v($,h),i(u,[],a,l),c=u.length;c--;)(f=u[c])&&($[h[c]]=!(y[h[c]]=f));if(r){if(o||t){if(o){for(u=[],c=$.length;c--;)(f=$[c])&&u.push(y[c]=f);o(null,$=[],u,l)}for(c=$.length;c--;)(f=$[c])&&(u=o?tt(r,f):p[c])>-1&&(r[u]=!(s[u]=f))}}else $=v($===s?$.splice(d,$.length):$),o?o(null,s,$,l):K.apply(s,$)})}function y(t){for(var e,n,r,i=t.length,o=x.relative[t[0].type],s=o||x.relative[" "],a=o?1:0,l=h(function(t){return t===e},s,!0),u=h(function(t){return tt(e,t)>-1},s,!0),c=[function(t,n,r){var i=!o&&(r||n!==E)||((e=n).nodeType?l(t,n,r):u(t,n,r));return e=null,i}];i>a;a++)if(n=x.relative[t[a].type])c=[h(d(c),n)];else{if(n=x.filter[t[a].type].apply(null,t[a].matches),n[F]){for(r=++a;i>r&&!x.relative[t[r].type];r++);return g(a>1&&d(c),a>1&&p(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(lt,"$1"),n,r>a&&y(t.slice(a,r)),i>r&&y(t=t.slice(r)),i>r&&p(t))}c.push(n)}return d(c)}function $(t,n){var i=n.length>0,o=t.length>0,s=function(r,s,a,l,u){var c,f,p,h=0,d="0",m=r&&[],g=[],y=E,$=r||o&&x.find.TAG("*",u),b=V+=null==y?1:Math.random()||.1,w=$.length;for(u&&(E=s!==P&&s);d!==w&&null!=(c=$[d]);d++){if(o&&c){for(f=0;p=t[f++];)if(p(c,s,a)){l.push(c);break}u&&(V=b)}i&&((c=!p&&c)&&h--,r&&m.push(c))}if(h+=d,i&&d!==h){for(f=0;p=n[f++];)p(m,g,s,a);if(r){if(h>0)for(;d--;)m[d]||g[d]||(g[d]=Q.call(l));g=v(g)}K.apply(l,g),u&&!r&&g.length>0&&h+n.length>1&&e.uniqueSort(l)}return u&&(V=b,E=y),m};return i?r(s):s}var b,w,x,_,T,C,S,k,E,A,O,j,P,N,D,M,I,R,q,F="sizzle"+1*new Date,L=t.document,V=0,H=0,B=n(),z=n(),U=n(),W=function(t,e){return t===e&&(O=!0),0},X=1<<31,Y={}.hasOwnProperty,G=[],Q=G.pop,Z=G.push,K=G.push,J=G.slice,tt=function(t,e){for(var n=0,r=t.length;r>n;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",rt="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",it=rt.replace("w","w#"),ot="\\["+nt+"*("+rt+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+it+"))|)"+nt+"*\\]",st=":("+rt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ot+")*)|.*)\\)|)",at=new RegExp(nt+"+","g"),lt=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),ut=new RegExp("^"+nt+"*,"+nt+"*"),ct=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ft=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),pt=new RegExp(st),ht=new RegExp("^"+it+"$"),dt={ID:new RegExp("^#("+rt+")"),CLASS:new RegExp("^\\.("+rt+")"),TAG:new RegExp("^("+rt.replace("w","w*")+")"),ATTR:new RegExp("^"+ot),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},mt=/^(?:input|select|textarea|button)$/i,vt=/^h\d$/i,gt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,$t=/[+~]/,bt=/'|\\/g,wt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),xt=function(t,e,n){var r="0x"+e-65536;return r!==r||n?e:0>r?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},_t=function(){j()};try{K.apply(G=J.call(L.childNodes),L.childNodes),G[L.childNodes.length].nodeType}catch(Tt){K={apply:G.length?function(t,e){Z.apply(t,J.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}w=e.support={},T=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},j=e.setDocument=function(t){var e,n,r=t?t.ownerDocument||t:L;return r!==P&&9===r.nodeType&&r.documentElement?(P=r,N=r.documentElement,n=r.defaultView,n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",_t,!1):n.attachEvent&&n.attachEvent("onunload",_t)),D=!T(r),w.attributes=i(function(t){return t.className="i",!t.getAttribute("className")}),w.getElementsByTagName=i(function(t){return t.appendChild(r.createComment("")),!t.getElementsByTagName("*").length}),w.getElementsByClassName=gt.test(r.getElementsByClassName),w.getById=i(function(t){return N.appendChild(t).id=F,!r.getElementsByName||!r.getElementsByName(F).length}),w.getById?(x.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&D){var n=e.getElementById(t);return n&&n.parentNode?[n]:[]}},x.filter.ID=function(t){var e=t.replace(wt,xt);return function(t){return t.getAttribute("id")===e}}):(delete x.find.ID,x.filter.ID=function(t){var e=t.replace(wt,xt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),x.find.TAG=w.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):w.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},x.find.CLASS=w.getElementsByClassName&&function(t,e){return D?e.getElementsByClassName(t):void 0},I=[],M=[],(w.qsa=gt.test(r.querySelectorAll))&&(i(function(t){N.appendChild(t).innerHTML="<a id='"+F+"'></a><select id='"+F+"-\f]' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&M.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||M.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+F+"-]").length||M.push("~="),t.querySelectorAll(":checked").length||M.push(":checked"),t.querySelectorAll("a#"+F+"+*").length||M.push(".#.+[+~]")}),i(function(t){var e=r.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&M.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||M.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),M.push(",.*:")})),(w.matchesSelector=gt.test(R=N.matches||N.webkitMatchesSelector||N.mozMatchesSelector||N.oMatchesSelector||N.msMatchesSelector))&&i(function(t){w.disconnectedMatch=R.call(t,"div"),R.call(t,"[s!='']:x"),I.push("!=",st)}),M=M.length&&new RegExp(M.join("|")),I=I.length&&new RegExp(I.join("|")),e=gt.test(N.compareDocumentPosition),q=e||gt.test(N.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},W=e?function(t,e){if(t===e)return O=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!w.sortDetached&&e.compareDocumentPosition(t)===n?t===r||t.ownerDocument===L&&q(L,t)?-1:e===r||e.ownerDocument===L&&q(L,e)?1:A?tt(A,t)-tt(A,e):0:4&n?-1:1)}:function(t,e){if(t===e)return O=!0,0;var n,i=0,o=t.parentNode,a=e.parentNode,l=[t],u=[e];if(!o||!a)return t===r?-1:e===r?1:o?-1:a?1:A?tt(A,t)-tt(A,e):0;if(o===a)return s(t,e);for(n=t;n=n.parentNode;)l.unshift(n);for(n=e;n=n.parentNode;)u.unshift(n);for(;l[i]===u[i];)i++;return i?s(l[i],u[i]):l[i]===L?-1:u[i]===L?1:0},r):P},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==P&&j(t),n=n.replace(ft,"='$1']"),!(!w.matchesSelector||!D||I&&I.test(n)||M&&M.test(n)))try{var r=R.call(t,n);if(r||w.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(i){}return e(n,P,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==P&&j(t),q(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==P&&j(t);var n=x.attrHandle[e.toLowerCase()],r=n&&Y.call(x.attrHandle,e.toLowerCase())?n(t,e,!D):void 0;return void 0!==r?r:w.attributes||!D?t.getAttribute(e):(r=t.getAttributeNode(e))&&r.specified?r.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],r=0,i=0;if(O=!w.detectDuplicates,A=!w.sortStable&&t.slice(0),t.sort(W),O){for(;e=t[i++];)e===t[i]&&(r=n.push(i));for(;r--;)t.splice(n[r],1)}return A=null,t},_=e.getText=function(t){var e,n="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=_(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[r++];)n+=_(e);return n},x=e.selectors={cacheLength:50,createPseudo:r,match:dt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(wt,xt),t[3]=(t[3]||t[4]||t[5]||"").replace(wt,xt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return dt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&pt.test(n)&&(e=C(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(wt,xt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=B[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&B(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,r){return function(i){var o=e.attr(i,t);return null==o?"!="===n:n?(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(at," ")+" ").indexOf(r)>-1:"|="===n?o===r||o.slice(0,r.length+1)===r+"-":!1):!0}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,l){var u,c,f,p,h,d,m=o!==s?"nextSibling":"previousSibling",v=e.parentNode,g=a&&e.nodeName.toLowerCase(),y=!l&&!a;if(v){if(o){for(;m;){for(f=e;f=f[m];)if(a?f.nodeName.toLowerCase()===g:1===f.nodeType)return!1;d=m="only"===t&&!d&&"nextSibling"}return!0}if(d=[s?v.firstChild:v.lastChild],s&&y){for(c=v[F]||(v[F]={}),u=c[t]||[],h=u[0]===V&&u[1],p=u[0]===V&&u[2],f=h&&v.childNodes[h];f=++h&&f&&f[m]||(p=h=0)||d.pop();)if(1===f.nodeType&&++p&&f===e){c[t]=[V,h,p];break}}else if(y&&(u=(e[F]||(e[F]={}))[t])&&u[0]===V)p=u[1];else for(;(f=++h&&f&&f[m]||(p=h=0)||d.pop())&&((a?f.nodeName.toLowerCase()!==g:1!==f.nodeType)||!++p||(y&&((f[F]||(f[F]={}))[t]=[V,p]),f!==e)););return p-=i,p===r||p%r===0&&p/r>=0}}},PSEUDO:function(t,n){var i,o=x.pseudos[t]||x.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[F]?o(n):o.length>1?(i=[t,t,"",n],x.setFilters.hasOwnProperty(t.toLowerCase())?r(function(t,e){for(var r,i=o(t,n),s=i.length;s--;)r=tt(t,i[s]),t[r]=!(e[r]=i[s])}):function(t){return o(t,0,i)}):o}},pseudos:{not:r(function(t){var e=[],n=[],i=S(t.replace(lt,"$1"));return i[F]?r(function(t,e,n,r){for(var o,s=i(t,null,r,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:r(function(t){return function(n){return e(t,n).length>0}}),contains:r(function(t){return t=t.replace(wt,xt),function(e){return(e.textContent||e.innerText||_(e)).indexOf(t)>-1}}),lang:r(function(t){return ht.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(wt,xt).toLowerCase(),function(e){var n;do if(n=D?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===N},focus:function(t){return t===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return vt.test(t.nodeName)},input:function(t){return mt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,n){return[0>n?n+e:n]}),even:u(function(t,e){for(var n=0;e>n;n+=2)t.push(n);return t}),odd:u(function(t,e){for(var n=1;e>n;n+=2)t.push(n);return t}),lt:u(function(t,e,n){for(var r=0>n?n+e:n;--r>=0;)t.push(r);return t}),gt:u(function(t,e,n){for(var r=0>n?n+e:n;++r<e;)t.push(r);return t})}},x.pseudos.nth=x.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})x.pseudos[b]=l(b);return f.prototype=x.filters=x.pseudos,x.setFilters=new f,
C=e.tokenize=function(t,n){var r,i,o,s,a,l,u,c=z[t+" "];if(c)return n?0:c.slice(0);for(a=t,l=[],u=x.preFilter;a;){(!r||(i=ut.exec(a)))&&(i&&(a=a.slice(i[0].length)||a),l.push(o=[])),r=!1,(i=ct.exec(a))&&(r=i.shift(),o.push({value:r,type:i[0].replace(lt," ")}),a=a.slice(r.length));for(s in x.filter)!(i=dt[s].exec(a))||u[s]&&!(i=u[s](i))||(r=i.shift(),o.push({value:r,type:s,matches:i}),a=a.slice(r.length));if(!r)break}return n?a.length:a?e.error(t):z(t,l).slice(0)},S=e.compile=function(t,e){var n,r=[],i=[],o=U[t+" "];if(!o){for(e||(e=C(t)),n=e.length;n--;)o=y(e[n]),o[F]?r.push(o):i.push(o);o=U(t,$(i,r)),o.selector=t}return o},k=e.select=function(t,e,n,r){var i,o,s,a,l,u="function"==typeof t&&t,f=!r&&C(t=u.selector||t);if(n=n||[],1===f.length){if(o=f[0]=f[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&w.getById&&9===e.nodeType&&D&&x.relative[o[1].type]){if(e=(x.find.ID(s.matches[0].replace(wt,xt),e)||[])[0],!e)return n;u&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(i=dt.needsContext.test(t)?0:o.length;i--&&(s=o[i],!x.relative[a=s.type]);)if((l=x.find[a])&&(r=l(s.matches[0].replace(wt,xt),$t.test(o[0].type)&&c(e.parentNode)||e))){if(o.splice(i,1),t=r.length&&p(o),!t)return K.apply(n,r),n;break}}return(u||S(t,f))(r,e,!D,n,$t.test(t)&&c(e.parentNode)||e),n},w.sortStable=F.split("").sort(W).join("")===F,w.detectDuplicates=!!O,j(),w.sortDetached=i(function(t){return 1&t.compareDocumentPosition(P.createElement("div"))}),i(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){return n?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),w.attributes&&i(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){return n||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),i(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var r;return n?void 0:t[e]===!0?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),e}(t);J.find=it,J.expr=it.selectors,J.expr[":"]=J.expr.pseudos,J.unique=it.uniqueSort,J.text=it.getText,J.isXMLDoc=it.isXML,J.contains=it.contains;var ot=J.expr.match.needsContext,st=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,at=/^.[^:#\[\.,]*$/;J.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?J.find.matchesSelector(r,t)?[r]:[]:J.find.matches(t,J.grep(e,function(t){return 1===t.nodeType}))},J.fn.extend({find:function(t){var e,n=this.length,r=[],i=this;if("string"!=typeof t)return this.pushStack(J(t).filter(function(){for(e=0;n>e;e++)if(J.contains(i[e],this))return!0}));for(e=0;n>e;e++)J.find(t,i[e],r);return r=this.pushStack(n>1?J.unique(r):r),r.selector=this.selector?this.selector+" "+t:t,r},filter:function(t){return this.pushStack(r(this,t||[],!1))},not:function(t){return this.pushStack(r(this,t||[],!0))},is:function(t){return!!r(this,"string"==typeof t&&ot.test(t)?J(t):t||[],!1).length}});var lt,ut=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,ct=J.fn.init=function(t,e){var n,r;if(!t)return this;if("string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:ut.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||lt).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof J?e[0]:e,J.merge(this,J.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:Z,!0)),st.test(n[1])&&J.isPlainObject(e))for(n in e)J.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return r=Z.getElementById(n[2]),r&&r.parentNode&&(this.length=1,this[0]=r),this.context=Z,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):J.isFunction(t)?"undefined"!=typeof lt.ready?lt.ready(t):t(J):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),J.makeArray(t,this))};ct.prototype=J.fn,lt=J(Z);var ft=/^(?:parents|prev(?:Until|All))/,pt={children:!0,contents:!0,next:!0,prev:!0};J.extend({dir:function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&J(t).is(n))break;r.push(t)}return r},sibling:function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n}}),J.fn.extend({has:function(t){var e=J(t,this),n=e.length;return this.filter(function(){for(var t=0;n>t;t++)if(J.contains(this,e[t]))return!0})},closest:function(t,e){for(var n,r=0,i=this.length,o=[],s=ot.test(t)||"string"!=typeof t?J(t,e||this.context):0;i>r;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&J.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?J.unique(o):o)},index:function(t){return t?"string"==typeof t?W.call(J(t),this[0]):W.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(J.unique(J.merge(this.get(),J(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),J.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return J.dir(t,"parentNode")},parentsUntil:function(t,e,n){return J.dir(t,"parentNode",n)},next:function(t){return i(t,"nextSibling")},prev:function(t){return i(t,"previousSibling")},nextAll:function(t){return J.dir(t,"nextSibling")},prevAll:function(t){return J.dir(t,"previousSibling")},nextUntil:function(t,e,n){return J.dir(t,"nextSibling",n)},prevUntil:function(t,e,n){return J.dir(t,"previousSibling",n)},siblings:function(t){return J.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return J.sibling(t.firstChild)},contents:function(t){return t.contentDocument||J.merge([],t.childNodes)}},function(t,e){J.fn[t]=function(n,r){var i=J.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=J.filter(r,i)),this.length>1&&(pt[t]||J.unique(i),ft.test(t)&&i.reverse()),this.pushStack(i)}});var ht=/\S+/g,dt={};J.Callbacks=function(t){t="string"==typeof t?dt[t]||o(t):J.extend({},t);var e,n,r,i,s,a,l=[],u=!t.once&&[],c=function(o){for(e=t.memory&&o,n=!0,a=i||0,i=0,s=l.length,r=!0;l&&s>a;a++)if(l[a].apply(o[0],o[1])===!1&&t.stopOnFalse){e=!1;break}r=!1,l&&(u?u.length&&c(u.shift()):e?l=[]:f.disable())},f={add:function(){if(l){var n=l.length;!function o(e){J.each(e,function(e,n){var r=J.type(n);"function"===r?t.unique&&f.has(n)||l.push(n):n&&n.length&&"string"!==r&&o(n)})}(arguments),r?s=l.length:e&&(i=n,c(e))}return this},remove:function(){return l&&J.each(arguments,function(t,e){for(var n;(n=J.inArray(e,l,n))>-1;)l.splice(n,1),r&&(s>=n&&s--,a>=n&&a--)}),this},has:function(t){return t?J.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],s=0,this},disable:function(){return l=u=e=void 0,this},disabled:function(){return!l},lock:function(){return u=void 0,e||f.disable(),this},locked:function(){return!u},fireWith:function(t,e){return!l||n&&!u||(e=e||[],e=[t,e.slice?e.slice():e],r?u.push(e):c(e)),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!n}};return f},J.extend({Deferred:function(t){var e=[["resolve","done",J.Callbacks("once memory"),"resolved"],["reject","fail",J.Callbacks("once memory"),"rejected"],["notify","progress",J.Callbacks("memory")]],n="pending",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var t=arguments;return J.Deferred(function(n){J.each(e,function(e,o){var s=J.isFunction(t[e])&&t[e];i[o[1]](function(){var t=s&&s.apply(this,arguments);t&&J.isFunction(t.promise)?t.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[o[0]+"With"](this===r?n.promise():this,s?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?J.extend(t,r):r}},i={};return r.pipe=r.then,J.each(e,function(t,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},e[1^t][2].disable,e[2][2].lock),i[o[0]]=function(){return i[o[0]+"With"](this===i?r:this,arguments),this},i[o[0]+"With"]=s.fireWith}),r.promise(i),t&&t.call(i,i),i},when:function(t){var e,n,r,i=0,o=B.call(arguments),s=o.length,a=1!==s||t&&J.isFunction(t.promise)?s:0,l=1===a?t:J.Deferred(),u=function(t,n,r){return function(i){n[t]=this,r[t]=arguments.length>1?B.call(arguments):i,r===e?l.notifyWith(n,r):--a||l.resolveWith(n,r)}};if(s>1)for(e=new Array(s),n=new Array(s),r=new Array(s);s>i;i++)o[i]&&J.isFunction(o[i].promise)?o[i].promise().done(u(i,r,o)).fail(l.reject).progress(u(i,n,e)):--a;return a||l.resolveWith(r,o),l.promise()}});var mt;J.fn.ready=function(t){return J.ready.promise().done(t),this},J.extend({isReady:!1,readyWait:1,holdReady:function(t){t?J.readyWait++:J.ready(!0)},ready:function(t){(t===!0?--J.readyWait:J.isReady)||(J.isReady=!0,t!==!0&&--J.readyWait>0||(mt.resolveWith(Z,[J]),J.fn.triggerHandler&&(J(Z).triggerHandler("ready"),J(Z).off("ready"))))}}),J.ready.promise=function(e){return mt||(mt=J.Deferred(),"complete"===Z.readyState?setTimeout(J.ready):(Z.addEventListener("DOMContentLoaded",s,!1),t.addEventListener("load",s,!1))),mt.promise(e)},J.ready.promise();var vt=J.access=function(t,e,n,r,i,o,s){var a=0,l=t.length,u=null==n;if("object"===J.type(n)){i=!0;for(a in n)J.access(t,e,a,n[a],!0,o,s)}else if(void 0!==r&&(i=!0,J.isFunction(r)||(s=!0),u&&(s?(e.call(t,r),e=null):(u=e,e=function(t,e,n){return u.call(J(t),n)})),e))for(;l>a;a++)e(t[a],n,s?r:r.call(t[a],a,e(t[a],n)));return i?t:u?e.call(t):l?e(t[0],n):o};J.acceptData=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType},a.uid=1,a.accepts=J.acceptData,a.prototype={key:function(t){if(!a.accepts(t))return 0;var e={},n=t[this.expando];if(!n){n=a.uid++;try{e[this.expando]={value:n},Object.defineProperties(t,e)}catch(r){e[this.expando]=n,J.extend(t,e)}}return this.cache[n]||(this.cache[n]={}),n},set:function(t,e,n){var r,i=this.key(t),o=this.cache[i];if("string"==typeof e)o[e]=n;else if(J.isEmptyObject(o))J.extend(this.cache[i],e);else for(r in e)o[r]=e[r];return o},get:function(t,e){var n=this.cache[this.key(t)];return void 0===e?n:n[e]},access:function(t,e,n){var r;return void 0===e||e&&"string"==typeof e&&void 0===n?(r=this.get(t,e),void 0!==r?r:this.get(t,J.camelCase(e))):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r,i,o=this.key(t),s=this.cache[o];if(void 0===e)this.cache[o]={};else{J.isArray(e)?r=e.concat(e.map(J.camelCase)):(i=J.camelCase(e),e in s?r=[e,i]:(r=i,r=r in s?[r]:r.match(ht)||[])),n=r.length;for(;n--;)delete s[r[n]]}},hasData:function(t){return!J.isEmptyObject(this.cache[t[this.expando]]||{})},discard:function(t){t[this.expando]&&delete this.cache[t[this.expando]]}};var gt=new a,yt=new a,$t=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,bt=/([A-Z])/g;J.extend({hasData:function(t){return yt.hasData(t)||gt.hasData(t)},data:function(t,e,n){return yt.access(t,e,n)},removeData:function(t,e){yt.remove(t,e)},_data:function(t,e,n){return gt.access(t,e,n)},_removeData:function(t,e){gt.remove(t,e)}}),J.fn.extend({data:function(t,e){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(i=yt.get(o),1===o.nodeType&&!gt.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(r=s[n].name,0===r.indexOf("data-")&&(r=J.camelCase(r.slice(5)),l(o,r,i[r])));gt.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each(function(){yt.set(this,t)}):vt(this,function(e){var n,r=J.camelCase(t);if(o&&void 0===e){if(n=yt.get(o,t),void 0!==n)return n;if(n=yt.get(o,r),void 0!==n)return n;if(n=l(o,r,void 0),void 0!==n)return n}else this.each(function(){var n=yt.get(this,r);yt.set(this,r,e),-1!==t.indexOf("-")&&void 0!==n&&yt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){yt.remove(this,t)})}}),J.extend({queue:function(t,e,n){var r;return t?(e=(e||"fx")+"queue",r=gt.get(t,e),n&&(!r||J.isArray(n)?r=gt.access(t,e,J.makeArray(n)):r.push(n)),r||[]):void 0},dequeue:function(t,e){e=e||"fx";var n=J.queue(t,e),r=n.length,i=n.shift(),o=J._queueHooks(t,e),s=function(){J.dequeue(t,e)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return gt.get(t,n)||gt.access(t,n,{empty:J.Callbacks("once memory").add(function(){gt.remove(t,[e+"queue",n])})})}}),J.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?J.queue(this[0],t):void 0===e?this:this.each(function(){var n=J.queue(this,t,e);J._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&J.dequeue(this,t)})},dequeue:function(t){return this.each(function(){J.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=J.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)n=gt.get(o[s],t+"queueHooks"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(e)}});var wt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,xt=["Top","Right","Bottom","Left"],_t=function(t,e){return t=e||t,"none"===J.css(t,"display")||!J.contains(t.ownerDocument,t)},Tt=/^(?:checkbox|radio)$/i;!function(){var t=Z.createDocumentFragment(),e=t.appendChild(Z.createElement("div")),n=Z.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),Q.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",Q.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Ct="undefined";Q.focusinBubbles="onfocusin"in t;var St=/^key/,kt=/^(?:mouse|pointer|contextmenu)|click/,Et=/^(?:focusinfocus|focusoutblur)$/,At=/^([^.]*)(?:\.(.+)|)$/;J.event={global:{},add:function(t,e,n,r,i){var o,s,a,l,u,c,f,p,h,d,m,v=gt.get(t);if(v)for(n.handler&&(o=n,n=o.handler,i=o.selector),n.guid||(n.guid=J.guid++),(l=v.events)||(l=v.events={}),(s=v.handle)||(s=v.handle=function(e){return typeof J!==Ct&&J.event.triggered!==e.type?J.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(ht)||[""],u=e.length;u--;)a=At.exec(e[u])||[],h=m=a[1],d=(a[2]||"").split(".").sort(),h&&(f=J.event.special[h]||{},h=(i?f.delegateType:f.bindType)||h,f=J.event.special[h]||{},c=J.extend({type:h,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&J.expr.match.needsContext.test(i),namespace:d.join(".")},o),(p=l[h])||(p=l[h]=[],p.delegateCount=0,f.setup&&f.setup.call(t,r,d,s)!==!1||t.addEventListener&&t.addEventListener(h,s,!1)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),J.event.global[h]=!0)},remove:function(t,e,n,r,i){var o,s,a,l,u,c,f,p,h,d,m,v=gt.hasData(t)&&gt.get(t);if(v&&(l=v.events)){for(e=(e||"").match(ht)||[""],u=e.length;u--;)if(a=At.exec(e[u])||[],h=m=a[1],d=(a[2]||"").split(".").sort(),h){for(f=J.event.special[h]||{},h=(r?f.delegateType:f.bindType)||h,p=l[h]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)c=p[o],!i&&m!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(t,c));s&&!p.length&&(f.teardown&&f.teardown.call(t,d,v.handle)!==!1||J.removeEvent(t,h,v.handle),delete l[h])}else for(h in l)J.event.remove(t,h+e[u],n,r,!0);J.isEmptyObject(l)&&(delete v.handle,gt.remove(t,"events"))}},trigger:function(e,n,r,i){var o,s,a,l,u,c,f,p=[r||Z],h=G.call(e,"type")?e.type:e,d=G.call(e,"namespace")?e.namespace.split("."):[];if(s=a=r=r||Z,3!==r.nodeType&&8!==r.nodeType&&!Et.test(h+J.event.triggered)&&(h.indexOf(".")>=0&&(d=h.split("."),h=d.shift(),d.sort()),u=h.indexOf(":")<0&&"on"+h,e=e[J.expando]?e:new J.Event(h,"object"==typeof e&&e),e.isTrigger=i?2:3,e.namespace=d.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),n=null==n?[e]:J.makeArray(n,[e]),f=J.event.special[h]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!J.isWindow(r)){for(l=f.delegateType||h,Et.test(l+h)||(s=s.parentNode);s;s=s.parentNode)p.push(s),a=s;a===(r.ownerDocument||Z)&&p.push(a.defaultView||a.parentWindow||t)}for(o=0;(s=p[o++])&&!e.isPropagationStopped();)e.type=o>1?l:f.bindType||h,c=(gt.get(s,"events")||{})[e.type]&&gt.get(s,"handle"),c&&c.apply(s,n),c=u&&s[u],c&&c.apply&&J.acceptData(s)&&(e.result=c.apply(s,n),e.result===!1&&e.preventDefault());return e.type=h,i||e.isDefaultPrevented()||f._default&&f._default.apply(p.pop(),n)!==!1||!J.acceptData(r)||u&&J.isFunction(r[h])&&!J.isWindow(r)&&(a=r[u],a&&(r[u]=null),J.event.triggered=h,r[h](),J.event.triggered=void 0,a&&(r[u]=a)),e.result}},dispatch:function(t){t=J.event.fix(t);var e,n,r,i,o,s=[],a=B.call(arguments),l=(gt.get(this,"events")||{})[t.type]||[],u=J.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,t)!==!1){for(s=J.event.handlers.call(this,t,l),e=0;(i=s[e++])&&!t.isPropagationStopped();)for(t.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(o.namespace))&&(t.handleObj=o,t.data=o.data,r=((J.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),void 0!==r&&(t.result=r)===!1&&(t.preventDefault(),t.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,t),t.result}},handlers:function(t,e){var n,r,i,o,s=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!==this;l=l.parentNode||this)if(l.disabled!==!0||"click"!==t.type){for(r=[],n=0;a>n;n++)o=e[n],i=o.selector+" ",void 0===r[i]&&(r[i]=o.needsContext?J(i,this).index(l)>=0:J.find(i,this,null,[l]).length),r[i]&&r.push(o);r.length&&s.push({elem:l,handlers:r})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var n,r,i,o=e.button;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||Z,r=n.documentElement,i=n.body,t.pageX=e.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),t.pageY=e.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),t.which||void 0===o||(t.which=1&o?1:2&o?3:4&o?2:0),t}},fix:function(t){if(t[J.expando])return t;var e,n,r,i=t.type,o=t,s=this.fixHooks[i];for(s||(this.fixHooks[i]=s=kt.test(i)?this.mouseHooks:St.test(i)?this.keyHooks:{}),r=s.props?this.props.concat(s.props):this.props,t=new J.Event(o),e=r.length;e--;)n=r[e],t[n]=o[n];return t.target||(t.target=Z),3===t.target.nodeType&&(t.target=t.target.parentNode),s.filter?s.filter(t,o):t},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==f()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===f()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&J.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(t){return J.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,n,r){var i=J.extend(new J.Event,n,{type:t,isSimulated:!0,originalEvent:{}});r?J.event.trigger(i,null,e):J.event.dispatch.call(e,i),i.isDefaultPrevented()&&n.preventDefault()}},J.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n,!1)},J.Event=function(t,e){return this instanceof J.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?u:c):this.type=t,e&&J.extend(this,e),this.timeStamp=t&&t.timeStamp||J.now(),void(this[J.expando]=!0)):new J.Event(t,e)},J.Event.prototype={isDefaultPrevented:c,isPropagationStopped:c,isImmediatePropagationStopped:c,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=u,t&&t.preventDefault&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=u,t&&t.stopPropagation&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=u,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},J.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){J.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=this,i=t.relatedTarget,o=t.handleObj;return(!i||i!==r&&!J.contains(r,i))&&(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),Q.focusinBubbles||J.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){J.event.simulate(e,t.target,J.event.fix(t),!0)};J.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=gt.access(r,e);i||r.addEventListener(t,n,!0),gt.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=gt.access(r,e)-1;i?gt.access(r,e,i):(r.removeEventListener(t,n,!0),gt.remove(r,e))}}}),J.fn.extend({on:function(t,e,n,r,i){var o,s;if("object"==typeof t){"string"!=typeof e&&(n=n||e,e=void 0);for(s in t)this.on(s,e,n,t[s],i);return this}if(null==n&&null==r?(r=e,n=e=void 0):null==r&&("string"==typeof e?(r=n,n=void 0):(r=n,n=e,e=void 0)),r===!1)r=c;else if(!r)return this;return 1===i&&(o=r,r=function(t){return J().off(t),o.apply(this,arguments)},r.guid=o.guid||(o.guid=J.guid++)),this.each(function(){J.event.add(this,t,r,n,e)})},one:function(t,e,n,r){return this.on(t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,J(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return(e===!1||"function"==typeof e)&&(n=e,e=void 0),n===!1&&(n=c),this.each(function(){J.event.remove(this,t,n,e)})},trigger:function(t,e){return this.each(function(){J.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];return n?J.event.trigger(t,e,n,!0):void 0}});var Ot=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,jt=/<([\w:]+)/,Pt=/<|&#?\w+;/,Nt=/<(?:script|style|link)/i,Dt=/checked\s*(?:[^=]|=\s*.checked.)/i,Mt=/^$|\/(?:java|ecma)script/i,It=/^true\/(.*)/,Rt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,qt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};qt.optgroup=qt.option,qt.tbody=qt.tfoot=qt.colgroup=qt.caption=qt.thead,qt.th=qt.td,J.extend({clone:function(t,e,n){var r,i,o,s,a=t.cloneNode(!0),l=J.contains(t.ownerDocument,t);if(!(Q.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||J.isXMLDoc(t)))for(s=g(a),o=g(t),r=0,i=o.length;i>r;r++)y(o[r],s[r]);if(e)if(n)for(o=o||g(t),s=s||g(a),r=0,i=o.length;i>r;r++)v(o[r],s[r]);else v(t,a);return s=g(a,"script"),s.length>0&&m(s,!l&&g(t,"script")),a},buildFragment:function(t,e,n,r){for(var i,o,s,a,l,u,c=e.createDocumentFragment(),f=[],p=0,h=t.length;h>p;p++)if(i=t[p],i||0===i)if("object"===J.type(i))J.merge(f,i.nodeType?[i]:i);else if(Pt.test(i)){for(o=o||c.appendChild(e.createElement("div")),s=(jt.exec(i)||["",""])[1].toLowerCase(),a=qt[s]||qt._default,o.innerHTML=a[1]+i.replace(Ot,"<$1></$2>")+a[2],u=a[0];u--;)o=o.lastChild;J.merge(f,o.childNodes),o=c.firstChild,o.textContent=""}else f.push(e.createTextNode(i));for(c.textContent="",p=0;i=f[p++];)if((!r||-1===J.inArray(i,r))&&(l=J.contains(i.ownerDocument,i),o=g(c.appendChild(i),"script"),l&&m(o),n))for(u=0;i=o[u++];)Mt.test(i.type||"")&&n.push(i);return c},cleanData:function(t){for(var e,n,r,i,o=J.event.special,s=0;void 0!==(n=t[s]);s++){if(J.acceptData(n)&&(i=n[gt.expando],i&&(e=gt.cache[i]))){if(e.events)for(r in e.events)o[r]?J.event.remove(n,r):J.removeEvent(n,r,e.handle);gt.cache[i]&&delete gt.cache[i]}delete yt.cache[n[yt.expando]]}}}),J.fn.extend({text:function(t){return vt(this,function(t){return void 0===t?J.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=t)})},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=p(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=p(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var n,r=t?J.filter(t,this):this,i=0;null!=(n=r[i]);i++)e||1!==n.nodeType||J.cleanData(g(n)),n.parentNode&&(e&&J.contains(n.ownerDocument,n)&&m(g(n,"script")),n.parentNode.removeChild(n));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(J.cleanData(g(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return J.clone(this,t,e)})},html:function(t){return vt(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Nt.test(t)&&!qt[(jt.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(Ot,"<$1></$2>");try{for(;r>n;n++)e=this[n]||{},1===e.nodeType&&(J.cleanData(g(e,!1)),e.innerHTML=t);e=0}catch(i){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,J.cleanData(g(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=z.apply([],t);var n,r,i,o,s,a,l=0,u=this.length,c=this,f=u-1,p=t[0],m=J.isFunction(p);if(m||u>1&&"string"==typeof p&&!Q.checkClone&&Dt.test(p))return this.each(function(n){var r=c.eq(n);m&&(t[0]=p.call(this,n,r.html())),r.domManip(t,e)});if(u&&(n=J.buildFragment(t,this[0].ownerDocument,!1,this),r=n.firstChild,1===n.childNodes.length&&(n=r),r)){for(i=J.map(g(n,"script"),h),o=i.length;u>l;l++)s=n,l!==f&&(s=J.clone(s,!0,!0),o&&J.merge(i,g(s,"script"))),e.call(this[l],s,l);if(o)for(a=i[i.length-1].ownerDocument,J.map(i,d),l=0;o>l;l++)s=i[l],Mt.test(s.type||"")&&!gt.access(s,"globalEval")&&J.contains(a,s)&&(s.src?J._evalUrl&&J._evalUrl(s.src):J.globalEval(s.textContent.replace(Rt,"")))}return this}}),J.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){J.fn[t]=function(t){for(var n,r=[],i=J(t),o=i.length-1,s=0;o>=s;s++)n=s===o?this:this.clone(!0),J(i[s])[e](n),U.apply(r,n.get());return this.pushStack(r)}});var Ft,Lt={},Vt=/^margin/,Ht=new RegExp("^("+wt+")(?!px)[a-z%]+$","i"),Bt=function(e){return e.ownerDocument.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):t.getComputedStyle(e,null)};!function(){function e(){s.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",s.innerHTML="",i.appendChild(o);var e=t.getComputedStyle(s,null);n="1%"!==e.top,r="4px"===e.width,i.removeChild(o)}var n,r,i=Z.documentElement,o=Z.createElement("div"),s=Z.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",Q.clearCloneStyle="content-box"===s.style.backgroundClip,o.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",o.appendChild(s),t.getComputedStyle&&J.extend(Q,{pixelPosition:function(){return e(),n},boxSizingReliable:function(){return null==r&&e(),r},reliableMarginRight:function(){var e,n=s.appendChild(Z.createElement("div"));return n.style.cssText=s.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",n.style.marginRight=n.style.width="0",s.style.width="1px",i.appendChild(o),e=!parseFloat(t.getComputedStyle(n,null).marginRight),i.removeChild(o),s.removeChild(n),e}}))}(),J.swap=function(t,e,n,r){var i,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];i=n.apply(t,r||[]);for(o in e)t.style[o]=s[o];return i};var zt=/^(none|table(?!-c[ea]).+)/,Ut=new RegExp("^("+wt+")(.*)$","i"),Wt=new RegExp("^([+-])=("+wt+")","i"),Xt={position:"absolute",visibility:"hidden",display:"block"},Yt={letterSpacing:"0",fontWeight:"400"},Gt=["Webkit","O","Moz","ms"];J.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=w(t,"opacity");return""===n?"1":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,s,a=J.camelCase(e),l=t.style;return e=J.cssProps[a]||(J.cssProps[a]=_(l,a)),s=J.cssHooks[e]||J.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(i=s.get(t,!1,r))?i:l[e]:(o=typeof n,"string"===o&&(i=Wt.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(J.css(t,e)),o="number"),void(null!=n&&n===n&&("number"!==o||J.cssNumber[a]||(n+="px"),Q.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,r))||(l[e]=n))))}},css:function(t,e,n,r){var i,o,s,a=J.camelCase(e);return e=J.cssProps[a]||(J.cssProps[a]=_(t.style,a)),s=J.cssHooks[e]||J.cssHooks[a],s&&"get"in s&&(i=s.get(t,!0,n)),void 0===i&&(i=w(t,e,r)),"normal"===i&&e in Yt&&(i=Yt[e]),""===n||n?(o=parseFloat(i),n===!0||J.isNumeric(o)?o||0:i):i}}),J.each(["height","width"],function(t,e){J.cssHooks[e]={get:function(t,n,r){return n?zt.test(J.css(t,"display"))&&0===t.offsetWidth?J.swap(t,Xt,function(){return S(t,e,r)}):S(t,e,r):void 0},set:function(t,n,r){var i=r&&Bt(t);return T(t,n,r?C(t,e,r,"border-box"===J.css(t,"boxSizing",!1,i),i):0)}}}),J.cssHooks.marginRight=x(Q.reliableMarginRight,function(t,e){return e?J.swap(t,{display:"inline-block"},w,[t,"marginRight"]):void 0}),J.each({margin:"",padding:"",border:"Width"},function(t,e){J.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];4>r;r++)i[t+xt[r]+e]=o[r]||o[r-2]||o[0];return i}},Vt.test(t)||(J.cssHooks[t+e].set=T)}),J.fn.extend({css:function(t,e){return vt(this,function(t,e,n){var r,i,o={},s=0;if(J.isArray(e)){for(r=Bt(t),i=e.length;i>s;s++)o[e[s]]=J.css(t,e[s],!1,r);return o}return void 0!==n?J.style(t,e,n):J.css(t,e)},t,e,arguments.length>1)},show:function(){return k(this,!0)},hide:function(){return k(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){_t(this)?J(this).show():J(this).hide()})}}),J.Tween=E,E.prototype={constructor:E,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||"swing",this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(J.cssNumber[n]?"":"px")},cur:function(){var t=E.propHooks[this.prop];return t&&t.get?t.get(this):E.propHooks._default.get(this)},run:function(t){var e,n=E.propHooks[this.prop];return this.options.duration?this.pos=e=J.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):E.propHooks._default.set(this),this}},E.prototype.init.prototype=E.prototype,E.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=J.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){J.fx.step[t.prop]?J.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[J.cssProps[t.prop]]||J.cssHooks[t.prop])?J.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now;
}}},E.propHooks.scrollTop=E.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},J.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},J.fx=E.prototype.init,J.fx.step={};var Qt,Zt,Kt=/^(?:toggle|show|hide)$/,Jt=new RegExp("^(?:([+-])=|)("+wt+")([a-z%]*)$","i"),te=/queueHooks$/,ee=[P],ne={"*":[function(t,e){var n=this.createTween(t,e),r=n.cur(),i=Jt.exec(e),o=i&&i[3]||(J.cssNumber[t]?"":"px"),s=(J.cssNumber[t]||"px"!==o&&+r)&&Jt.exec(J.css(n.elem,t)),a=1,l=20;if(s&&s[3]!==o){o=o||s[3],i=i||[],s=+r||1;do a=a||".5",s/=a,J.style(n.elem,t,s+o);while(a!==(a=n.cur()/r)&&1!==a&&--l)}return i&&(s=n.start=+s||+r||0,n.unit=o,n.end=i[1]?s+(i[1]+1)*i[2]:+i[2]),n}]};J.Animation=J.extend(D,{tweener:function(t,e){J.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var n,r=0,i=t.length;i>r;r++)n=t[r],ne[n]=ne[n]||[],ne[n].unshift(e)},prefilter:function(t,e){e?ee.unshift(t):ee.push(t)}}),J.speed=function(t,e,n){var r=t&&"object"==typeof t?J.extend({},t):{complete:n||!n&&e||J.isFunction(t)&&t,duration:t,easing:n&&e||e&&!J.isFunction(e)&&e};return r.duration=J.fx.off?0:"number"==typeof r.duration?r.duration:r.duration in J.fx.speeds?J.fx.speeds[r.duration]:J.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue="fx"),r.old=r.complete,r.complete=function(){J.isFunction(r.old)&&r.old.call(this),r.queue&&J.dequeue(this,r.queue)},r},J.fn.extend({fadeTo:function(t,e,n,r){return this.filter(_t).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=J.isEmptyObject(t),o=J.speed(e,n,r),s=function(){var e=D(this,J.extend({},t),o);(i||gt.get(this,"finish"))&&e.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=J.timers,s=gt.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&te.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));(e||!n)&&J.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=gt.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=J.timers,s=r?r.length:0;for(n.finish=!0,J.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;s>e;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),J.each(["toggle","show","hide"],function(t,e){var n=J.fn[e];J.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(O(e,!0),t,r,i)}}),J.each({slideDown:O("show"),slideUp:O("hide"),slideToggle:O("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){J.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),J.timers=[],J.fx.tick=function(){var t,e=0,n=J.timers;for(Qt=J.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||J.fx.stop(),Qt=void 0},J.fx.timer=function(t){J.timers.push(t),t()?J.fx.start():J.timers.pop()},J.fx.interval=13,J.fx.start=function(){Zt||(Zt=setInterval(J.fx.tick,J.fx.interval))},J.fx.stop=function(){clearInterval(Zt),Zt=null},J.fx.speeds={slow:600,fast:200,_default:400},J.fn.delay=function(t,e){return t=J.fx?J.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,n){var r=setTimeout(e,t);n.stop=function(){clearTimeout(r)}})},function(){var t=Z.createElement("input"),e=Z.createElement("select"),n=e.appendChild(Z.createElement("option"));t.type="checkbox",Q.checkOn=""!==t.value,Q.optSelected=n.selected,e.disabled=!0,Q.optDisabled=!n.disabled,t=Z.createElement("input"),t.value="t",t.type="radio",Q.radioValue="t"===t.value}();var re,ie,oe=J.expr.attrHandle;J.fn.extend({attr:function(t,e){return vt(this,J.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){J.removeAttr(this,t)})}}),J.extend({attr:function(t,e,n){var r,i,o=t.nodeType;return t&&3!==o&&8!==o&&2!==o?typeof t.getAttribute===Ct?J.prop(t,e,n):(1===o&&J.isXMLDoc(t)||(e=e.toLowerCase(),r=J.attrHooks[e]||(J.expr.match.bool.test(e)?ie:re)),void 0===n?r&&"get"in r&&null!==(i=r.get(t,e))?i:(i=J.find.attr(t,e),null==i?void 0:i):null!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):void J.removeAttr(t,e)):void 0},removeAttr:function(t,e){var n,r,i=0,o=e&&e.match(ht);if(o&&1===t.nodeType)for(;n=o[i++];)r=J.propFix[n]||n,J.expr.match.bool.test(n)&&(t[r]=!1),t.removeAttribute(n)},attrHooks:{type:{set:function(t,e){if(!Q.radioValue&&"radio"===e&&J.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}}}),ie={set:function(t,e,n){return e===!1?J.removeAttr(t,n):t.setAttribute(n,n),n}},J.each(J.expr.match.bool.source.match(/\w+/g),function(t,e){var n=oe[e]||J.find.attr;oe[e]=function(t,e,r){var i,o;return r||(o=oe[e],oe[e]=i,i=null!=n(t,e,r)?e.toLowerCase():null,oe[e]=o),i}});var se=/^(?:input|select|textarea|button)$/i;J.fn.extend({prop:function(t,e){return vt(this,J.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[J.propFix[t]||t]})}}),J.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,n){var r,i,o,s=t.nodeType;return t&&3!==s&&8!==s&&2!==s?(o=1!==s||!J.isXMLDoc(t),o&&(e=J.propFix[e]||e,i=J.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]):void 0},propHooks:{tabIndex:{get:function(t){return t.hasAttribute("tabindex")||se.test(t.nodeName)||t.href?t.tabIndex:-1}}}}),Q.optSelected||(J.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null}}),J.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){J.propFix[this.toLowerCase()]=this});var ae=/[\t\r\n\f]/g;J.fn.extend({addClass:function(t){var e,n,r,i,o,s,a="string"==typeof t&&t,l=0,u=this.length;if(J.isFunction(t))return this.each(function(e){J(this).addClass(t.call(this,e,this.className))});if(a)for(e=(t||"").match(ht)||[];u>l;l++)if(n=this[l],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(ae," "):" ")){for(o=0;i=e[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");s=J.trim(r),n.className!==s&&(n.className=s)}return this},removeClass:function(t){var e,n,r,i,o,s,a=0===arguments.length||"string"==typeof t&&t,l=0,u=this.length;if(J.isFunction(t))return this.each(function(e){J(this).removeClass(t.call(this,e,this.className))});if(a)for(e=(t||"").match(ht)||[];u>l;l++)if(n=this[l],r=1===n.nodeType&&(n.className?(" "+n.className+" ").replace(ae," "):"")){for(o=0;i=e[o++];)for(;r.indexOf(" "+i+" ")>=0;)r=r.replace(" "+i+" "," ");s=t?J.trim(r):"",n.className!==s&&(n.className=s)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):this.each(J.isFunction(t)?function(n){J(this).toggleClass(t.call(this,n,this.className,e),e)}:function(){if("string"===n)for(var e,r=0,i=J(this),o=t.match(ht)||[];e=o[r++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else(n===Ct||"boolean"===n)&&(this.className&&gt.set(this,"__className__",this.className),this.className=this.className||t===!1?"":gt.get(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",n=0,r=this.length;r>n;n++)if(1===this[n].nodeType&&(" "+this[n].className+" ").replace(ae," ").indexOf(e)>=0)return!0;return!1}});var le=/\r/g;J.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=J.isFunction(t),this.each(function(n){var i;1===this.nodeType&&(i=r?t.call(this,n,J(this).val()):t,null==i?i="":"number"==typeof i?i+="":J.isArray(i)&&(i=J.map(i,function(t){return null==t?"":t+""})),e=J.valHooks[this.type]||J.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))})):i?(e=J.valHooks[i.type]||J.valHooks[i.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(le,""):null==n?"":n)):void 0}}),J.extend({valHooks:{option:{get:function(t){var e=J.find.attr(t,"value");return null!=e?e:J.trim(J.text(t))}},select:{get:function(t){for(var e,n,r=t.options,i=t.selectedIndex,o="select-one"===t.type||0>i,s=o?null:[],a=o?i+1:r.length,l=0>i?a:o?i:0;a>l;l++)if(n=r[l],!(!n.selected&&l!==i||(Q.optDisabled?n.disabled:null!==n.getAttribute("disabled"))||n.parentNode.disabled&&J.nodeName(n.parentNode,"optgroup"))){if(e=J(n).val(),o)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=J.makeArray(e),s=i.length;s--;)r=i[s],(r.selected=J.inArray(r.value,o)>=0)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),J.each(["radio","checkbox"],function(){J.valHooks[this]={set:function(t,e){return J.isArray(e)?t.checked=J.inArray(J(t).val(),e)>=0:void 0}},Q.checkOn||(J.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),J.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){J.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),J.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}});var ue=J.now(),ce=/\?/;J.parseJSON=function(t){return JSON.parse(t+"")},J.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{n=new DOMParser,e=n.parseFromString(t,"text/xml")}catch(r){e=void 0}return(!e||e.getElementsByTagName("parsererror").length)&&J.error("Invalid XML: "+t),e};var fe=/#.*$/,pe=/([?&])_=[^&]*/,he=/^(.*?):[ \t]*([^\r\n]*)$/gm,de=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,me=/^(?:GET|HEAD)$/,ve=/^\/\//,ge=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,ye={},$e={},be="*/".concat("*"),we=t.location.href,xe=ge.exec(we.toLowerCase())||[];J.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:we,type:"GET",isLocal:de.test(xe[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":J.parseJSON,"text xml":J.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?R(R(t,J.ajaxSettings),e):R(J.ajaxSettings,t)},ajaxPrefilter:M(ye),ajaxTransport:M($e),ajax:function(t,e){function n(t,e,n,s){var l,c,g,y,b,x=e;2!==$&&($=2,a&&clearTimeout(a),r=void 0,o=s||"",w.readyState=t>0?4:0,l=t>=200&&300>t||304===t,n&&(y=q(f,w,n)),y=F(f,y,w,l),l?(f.ifModified&&(b=w.getResponseHeader("Last-Modified"),b&&(J.lastModified[i]=b),b=w.getResponseHeader("etag"),b&&(J.etag[i]=b)),204===t||"HEAD"===f.type?x="nocontent":304===t?x="notmodified":(x=y.state,c=y.data,g=y.error,l=!g)):(g=x,(t||!x)&&(x="error",0>t&&(t=0))),w.status=t,w.statusText=(e||x)+"",l?d.resolveWith(p,[c,x,w]):d.rejectWith(p,[w,x,g]),w.statusCode(v),v=void 0,u&&h.trigger(l?"ajaxSuccess":"ajaxError",[w,f,l?c:g]),m.fireWith(p,[w,x]),u&&(h.trigger("ajaxComplete",[w,f]),--J.active||J.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,i,o,s,a,l,u,c,f=J.ajaxSetup({},e),p=f.context||f,h=f.context&&(p.nodeType||p.jquery)?J(p):J.event,d=J.Deferred(),m=J.Callbacks("once memory"),v=f.statusCode||{},g={},y={},$=0,b="canceled",w={readyState:0,getResponseHeader:function(t){var e;if(2===$){if(!s)for(s={};e=he.exec(o);)s[e[1].toLowerCase()]=e[2];e=s[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===$?o:null},setRequestHeader:function(t,e){var n=t.toLowerCase();return $||(t=y[n]=y[n]||t,g[t]=e),this},overrideMimeType:function(t){return $||(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>$)for(e in t)v[e]=[v[e],t[e]];else w.always(t[w.status]);return this},abort:function(t){var e=t||b;return r&&r.abort(e),n(0,e),this}};if(d.promise(w).complete=m.add,w.success=w.done,w.error=w.fail,f.url=((t||f.url||we)+"").replace(fe,"").replace(ve,xe[1]+"//"),f.type=e.method||e.type||f.method||f.type,f.dataTypes=J.trim(f.dataType||"*").toLowerCase().match(ht)||[""],null==f.crossDomain&&(l=ge.exec(f.url.toLowerCase()),f.crossDomain=!(!l||l[1]===xe[1]&&l[2]===xe[2]&&(l[3]||("http:"===l[1]?"80":"443"))===(xe[3]||("http:"===xe[1]?"80":"443")))),f.data&&f.processData&&"string"!=typeof f.data&&(f.data=J.param(f.data,f.traditional)),I(ye,f,e,w),2===$)return w;u=J.event&&f.global,u&&0===J.active++&&J.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!me.test(f.type),i=f.url,f.hasContent||(f.data&&(i=f.url+=(ce.test(i)?"&":"?")+f.data,delete f.data),f.cache===!1&&(f.url=pe.test(i)?i.replace(pe,"$1_="+ue++):i+(ce.test(i)?"&":"?")+"_="+ue++)),f.ifModified&&(J.lastModified[i]&&w.setRequestHeader("If-Modified-Since",J.lastModified[i]),J.etag[i]&&w.setRequestHeader("If-None-Match",J.etag[i])),(f.data&&f.hasContent&&f.contentType!==!1||e.contentType)&&w.setRequestHeader("Content-Type",f.contentType),w.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+be+"; q=0.01":""):f.accepts["*"]);for(c in f.headers)w.setRequestHeader(c,f.headers[c]);if(f.beforeSend&&(f.beforeSend.call(p,w,f)===!1||2===$))return w.abort();b="abort";for(c in{success:1,error:1,complete:1})w[c](f[c]);if(r=I($e,f,e,w)){w.readyState=1,u&&h.trigger("ajaxSend",[w,f]),f.async&&f.timeout>0&&(a=setTimeout(function(){w.abort("timeout")},f.timeout));try{$=1,r.send(g,n)}catch(x){if(!(2>$))throw x;n(-1,x)}}else n(-1,"No Transport");return w},getJSON:function(t,e,n){return J.get(t,e,n,"json")},getScript:function(t,e){return J.get(t,void 0,e,"script")}}),J.each(["get","post"],function(t,e){J[e]=function(t,n,r,i){return J.isFunction(n)&&(i=i||r,r=n,n=void 0),J.ajax({url:t,type:e,dataType:i,data:n,success:r})}}),J._evalUrl=function(t){return J.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},J.fn.extend({wrapAll:function(t){var e;return J.isFunction(t)?this.each(function(e){J(this).wrapAll(t.call(this,e))}):(this[0]&&(e=J(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this)},wrapInner:function(t){return this.each(J.isFunction(t)?function(e){J(this).wrapInner(t.call(this,e))}:function(){var e=J(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=J.isFunction(t);return this.each(function(n){J(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(){return this.parent().each(function(){J.nodeName(this,"body")||J(this).replaceWith(this.childNodes)}).end()}}),J.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0},J.expr.filters.visible=function(t){return!J.expr.filters.hidden(t)};var _e=/%20/g,Te=/\[\]$/,Ce=/\r?\n/g,Se=/^(?:submit|button|image|reset|file)$/i,ke=/^(?:input|select|textarea|keygen)/i;J.param=function(t,e){var n,r=[],i=function(t,e){e=J.isFunction(e)?e():null==e?"":e,r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=J.ajaxSettings&&J.ajaxSettings.traditional),J.isArray(t)||t.jquery&&!J.isPlainObject(t))J.each(t,function(){i(this.name,this.value)});else for(n in t)L(n,t[n],e,i);return r.join("&").replace(_e,"+")},J.fn.extend({serialize:function(){return J.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=J.prop(this,"elements");return t?J.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!J(this).is(":disabled")&&ke.test(this.nodeName)&&!Se.test(t)&&(this.checked||!Tt.test(t))}).map(function(t,e){var n=J(this).val();return null==n?null:J.isArray(n)?J.map(n,function(t){return{name:e.name,value:t.replace(Ce,"\r\n")}}):{name:e.name,value:n.replace(Ce,"\r\n")}}).get()}}),J.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(t){}};var Ee=0,Ae={},Oe={0:200,1223:204},je=J.ajaxSettings.xhr();t.attachEvent&&t.attachEvent("onunload",function(){for(var t in Ae)Ae[t]()}),Q.cors=!!je&&"withCredentials"in je,Q.ajax=je=!!je,J.ajaxTransport(function(t){var e;return Q.cors||je&&!t.crossDomain?{send:function(n,r){var i,o=t.xhr(),s=++Ee;if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(i in t.xhrFields)o[i]=t.xhrFields[i];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||n["X-Requested-With"]||(n["X-Requested-With"]="XMLHttpRequest");for(i in n)o.setRequestHeader(i,n[i]);e=function(t){return function(){e&&(delete Ae[s],e=o.onload=o.onerror=null,"abort"===t?o.abort():"error"===t?r(o.status,o.statusText):r(Oe[o.status]||o.status,o.statusText,"string"==typeof o.responseText?{text:o.responseText}:void 0,o.getAllResponseHeaders()))}},o.onload=e(),o.onerror=e("error"),e=Ae[s]=e("abort");try{o.send(t.hasContent&&t.data||null)}catch(a){if(e)throw a}},abort:function(){e&&e()}}:void 0}),J.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return J.globalEval(t),t}}}),J.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),J.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(r,i){e=J("<script>").prop({async:!0,charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),Z.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Pe=[],Ne=/(=)\?(?=&|$)|\?\?/;J.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Pe.pop()||J.expando+"_"+ue++;return this[t]=!0,t}}),J.ajaxPrefilter("json jsonp",function(e,n,r){var i,o,s,a=e.jsonp!==!1&&(Ne.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ne.test(e.data)&&"data");return a||"jsonp"===e.dataTypes[0]?(i=e.jsonpCallback=J.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Ne,"$1"+i):e.jsonp!==!1&&(e.url+=(ce.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return s||J.error(i+" was not called"),s[0]},e.dataTypes[0]="json",o=t[i],t[i]=function(){s=arguments},r.always(function(){t[i]=o,e[i]&&(e.jsonpCallback=n.jsonpCallback,Pe.push(i)),s&&J.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),J.parseHTML=function(t,e,n){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(n=e,e=!1),e=e||Z;var r=st.exec(t),i=!n&&[];return r?[e.createElement(r[1])]:(r=J.buildFragment([t],e,i),i&&i.length&&J(i).remove(),J.merge([],r.childNodes))};var De=J.fn.load;J.fn.load=function(t,e,n){if("string"!=typeof t&&De)return De.apply(this,arguments);var r,i,o,s=this,a=t.indexOf(" ");return a>=0&&(r=J.trim(t.slice(a)),t=t.slice(0,a)),J.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),s.length>0&&J.ajax({url:t,type:i,dataType:"html",data:e}).done(function(t){o=arguments,s.html(r?J("<div>").append(J.parseHTML(t)).find(r):t)}).complete(n&&function(t,e){s.each(n,o||[t.responseText,e,t])}),this},J.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){J.fn[e]=function(t){return this.on(e,t)}}),J.expr.filters.animated=function(t){return J.grep(J.timers,function(e){return t===e.elem}).length};var Me=t.document.documentElement;J.offset={setOffset:function(t,e,n){var r,i,o,s,a,l,u,c=J.css(t,"position"),f=J(t),p={};"static"===c&&(t.style.position="relative"),a=f.offset(),o=J.css(t,"top"),l=J.css(t,"left"),u=("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1,u?(r=f.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(l)||0),J.isFunction(e)&&(e=e.call(t,n,a)),null!=e.top&&(p.top=e.top-a.top+s),null!=e.left&&(p.left=e.left-a.left+i),"using"in e?e.using.call(t,p):f.css(p)}},J.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){J.offset.setOffset(this,t,e)});var e,n,r=this[0],i={top:0,left:0},o=r&&r.ownerDocument;return o?(e=o.documentElement,J.contains(e,r)?(typeof r.getBoundingClientRect!==Ct&&(i=r.getBoundingClientRect()),n=V(o),{top:i.top+n.pageYOffset-e.clientTop,left:i.left+n.pageXOffset-e.clientLeft}):i):void 0},position:function(){if(this[0]){var t,e,n=this[0],r={top:0,left:0};return"fixed"===J.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),J.nodeName(t[0],"html")||(r=t.offset()),r.top+=J.css(t[0],"borderTopWidth",!0),r.left+=J.css(t[0],"borderLeftWidth",!0)),{top:e.top-r.top-J.css(n,"marginTop",!0),left:e.left-r.left-J.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||Me;t&&!J.nodeName(t,"html")&&"static"===J.css(t,"position");)t=t.offsetParent;return t||Me})}}),J.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var r="pageYOffset"===n;J.fn[e]=function(i){return vt(this,function(e,i,o){var s=V(e);return void 0===o?s?s[n]:e[i]:void(s?s.scrollTo(r?t.pageXOffset:o,r?o:t.pageYOffset):e[i]=o)},e,i,arguments.length,null)}}),J.each(["top","left"],function(t,e){J.cssHooks[e]=x(Q.pixelPosition,function(t,n){return n?(n=w(t,e),Ht.test(n)?J(t).position()[e]+"px":n):void 0})}),J.each({Height:"height",Width:"width"},function(t,e){J.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){J.fn[r]=function(r,i){var o=arguments.length&&(n||"boolean"!=typeof r),s=n||(r===!0||i===!0?"margin":"border");return vt(this,function(e,n,r){var i;return J.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+t],i["scroll"+t],e.body["offset"+t],i["offset"+t],i["client"+t])):void 0===r?J.css(e,n,s):J.style(e,n,r,s)},e,o?r:void 0,o,null)}})}),J.fn.size=function(){return this.length},J.fn.andSelf=J.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return J});var Ie=t.jQuery,Re=t.$;return J.noConflict=function(e){return t.$===J&&(t.$=Re),e&&t.jQuery===J&&(t.jQuery=Ie),J},typeof e===Ct&&(t.jQuery=t.$=J),J}),"undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>2)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3")}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,r=this;t(this).one("bsTransitionEnd",function(){n=!0});var i=function(){n||t(r).trigger(t.support.transition.end)};return setTimeout(i,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){return t(e.target).is(this)?e.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),i=n.data("bs.alert");i||n.data("bs.alert",i=new r(this)),"string"==typeof e&&i[e].call(n)})}var n='[data-dismiss="alert"]',r=function(e){t(e).on("click",n,this.close)};r.VERSION="3.3.6",r.TRANSITION_DURATION=150,r.prototype.close=function(e){function n(){s.detach().trigger("closed.bs.alert").remove()}var i=t(this),o=i.attr("data-target");o||(o=i.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,""));var s=t(o);e&&e.preventDefault(),s.length||(s=i.closest(".alert")),s.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",n).emulateTransitionEnd(r.TRANSITION_DURATION):n())};var i=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=r,t.fn.alert.noConflict=function(){return t.fn.alert=i,this},t(document).on("click.bs.alert.data-api",n,r.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.button"),o="object"==typeof e&&e;i||r.data("bs.button",i=new n(this,o)),"toggle"==e?i.toggle():e&&i.setState(e)})}var n=function(e,r){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,r),this.isLoading=!1};n.VERSION="3.3.6",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",r=this.$element,i=r.is("input")?"val":"html",o=r.data();e+="Text",null==o.resetText&&r.data("resetText",r[i]()),setTimeout(t.proxy(function(){r[i](null==o[e]?this.options[e]:o[e]),"loadingText"==e?(this.isLoading=!0,r.addClass(n).attr(n,n)):this.isLoading&&(this.isLoading=!1,r.removeClass(n).removeAttr(n))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),t&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var r=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=r,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var r=t(n.target);r.hasClass("btn")||(r=r.closest(".btn")),e.call(r,"toggle"),t(n.target).is('input[type="radio"]')||t(n.target).is('input[type="checkbox"]')||n.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.carousel"),o=t.extend({},n.DEFAULTS,r.data(),"object"==typeof e&&e),s="string"==typeof e?e:o.slide;i||r.data("bs.carousel",i=new n(this,o)),"number"==typeof e?i.to(e):s?i[s]():o.interval&&i.pause().cycle()})}var n=function(e,n){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.3.6",n.TRANSITION_DURATION=600,n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},n.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.getItemForDirection=function(t,e){var n=this.getItemIndex(e),r="prev"==t&&0===n||"next"==t&&n==this.$items.length-1;if(r&&!this.options.wrap)return e;var i="prev"==t?-1:1,o=(n+i)%this.$items.length;return this.$items.eq(o)},n.prototype.to=function(t){var e=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));return t>this.$items.length-1||0>t?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",this.$items.eq(t))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){return this.sliding?void 0:this.slide("next")},n.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},n.prototype.slide=function(e,r){var i=this.$element.find(".item.active"),o=r||this.getItemForDirection(e,i),s=this.interval,a="next"==e?"left":"right",l=this;if(o.hasClass("active"))return this.sliding=!1;var u=o[0],c=t.Event("slide.bs.carousel",{relatedTarget:u,direction:a});if(this.$element.trigger(c),!c.isDefaultPrevented()){if(this.sliding=!0,s&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var f=t(this.$indicators.children()[this.getItemIndex(o)]);f&&f.addClass("active")}var p=t.Event("slid.bs.carousel",{relatedTarget:u,direction:a});return t.support.transition&&this.$element.hasClass("slide")?(o.addClass(e),o[0].offsetWidth,i.addClass(a),o.addClass(a),i.one("bsTransitionEnd",function(){o.removeClass([e,a].join(" ")).addClass("active"),i.removeClass(["active",a].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(p)},0)}).emulateTransitionEnd(n.TRANSITION_DURATION)):(i.removeClass("active"),o.addClass("active"),this.sliding=!1,this.$element.trigger(p)),s&&this.cycle(),this}};var r=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=r,this};var i=function(n){var r,i=t(this),o=t(i.attr("data-target")||(r=i.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var s=t.extend({},o.data(),i.data()),a=i.attr("data-slide-to");a&&(s.interval=!1),e.call(o,s),a&&o.data("bs.carousel").to(a),n.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",i).on("click.bs.carousel.data-api","[data-slide-to]",i),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),+function(t){"use strict";function e(e){var n,r=e.attr("data-target")||(n=e.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return t(r)}function n(e){return this.each(function(){var n=t(this),i=n.data("bs.collapse"),o=t.extend({},r.DEFAULTS,n.data(),"object"==typeof e&&e);!i&&o.toggle&&/show|hide/.test(e)&&(o.toggle=!1),i||n.data("bs.collapse",i=new r(this,o)),"string"==typeof e&&i[e]()})}var r=function(e,n){this.$element=t(e),this.options=t.extend({},r.DEFAULTS,n),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};r.VERSION="3.3.6",r.TRANSITION_DURATION=350,r.DEFAULTS={toggle:!0},r.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},r.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,i=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(i&&i.length&&(e=i.data("bs.collapse"),e&&e.transitioning))){var o=t.Event("show.bs.collapse");if(this.$element.trigger(o),!o.isDefaultPrevented()){i&&i.length&&(n.call(i,"hide"),e||i.data("bs.collapse",null));var s=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[s](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;
var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[s](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return a.call(this);var l=t.camelCase(["scroll",s].join("-"));this.$element.one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(r.TRANSITION_DURATION)[s](this.$element[0][l])}}}},r.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var i=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[n](0).one("bsTransitionEnd",t.proxy(i,this)).emulateTransitionEnd(r.TRANSITION_DURATION):i.call(this)}}},r.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},r.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(n,r){var i=t(r);this.addAriaAndCollapsedClass(e(i),i)},this)).end()},r.prototype.addAriaAndCollapsedClass=function(t,e){var n=t.hasClass("in");t.attr("aria-expanded",n),e.toggleClass("collapsed",!n).attr("aria-expanded",n)};var i=t.fn.collapse;t.fn.collapse=n,t.fn.collapse.Constructor=r,t.fn.collapse.noConflict=function(){return t.fn.collapse=i,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(r){var i=t(this);i.attr("data-target")||r.preventDefault();var o=e(i),s=o.data("bs.collapse"),a=s?"toggle":i.data();n.call(o,a)})}(jQuery),+function(t){"use strict";function e(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var r=n&&t(n);return r&&r.length?r:e.parent()}function n(n){n&&3===n.which||(t(i).remove(),t(o).each(function(){var r=t(this),i=e(r),o={relatedTarget:this};i.hasClass("open")&&(n&&"click"==n.type&&/input|textarea/i.test(n.target.tagName)&&t.contains(i[0],n.target)||(i.trigger(n=t.Event("hide.bs.dropdown",o)),n.isDefaultPrevented()||(r.attr("aria-expanded","false"),i.removeClass("open").trigger(t.Event("hidden.bs.dropdown",o)))))}))}function r(e){return this.each(function(){var n=t(this),r=n.data("bs.dropdown");r||n.data("bs.dropdown",r=new s(this)),"string"==typeof e&&r[e].call(n)})}var i=".dropdown-backdrop",o='[data-toggle="dropdown"]',s=function(e){t(e).on("click.bs.dropdown",this.toggle)};s.VERSION="3.3.6",s.prototype.toggle=function(r){var i=t(this);if(!i.is(".disabled, :disabled")){var o=e(i),s=o.hasClass("open");if(n(),!s){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",n);var a={relatedTarget:this};if(o.trigger(r=t.Event("show.bs.dropdown",a)),r.isDefaultPrevented())return;i.trigger("focus").attr("aria-expanded","true"),o.toggleClass("open").trigger(t.Event("shown.bs.dropdown",a))}return!1}},s.prototype.keydown=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)){var r=t(this);if(n.preventDefault(),n.stopPropagation(),!r.is(".disabled, :disabled")){var i=e(r),s=i.hasClass("open");if(!s&&27!=n.which||s&&27==n.which)return 27==n.which&&i.find(o).trigger("focus"),r.trigger("click");var a=" li:not(.disabled):visible a",l=i.find(".dropdown-menu"+a);if(l.length){var u=l.index(n.target);38==n.which&&u>0&&u--,40==n.which&&u<l.length-1&&u++,~u||(u=0),l.eq(u).trigger("focus")}}}};var a=t.fn.dropdown;t.fn.dropdown=r,t.fn.dropdown.Constructor=s,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=a,this},t(document).on("click.bs.dropdown.data-api",n).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",o,s.prototype.toggle).on("keydown.bs.dropdown.data-api",o,s.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",s.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e,r){return this.each(function(){var i=t(this),o=i.data("bs.modal"),s=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e);o||i.data("bs.modal",o=new n(this,s)),"string"==typeof e?o[e](r):s.show&&o.show(r)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.3.6",n.TRANSITION_DURATION=300,n.BACKDROP_TRANSITION_DURATION=150,n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var r=this,i=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(i),this.isShown||i.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){r.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(r.$element)&&(r.ignoreBackdropClick=!0)})}),this.backdrop(function(){var i=t.support.transition&&r.$element.hasClass("fade");r.$element.parent().length||r.$element.appendTo(r.$body),r.$element.show().scrollTop(0),r.adjustDialog(),i&&r.$element[0].offsetWidth,r.$element.addClass("in"),r.enforceFocus();var o=t.Event("shown.bs.modal",{relatedTarget:e});i?r.$dialog.one("bsTransitionEnd",function(){r.$element.trigger("focus").trigger(o)}).emulateTransitionEnd(n.TRANSITION_DURATION):r.$element.trigger("focus").trigger(o)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(n.TRANSITION_DURATION):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},n.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var r=this,i=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var o=t.support.transition&&i;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+i).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),o&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;o?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var s=function(){r.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",s).emulateTransitionEnd(n.BACKDROP_TRANSITION_DURATION):s()}else e&&e()},n.prototype.handleUpdate=function(){this.adjustDialog()},n.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},n.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},n.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var r=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=r,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var r=t(this),i=r.attr("href"),o=t(r.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),s=o.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(i)&&i},o.data(),r.data());r.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(t){t.isDefaultPrevented()||o.one("hidden.bs.modal",function(){r.is(":visible")&&r.trigger("focus")})}),e.call(o,s,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.tooltip"),o="object"==typeof e&&e;(i||!/destroy|hide/.test(e))&&(i||r.data("bs.tooltip",i=new n(this,o)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};n.VERSION="3.3.6",n.TRANSITION_DURATION=150,n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,r){if(this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(r),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var i=this.options.trigger.split(" "),o=i.length;o--;){var s=i[o];if("click"==s)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=s){var a="hover"==s?"mouseenter":"focusin",l="hover"==s?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,r){n[t]!=r&&(e[t]=r)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusin"==e.type?"focus":"hover"]=!0),n.tip().hasClass("in")||"in"==n.hoverState?void(n.hoverState="in"):(clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?void(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)):n.show())},n.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),e instanceof t.Event&&(n.inState["focusout"==e.type?"focus":"hover"]=!1),n.isInStateTrue()?void 0:(clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?void(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)):n.hide())},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var r=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!r)return;var i=this,o=this.tip(),s=this.getUID(this.type);this.setContent(),o.attr("id",s),this.$element.attr("aria-describedby",s),this.options.animation&&o.addClass("fade");var a="function"==typeof this.options.placement?this.options.placement.call(this,o[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,u=l.test(a);u&&(a=a.replace(l,"")||"top"),o.detach().css({top:0,left:0,display:"block"}).addClass(a).data("bs."+this.type,this),this.options.container?o.appendTo(this.options.container):o.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var c=this.getPosition(),f=o[0].offsetWidth,p=o[0].offsetHeight;if(u){var h=a,d=this.getPosition(this.$viewport);a="bottom"==a&&c.bottom+p>d.bottom?"top":"top"==a&&c.top-p<d.top?"bottom":"right"==a&&c.right+f>d.width?"left":"left"==a&&c.left-f<d.left?"right":a,o.removeClass(h).addClass(a)}var m=this.getCalculatedOffset(a,c,f,p);this.applyPlacement(m,a);var v=function(){var t=i.hoverState;i.$element.trigger("shown.bs."+i.type),i.hoverState=null,"out"==t&&i.leave(i)};t.support.transition&&this.$tip.hasClass("fade")?o.one("bsTransitionEnd",v).emulateTransitionEnd(n.TRANSITION_DURATION):v()}},n.prototype.applyPlacement=function(e,n){var r=this.tip(),i=r[0].offsetWidth,o=r[0].offsetHeight,s=parseInt(r.css("margin-top"),10),a=parseInt(r.css("margin-left"),10);isNaN(s)&&(s=0),isNaN(a)&&(a=0),e.top+=s,e.left+=a,t.offset.setOffset(r[0],t.extend({using:function(t){r.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),r.addClass("in");var l=r[0].offsetWidth,u=r[0].offsetHeight;"top"==n&&u!=o&&(e.top=e.top+o-u);var c=this.getViewportAdjustedDelta(n,e,l,u);c.left?e.left+=c.left:e.top+=c.top;var f=/top|bottom/.test(n),p=f?2*c.left-i+l:2*c.top-o+u,h=f?"offsetWidth":"offsetHeight";r.offset(e),this.replaceArrow(p,r[0][h],f)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n?"left":"top",50*(1-t/e)+"%").css(n?"top":"left","")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(e){function r(){"in"!=i.hoverState&&o.detach(),i.$element.removeAttr("aria-describedby").trigger("hidden.bs."+i.type),e&&e()}var i=this,o=t(this.$tip),s=t.Event("hide.bs."+this.type);return this.$element.trigger(s),s.isDefaultPrevented()?void 0:(o.removeClass("in"),t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",r).emulateTransitionEnd(n.TRANSITION_DURATION):r(),this.hoverState=null,this)},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],r="BODY"==n.tagName,i=n.getBoundingClientRect();null==i.width&&(i=t.extend({},i,{width:i.right-i.left,height:i.bottom-i.top}));var o=r?{top:0,left:0}:e.offset(),s={scroll:r?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},a=r?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},i,s,a,o)},n.prototype.getCalculatedOffset=function(t,e,n,r){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-r,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-r/2,left:e.left-n}:{top:e.top+e.height/2-r/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,r){var i={top:0,left:0};if(!this.$viewport)return i;var o=this.options.viewport&&this.options.viewport.padding||0,s=this.getPosition(this.$viewport);if(/right|left/.test(t)){var a=e.top-o-s.scroll,l=e.top+o-s.scroll+r;a<s.top?i.top=s.top-a:l>s.top+s.height&&(i.top=s.top+s.height-l)}else{var u=e.left-o,c=e.left+o+n;u<s.left?i.left=s.left-u:c>s.right&&(i.left=s.left+s.width-c)}return i},n.prototype.getTitle=function(){var t,e=this.$element,n=this.options;return t=e.attr("data-original-title")||("function"==typeof n.title?n.title.call(e[0]):n.title)},n.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},n.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&(n=t(e.currentTarget).data("bs."+this.type),n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),e?(n.inState.click=!n.inState.click,n.isInStateTrue()?n.enter(n):n.leave(n)):n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null})};var r=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=r,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.popover"),o="object"==typeof e&&e;(i||!/destroy|hide/.test(e))&&(i||r.data("bs.popover",i=new n(this,o)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.3.6",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var r=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=r,this}}(jQuery),+function(t){"use strict";function e(n,r){this.$body=t(document.body),this.$scrollElement=t(t(n).is(document.body)?window:n),this.options=t.extend({},e.DEFAULTS,r),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function n(n){return this.each(function(){var r=t(this),i=r.data("bs.scrollspy"),o="object"==typeof n&&n;i||r.data("bs.scrollspy",i=new e(this,o)),"string"==typeof n&&i[n]()})}e.VERSION="3.3.6",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,n="offset",r=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(n="position",r=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),i=e.data("target")||e.attr("href"),o=/^#./.test(i)&&t(i);return o&&o.length&&o.is(":visible")&&[[o[n]().top+r,i]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),r=this.options.offset+n-this.$scrollElement.height(),i=this.offsets,o=this.targets,s=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=r)return s!=(t=o[o.length-1])&&this.activate(t);if(s&&e<i[0])return this.activeTarget=null,this.clear();for(t=i.length;t--;)s!=o[t]&&e>=i[t]&&(void 0===i[t+1]||e<i[t+1])&&this.activate(o[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',r=t(n).parents("li").addClass("active");r.parent(".dropdown-menu").length&&(r=r.closest("li.dropdown").addClass("active")),r.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var r=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=r,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.tab");i||r.data("bs.tab",i=new n(this)),"string"==typeof e&&i[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.3.6",n.TRANSITION_DURATION=150,n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),r=e.data("target");if(r||(r=e.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var i=n.find(".active:last a"),o=t.Event("hide.bs.tab",{relatedTarget:e[0]}),s=t.Event("show.bs.tab",{relatedTarget:i[0]});if(i.trigger(o),e.trigger(s),!s.isDefaultPrevented()&&!o.isDefaultPrevented()){var a=t(r);this.activate(e.closest("li"),n),this.activate(a,a.parent(),function(){i.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:i[0]})})}}},n.prototype.activate=function(e,r,i){function o(){s.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),a?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),i&&i()}var s=r.find("> .active"),a=i&&t.support.transition&&(s.length&&s.hasClass("fade")||!!r.find("> .fade").length);s.length&&a?s.one("bsTransitionEnd",o).emulateTransitionEnd(n.TRANSITION_DURATION):o(),s.removeClass("in")};var r=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=r,this};var i=function(n){n.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',i).on("click.bs.tab.data-api",'[data-toggle="pill"]',i)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var r=t(this),i=r.data("bs.affix"),o="object"==typeof e&&e;i||r.data("bs.affix",i=new n(this,o)),"string"==typeof e&&i[e]()})}var n=function(e,r){this.options=t.extend({},n.DEFAULTS,r),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.3.6",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getState=function(t,e,n,r){var i=this.$target.scrollTop(),o=this.$element.offset(),s=this.$target.height();if(null!=n&&"top"==this.affixed)return n>i?"top":!1;if("bottom"==this.affixed)return null!=n?i+this.unpin<=o.top?!1:"bottom":t-r>=i+s?!1:"bottom";var a=null==this.affixed,l=a?i:o.top,u=a?s:e;return null!=n&&n>=i?"top":null!=r&&l+u>=t-r?"bottom":!1},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),r=this.options.offset,i=r.top,o=r.bottom,s=Math.max(t(document).height(),t(document.body).height());"object"!=typeof r&&(o=i=r),"function"==typeof i&&(i=r.top(this.$element)),"function"==typeof o&&(o=r.bottom(this.$element));var a=this.getState(s,e,i,o);if(this.affixed!=a){null!=this.unpin&&this.$element.css("top","");var l="affix"+(a?"-"+a:""),u=t.Event(l+".bs.affix");if(this.$element.trigger(u),u.isDefaultPrevented())return;this.affixed=a,this.unpin="bottom"==a?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==a&&this.$element.offset({top:s-e-o})}};var r=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=r,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),r=n.data();r.offset=r.offset||{},null!=r.offsetBottom&&(r.offset.bottom=r.offsetBottom),null!=r.offsetTop&&(r.offset.top=r.offsetTop),e.call(n,r)})})}(jQuery),function(t){"use strict";function e(t,e,n){return t.addEventListener?t.addEventListener(e,n,!1):t.attachEvent?t.attachEvent("on"+e,n):void 0}function n(t,e){var n,r;for(n=0,r=t.length;r>n;n++)if(t[n]===e)return!0;return!1}function r(t,e){var n;t.createTextRange?(n=t.createTextRange(),n.move("character",e),n.select()):t.selectionStart&&(t.focus(),t.setSelectionRange(e,e))}function i(t,e){try{return t.type=e,!0}catch(n){return!1}}t.Placeholders={Utils:{addEventListener:e,inArray:n,moveCaret:r,changeType:i}}}(this),function(t){"use strict";function e(){}function n(){try{return document.activeElement}catch(t){}}function r(t,e){var n,r,i=!!e&&t.value!==e,o=t.value===t.getAttribute(N);return(i||o)&&"true"===t.getAttribute(D)?(t.removeAttribute(D),t.value=t.value.replace(t.getAttribute(N),""),t.className=t.className.replace(P,""),r=t.getAttribute(L),parseInt(r,10)>=0&&(t.setAttribute("maxLength",r),t.removeAttribute(L)),n=t.getAttribute(M),n&&(t.type=n),!0):!1}function i(t){var e,n,r=t.getAttribute(N);return""===t.value&&r?(t.setAttribute(D,"true"),t.value=r,t.className+=" "+j,n=t.getAttribute(L),n||(t.setAttribute(L,t.maxLength),t.removeAttribute("maxLength")),e=t.getAttribute(M),e?t.type="text":"password"===t.type&&U.changeType(t,"text")&&t.setAttribute(M,"password"),!0):!1}function o(t,e){var n,r,i,o,s,a,l;if(t&&t.getAttribute(N))e(t);else for(i=t?t.getElementsByTagName("input"):m,o=t?t.getElementsByTagName("textarea"):v,n=i?i.length:0,r=o?o.length:0,l=0,a=n+r;a>l;l++)s=n>l?i[l]:o[l-n],e(s)}function s(t){o(t,r)}function a(t){o(t,i)}function l(t){return function(){g&&t.value===t.getAttribute(N)&&"true"===t.getAttribute(D)?U.moveCaret(t,0):r(t)}}function u(t){return function(){i(t)}}function c(t){return function(e){return $=t.value,"true"===t.getAttribute(D)&&$===t.getAttribute(N)&&U.inArray(A,e.keyCode)?(e.preventDefault&&e.preventDefault(),!1):void 0}}function f(t){return function(){r(t,$),""===t.value&&(t.blur(),U.moveCaret(t,0))}}function p(t){return function(){t===n()&&t.value===t.getAttribute(N)&&"true"===t.getAttribute(D)&&U.moveCaret(t,0)}}function h(t){return function(){s(t)}}function d(t){t.form&&(T=t.form,"string"==typeof T&&(T=document.getElementById(T)),T.getAttribute(I)||(U.addEventListener(T,"submit",h(T)),T.setAttribute(I,"true"))),U.addEventListener(t,"focus",l(t)),U.addEventListener(t,"blur",u(t)),g&&(U.addEventListener(t,"keydown",c(t)),U.addEventListener(t,"keyup",f(t)),U.addEventListener(t,"click",p(t))),t.setAttribute(R,"true"),t.setAttribute(N,x),(g||t!==n())&&i(t)}var m,v,g,y,$,b,w,x,_,T,C,S,k,E=["text","search","url","tel","email","password","number","textarea"],A=[27,33,34,35,36,37,38,39,40,8,46],O="#ccc",j="placeholdersjs",P=RegExp("(?:^|\\s)"+j+"(?!\\S)"),N="data-placeholder-value",D="data-placeholder-active",M="data-placeholder-type",I="data-placeholder-submit",R="data-placeholder-bound",q="data-placeholder-focus",F="data-placeholder-live",L="data-placeholder-maxlength",V=document.createElement("input"),H=document.getElementsByTagName("head")[0],B=document.documentElement,z=t.Placeholders,U=z.Utils;if(z.nativeSupport=void 0!==V.placeholder,!z.nativeSupport){for(m=document.getElementsByTagName("input"),v=document.getElementsByTagName("textarea"),g="false"===B.getAttribute(q),y="false"!==B.getAttribute(F),b=document.createElement("style"),b.type="text/css",w=document.createTextNode("."+j+" { color:"+O+"; }"),b.styleSheet?b.styleSheet.cssText=w.nodeValue:b.appendChild(w),H.insertBefore(b,H.firstChild),k=0,S=m.length+v.length;S>k;k++)C=m.length>k?m[k]:v[k-m.length],x=C.attributes.placeholder,x&&(x=x.nodeValue,x&&U.inArray(E,C.type)&&d(C));_=setInterval(function(){for(k=0,S=m.length+v.length;S>k;k++)C=m.length>k?m[k]:v[k-m.length],x=C.attributes.placeholder,x?(x=x.nodeValue,x&&U.inArray(E,C.type)&&(C.getAttribute(R)||d(C),(x!==C.getAttribute(N)||"password"===C.type&&!C.getAttribute(M))&&("password"===C.type&&!C.getAttribute(M)&&U.changeType(C,"text")&&C.setAttribute(M,"password"),C.value===C.getAttribute(N)&&(C.value=x),C.setAttribute(N,x)))):C.getAttribute(D)&&(r(C),C.removeAttribute(N));y||clearInterval(_)},100)}U.addEventListener(t,"beforeunload",function(){z.disable()}),z.disable=z.nativeSupport?e:s,z.enable=z.nativeSupport?e:a}(this),function(t){function e(){var t=document.createElement("input"),e="onpaste";return t.setAttribute(e,""),"function"==typeof t[e]?"paste":"input"}var n,r=e()+".mask",i=navigator.userAgent,o=/iphone/i.test(i),s=/android/i.test(i);t.mask={definitions:{9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},dataName:"rawMaskFn",placeholder:"_"},t.fn.extend({caret:function(t,e){var n;return 0===this.length||this.is(":hidden")?void 0:"number"==typeof t?(e="number"==typeof e?e:t,
this.each(function(){this.setSelectionRange?this.setSelectionRange(t,e):this.createTextRange&&(n=this.createTextRange(),n.collapse(!0),n.moveEnd("character",e),n.moveStart("character",t),n.select())})):(this[0].setSelectionRange?(t=this[0].selectionStart,e=this[0].selectionEnd):document.selection&&document.selection.createRange&&(n=document.selection.createRange(),t=0-n.duplicate().moveStart("character",-1e5),e=t+n.text.length),{begin:t,end:e})},unmask:function(){return this.trigger("unmask")},mask:function(e,i){var a,l,u,c,f,p;return!e&&this.length>0?(a=t(this[0]),a.data(t.mask.dataName)()):(i=t.extend({placeholder:t.mask.placeholder,completed:null},i),l=t.mask.definitions,u=[],c=p=e.length,f=null,t.each(e.split(""),function(t,e){"?"==e?(p--,c=t):l[e]?(u.push(RegExp(l[e])),null===f&&(f=u.length-1)):u.push(null)}),this.trigger("unmask").each(function(){function a(t){for(;p>++t&&!u[t];);return t}function h(t){for(;--t>=0&&!u[t];);return t}function d(t,e){var n,r;if(!(0>t)){for(n=t,r=a(e);p>n;n++)if(u[n]){if(!(p>r&&u[n].test(x[r])))break;x[n]=x[r],x[r]=i.placeholder,r=a(r)}$(),w.caret(Math.max(f,t))}}function m(t){var e,n,r,o;for(e=t,n=i.placeholder;p>e;e++)if(u[e]){if(r=a(e),o=x[e],x[e]=n,!(p>r&&u[r].test(o)))break;n=o}}function v(t){var e,n,r,i=t.which;8===i||46===i||o&&127===i?(e=w.caret(),n=e.begin,r=e.end,0===r-n&&(n=46!==i?h(n):r=a(n-1),r=46===i?a(r):r),y(n,r),d(n,r-1),t.preventDefault()):27==i&&(w.val(_),w.caret(0,b()),t.preventDefault())}function g(e){var n,r,o,l=e.which,c=w.caret();e.ctrlKey||e.altKey||e.metaKey||32>l||l&&(0!==c.end-c.begin&&(y(c.begin,c.end),d(c.begin,c.end-1)),n=a(c.begin-1),p>n&&(r=String.fromCharCode(l),u[n].test(r)&&(m(n),x[n]=r,$(),o=a(n),s?setTimeout(t.proxy(t.fn.caret,w,o),0):w.caret(o),i.completed&&o>=p&&i.completed.call(w))),e.preventDefault())}function y(t,e){var n;for(n=t;e>n&&p>n;n++)u[n]&&(x[n]=i.placeholder)}function $(){w.val(x.join(""))}function b(t){var e,n,r=w.val(),o=-1;for(e=0,pos=0;p>e;e++)if(u[e]){for(x[e]=i.placeholder;pos++<r.length;)if(n=r.charAt(pos-1),u[e].test(n)){x[e]=n,o=e;break}if(pos>r.length)break}else x[e]===r.charAt(pos)&&e!==c&&(pos++,o=e);return t?$():c>o+1?(w.val(""),y(0,p)):($(),w.val(w.val().substring(0,o+1))),c?e:f}var w=t(this),x=t.map(e.split(""),function(t){return"?"!=t?l[t]?i.placeholder:t:void 0}),_=w.val();w.data(t.mask.dataName,function(){return t.map(x,function(t,e){return u[e]&&t!=i.placeholder?t:null}).join("")}),w.attr("readonly")||w.one("unmask",function(){w.unbind(".mask").removeData(t.mask.dataName)}).bind("focus.mask",function(){clearTimeout(n);var t;_=w.val(),t=b(),n=setTimeout(function(){$(),t==e.length?w.caret(0,t):w.caret(t)},10)}).bind("blur.mask",function(){b(),w.val()!=_&&w.change()}).bind("keydown.mask",v).bind("keypress.mask",g).bind(r,function(){setTimeout(function(){var t=b(!0);w.caret(t),i.completed&&t==w.val().length&&i.completed.call(w)},0)}),b()}))}})}(jQuery),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){function e(e,n){this.element=e,this.options=t.extend({},i,n),this.init()}function n(e){if(!t(e.target).parents().hasClass("jq-selectbox")&&"OPTION"!=e.target.nodeName&&t("div.jq-selectbox.opened").length){e=t("div.jq-selectbox.opened");var n=t("div.jq-selectbox__search input",e),i=t("div.jq-selectbox__dropdown",e);e.find("select").data("_"+r).options.onSelectClosed.call(e),n.length&&n.val("").keyup(),i.hide().find("li.sel").addClass("selected"),e.removeClass("focused opened dropup dropdown")}}var r="styler",i={wrapper:"form",idSuffix:"-styler",filePlaceholder:"Файл не выбран",fileBrowse:"Обзор...",fileNumber:"Выбрано файлов: %s",selectPlaceholder:"Выберите...",selectSearch:!1,selectSearchLimit:10,selectSearchNotFound:"Совпадений не найдено",selectSearchPlaceholder:"Поиск...",selectVisibleOptions:0,singleSelectzIndex:"100",selectSmartPositioning:!0,onSelectOpened:function(){},onSelectClosed:function(){},onFormStyled:function(){}};e.prototype={init:function(){function e(){var t="",e="",n="",o="";void 0!==r.attr("id")&&""!==r.attr("id")&&(t=' id="'+r.attr("id")+i.idSuffix+'"'),void 0!==r.attr("title")&&""!==r.attr("title")&&(e=' title="'+r.attr("title")+'"'),void 0!==r.attr("class")&&""!==r.attr("class")&&(n=" "+r.attr("class"));var s,a=r.data();for(s in a)""!==a[s]&&"_styler"!==s&&(o+=" data-"+s+'="'+a[s]+'"');this.id=t+o,this.title=e,this.classes=n}var r=t(this.element),i=this.options,o=navigator.userAgent.match(/(iPad|iPhone|iPod)/i)&&!navigator.userAgent.match(/(Windows\sPhone)/i)?!0:!1,s=navigator.userAgent.match(/Android/i)&&!navigator.userAgent.match(/(Windows\sPhone)/i)?!0:!1;if(r.is(":checkbox")){var a=function(){var n=new e,i=t("<div"+n.id+' class="jq-checkbox'+n.classes+'"'+n.title+'><div class="jq-checkbox__div"></div></div>');r.css({position:"absolute",zIndex:"-1",opacity:0,margin:0,padding:0}).after(i).prependTo(i),i.attr("unselectable","on").css({"-webkit-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","-o-user-select":"none","user-select":"none",display:"inline-block",position:"relative",overflow:"hidden"}),r.is(":checked")&&i.addClass("checked"),r.is(":disabled")&&i.addClass("disabled"),i.click(function(t){t.preventDefault(),i.is(".disabled")||(r.is(":checked")?(r.prop("checked",!1),i.removeClass("checked")):(r.prop("checked",!0),i.addClass("checked")),r.focus().change())}),r.closest("label").add('label[for="'+r.attr("id")+'"]').on("click.styler",function(e){t(e.target).is("a")||t(e.target).closest(i).length||(i.triggerHandler("click"),e.preventDefault())}),r.on("change.styler",function(){r.is(":checked")?i.addClass("checked"):i.removeClass("checked")}).on("keydown.styler",function(t){32==t.which&&i.click()}).on("focus.styler",function(){i.is(".disabled")||i.addClass("focused")}).on("blur.styler",function(){i.removeClass("focused")})};a(),r.on("refresh",function(){r.closest("label").add('label[for="'+r.attr("id")+'"]').off(".styler"),r.off(".styler").parent().before(r).remove(),a()})}else if(r.is(":radio")){var l=function(){var n=new e,o=t("<div"+n.id+' class="jq-radio'+n.classes+'"'+n.title+'><div class="jq-radio__div"></div></div>');r.css({position:"absolute",zIndex:"-1",opacity:0,margin:0,padding:0}).after(o).prependTo(o),o.attr("unselectable","on").css({"-webkit-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","-o-user-select":"none","user-select":"none",display:"inline-block",position:"relative"}),r.is(":checked")&&o.addClass("checked"),r.is(":disabled")&&o.addClass("disabled"),o.click(function(t){t.preventDefault(),o.is(".disabled")||(o.closest(i.wrapper).find('input[name="'+r.attr("name")+'"]').prop("checked",!1).parent().removeClass("checked"),r.prop("checked",!0).parent().addClass("checked"),r.focus().change())}),r.closest("label").add('label[for="'+r.attr("id")+'"]').on("click.styler",function(e){t(e.target).is("a")||t(e.target).closest(o).length||(o.triggerHandler("click"),e.preventDefault())}),r.on("change.styler",function(){r.parent().addClass("checked")}).on("focus.styler",function(){o.is(".disabled")||o.addClass("focused")}).on("blur.styler",function(){o.removeClass("focused")})};l(),r.on("refresh",function(){r.closest("label").add('label[for="'+r.attr("id")+'"]').off(".styler"),r.off(".styler").parent().before(r).remove(),l()})}else if(r.is(":file")){r.css({position:"absolute",top:0,right:0,width:"100%",height:"100%",opacity:0,margin:0,padding:0});var u=function(){var n=new e,o=r.data("placeholder");void 0===o&&(o=i.filePlaceholder);var s=r.data("browse");(void 0===s||""===s)&&(s=i.fileBrowse);var a=t("<div"+n.id+' class="jq-file'+n.classes+'"'+n.title+' style="display: inline-block; position: relative; overflow: hidden"></div>'),l=t('<div class="jq-file__name">'+o+"</div>").appendTo(a);t('<div class="jq-file__browse">'+s+"</div>").appendTo(a),r.after(a).appendTo(a),r.is(":disabled")&&a.addClass("disabled"),r.on("change.styler",function(){var t=r.val();if(r.is("[multiple]")){var t="",e=r[0].files.length;e>0&&(t=r.data("number"),void 0===t&&(t=i.fileNumber),t=t.replace("%s",e))}l.text(t.replace(/.+[\\\/]/,"")),""===t?(l.text(o),a.removeClass("changed")):a.addClass("changed")}).on("focus.styler",function(){a.addClass("focused")}).on("blur.styler",function(){a.removeClass("focused")}).on("click.styler",function(){a.removeClass("focused")})};u(),r.on("refresh",function(){r.off(".styler").parent().before(r).remove(),u()})}else if(r.is('input[type="number"]')){var c=function(){var e=t('<div class="jq-number"><div class="jq-number__spin minus"></div><div class="jq-number__spin plus"></div></div>');r.after(e).prependTo(e).wrap('<div class="jq-number__field"></div>'),r.is(":disabled")&&e.addClass("disabled");var n,i,o,s=null,a=null;void 0!==r.attr("min")&&(n=r.attr("min")),void 0!==r.attr("max")&&(i=r.attr("max")),o=void 0!==r.attr("step")&&t.isNumeric(r.attr("step"))?Number(r.attr("step")):Number(1);var l=function(e){var s,a=r.val();t.isNumeric(a)||(a=0,r.val("0")),e.is(".minus")?(s=parseInt(a,10)-o,o>0&&(s=Math.ceil(s/o)*o)):e.is(".plus")&&(s=parseInt(a,10)+o,o>0&&(s=Math.floor(s/o)*o)),t.isNumeric(n)&&t.isNumeric(i)?s>=n&&i>=s&&r.val(s):t.isNumeric(n)&&!t.isNumeric(i)?s>=n&&r.val(s):!t.isNumeric(n)&&t.isNumeric(i)?i>=s&&r.val(s):r.val(s)};e.is(".disabled")||(e.on("mousedown","div.jq-number__spin",function(){var e=t(this);l(e),s=setTimeout(function(){a=setInterval(function(){l(e)},40)},350)}).on("mouseup mouseout","div.jq-number__spin",function(){clearTimeout(s),clearInterval(a)}),r.on("focus.styler",function(){e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")}))};c(),r.on("refresh",function(){r.off(".styler").closest(".jq-number").before(r).remove(),c()})}else if(r.is("select")){var f=function(){function a(e){e.off("mousewheel DOMMouseScroll").on("mousewheel DOMMouseScroll",function(e){var n=null;"mousewheel"==e.type?n=-1*e.originalEvent.wheelDelta:"DOMMouseScroll"==e.type&&(n=40*e.originalEvent.detail),n&&(e.stopPropagation(),e.preventDefault(),t(this).scrollTop(n+t(this).scrollTop()))})}function l(){for(var t=0;t<f.length;t++){var e=f.eq(t),n="",r="",o=n="",s="",a="",l="",u="",c="";e.prop("selected")&&(r="selected sel"),e.is(":disabled")&&(r="disabled"),e.is(":selected:disabled")&&(r="selected sel disabled"),void 0!==e.attr("id")&&""!==e.attr("id")&&(o=' id="'+e.attr("id")+i.idSuffix+'"'),void 0!==e.attr("title")&&""!==f.attr("title")&&(s=' title="'+e.attr("title")+'"'),void 0!==e.attr("class")&&(l=" "+e.attr("class"),c=' data-jqfs-class="'+e.attr("class")+'"');var h,d=e.data();for(h in d)""!==d[h]&&(a+=" data-"+h+'="'+d[h]+'"');""!==r+l&&(n=' class="'+r+l+'"'),n="<li"+c+a+n+s+o+">"+e.html()+"</li>",e.parent().is("optgroup")&&(void 0!==e.parent().attr("class")&&(u=" "+e.parent().attr("class")),n="<li"+c+a+' class="'+r+l+" option"+u+'"'+s+o+">"+e.html()+"</li>",e.is(":first-child")&&(n='<li class="optgroup'+u+'">'+e.parent().attr("label")+"</li>"+n)),p+=n}}function u(){var s=new e,u="",c=r.data("placeholder"),h=r.data("search"),d=r.data("search-limit"),m=r.data("search-not-found"),v=r.data("search-placeholder"),g=r.data("z-index"),y=r.data("smart-positioning");void 0===c&&(c=i.selectPlaceholder),(void 0===h||""===h)&&(h=i.selectSearch),(void 0===d||""===d)&&(d=i.selectSearchLimit),(void 0===m||""===m)&&(m=i.selectSearchNotFound),void 0===v&&(v=i.selectSearchPlaceholder),(void 0===g||""===g)&&(g=i.singleSelectzIndex),(void 0===y||""===y)&&(y=i.selectSmartPositioning);var $=t("<div"+s.id+' class="jq-selectbox jqselect'+s.classes+'" style="display: inline-block; position: relative; z-index:'+g+'"><div class="jq-selectbox__select"'+s.title+' style="position: relative"><div class="jq-selectbox__select-text"></div><div class="jq-selectbox__trigger"><div class="jq-selectbox__trigger-arrow"></div></div></div></div>');r.css({margin:0,padding:0}).after($).prependTo($);var b=t("div.jq-selectbox__select",$),w=t("div.jq-selectbox__select-text",$),s=f.filter(":selected");l(),h&&(u='<div class="jq-selectbox__search"><input type="search" autocomplete="off" placeholder="'+v+'"></div><div class="jq-selectbox__not-found">'+m+"</div>");var x=t('<div class="jq-selectbox__dropdown" style="position: absolute">'+u+'<ul style="position: relative; list-style: none; overflow: auto; overflow-x: hidden">'+p+"</ul></div>");$.append(x);var _=t("ul",x),T=t("li",x),C=t("input",x),S=t("div.jq-selectbox__not-found",x).hide();T.length<d&&C.parent().hide(),""===r.val()?w.text(c).addClass("placeholder"):w.text(s.text());var k=0,E=0;T.each(function(){var e=t(this);e.css({display:"inline-block"}),e.innerWidth()>k&&(k=e.innerWidth(),E=e.width()),e.css({display:""})}),w.is(".placeholder")&&w.width()>k?w.width(w.width()):(u=$.clone().appendTo("body").width("auto"),h=u.outerWidth(),u.remove(),h==$.outerWidth()&&w.width(E)),k>$.width()&&x.width(k),""===f.first().text()&&""!==r.data("placeholder")&&T.first().hide(),r.css({position:"absolute",left:0,top:0,width:"100%",height:"100%",opacity:0});var A=$.outerHeight(),O=C.outerHeight(),j=_.css("max-height"),u=T.filter(".selected");1>u.length&&T.first().addClass("selected sel"),void 0===T.data("li-height")&&T.data("li-height",T.outerHeight());var P=x.css("top");return"auto"==x.css("left")&&x.css({left:0}),"auto"==x.css("top")&&x.css({top:A}),x.hide(),u.length&&(f.first().text()!=s.text()&&$.addClass("changed"),$.data("jqfs-class",u.data("jqfs-class")),$.addClass(u.data("jqfs-class"))),r.is(":disabled")?($.addClass("disabled"),!1):(b.click(function(){if(t("div.jq-selectbox").filter(".opened").length&&i.onSelectClosed.call(t("div.jq-selectbox").filter(".opened")),r.focus(),!o){var e=t(window),n=T.data("li-height"),s=$.offset().top,l=e.height()-A-(s-e.scrollTop()),u=r.data("visible-options");(void 0===u||""===u)&&(u=i.selectVisibleOptions);var c=5*n,p=n*u;u>0&&6>u&&(c=p),0===u&&(p="auto");var u=function(){x.height("auto").css({bottom:"auto",top:P});var t=function(){_.css("max-height",Math.floor((l-20-O)/n)*n)};t(),_.css("max-height",p),"none"!=j&&_.css("max-height",j),l<x.outerHeight()+20&&t()},h=function(){x.height("auto").css({top:"auto",bottom:P});var t=function(){_.css("max-height",Math.floor((s-e.scrollTop()-20-O)/n)*n)};t(),_.css("max-height",p),"none"!=j&&_.css("max-height",j),s-e.scrollTop()-20<x.outerHeight()+20&&t()};!0===y||1===y?l>c+O+20?(u(),$.removeClass("dropup").addClass("dropdown")):(h(),$.removeClass("dropdown").addClass("dropup")):(!1===y||0===y)&&l>c+O+20&&(u(),$.removeClass("dropup").addClass("dropdown")),$.offset().left+x.outerWidth()>e.width()&&x.css({left:"auto",right:0}),t("div.jqselect").css({zIndex:g-1}).removeClass("opened"),$.css({zIndex:g}),x.is(":hidden")?(t("div.jq-selectbox__dropdown:visible").hide(),x.show(),$.addClass("opened focused"),i.onSelectOpened.call($)):(x.hide(),$.removeClass("opened dropup dropdown"),t("div.jq-selectbox").filter(".opened").length&&i.onSelectClosed.call($)),C.length&&(C.val("").keyup(),S.hide(),C.keyup(function(){var e=t(this).val();T.each(function(){t(this).html().match(RegExp(".*?"+e+".*?","i"))?t(this).show():t(this).hide()}),""===f.first().text()&&""!==r.data("placeholder")&&T.first().hide(),1>T.filter(":visible").length?S.show():S.hide()})),T.filter(".selected").length&&(""===r.val()?_.scrollTop(0):(0!==_.innerHeight()/n%2&&(n/=2),_.scrollTop(_.scrollTop()+T.filter(".selected").position().top-_.innerHeight()/2+n))),a(_)}}),T.hover(function(){t(this).siblings().removeClass("selected")}),T.filter(".selected").text(),T.filter(":not(.disabled):not(.optgroup)").click(function(){r.focus();var e=t(this),n=e.text();if(!e.is(".selected")){var o=e.index(),o=o-e.prevAll(".optgroup").length;e.addClass("selected sel").siblings().removeClass("selected sel"),f.prop("selected",!1).eq(o).prop("selected",!0),w.text(n),$.data("jqfs-class")&&$.removeClass($.data("jqfs-class")),$.data("jqfs-class",e.data("jqfs-class")),$.addClass(e.data("jqfs-class")),r.change()}x.hide(),$.removeClass("opened dropup dropdown"),i.onSelectClosed.call($)}),x.mouseout(function(){t("li.sel",x).addClass("selected")}),r.on("change.styler",function(){w.text(f.filter(":selected").text()).removeClass("placeholder"),T.removeClass("selected sel").not(".optgroup").eq(r[0].selectedIndex).addClass("selected sel"),f.first().text()!=T.filter(".selected").text()?$.addClass("changed"):$.removeClass("changed")}).on("focus.styler",function(){$.addClass("focused"),t("div.jqselect").not(".focused").removeClass("opened dropup dropdown").find("div.jq-selectbox__dropdown").hide()}).on("blur.styler",function(){$.removeClass("focused")}).on("keydown.styler keyup.styler",function(t){var e=T.data("li-height");""===r.val()?w.text(c).addClass("placeholder"):w.text(f.filter(":selected").text()),T.removeClass("selected sel").not(".optgroup").eq(r[0].selectedIndex).addClass("selected sel"),(38==t.which||37==t.which||33==t.which||36==t.which)&&(""===r.val()?_.scrollTop(0):_.scrollTop(_.scrollTop()+T.filter(".selected").position().top)),40!=t.which&&39!=t.which&&34!=t.which&&35!=t.which||_.scrollTop(_.scrollTop()+T.filter(".selected").position().top-_.innerHeight()+e),13==t.which&&(t.preventDefault(),x.hide(),$.removeClass("opened dropup dropdown"),i.onSelectClosed.call($))}).on("keydown.styler",function(t){32==t.which&&(t.preventDefault(),b.click())}),void(n.registered||(t(document).on("click",n),n.registered=!0)))}function c(){var n=new e,i=t("<div"+n.id+' class="jq-select-multiple jqselect'+n.classes+'"'+n.title+' style="display: inline-block; position: relative"></div>');r.css({margin:0,padding:0}).after(i),l(),i.append("<ul>"+p+"</ul>");var o=t("ul",i).css({position:"relative","overflow-x":"hidden","-webkit-overflow-scrolling":"touch"}),s=t("li",i).attr("unselectable","on"),n=r.attr("size"),u=o.outerHeight(),c=s.outerHeight();void 0!==n&&n>0?o.css({height:c*n}):o.css({height:4*c}),u>i.height()&&(o.css("overflowY","scroll"),a(o),s.filter(".selected").length&&o.scrollTop(o.scrollTop()+s.filter(".selected").position().top)),r.prependTo(i).css({position:"absolute",left:0,top:0,width:"100%",height:"100%",opacity:0}),r.is(":disabled")?(i.addClass("disabled"),f.each(function(){t(this).is(":selected")&&s.eq(t(this).index()).addClass("selected")})):(s.filter(":not(.disabled):not(.optgroup)").click(function(e){r.focus();var n=t(this);if(e.ctrlKey||e.metaKey||n.addClass("selected"),e.shiftKey||n.addClass("first"),e.ctrlKey||e.metaKey||e.shiftKey||n.siblings().removeClass("selected first"),(e.ctrlKey||e.metaKey)&&(n.is(".selected")?n.removeClass("selected first"):n.addClass("selected first"),n.siblings().removeClass("first")),e.shiftKey){var i=!1,o=!1;n.siblings().removeClass("selected").siblings(".first").addClass("selected"),n.prevAll().each(function(){t(this).is(".first")&&(i=!0)}),n.nextAll().each(function(){t(this).is(".first")&&(o=!0)}),i&&n.prevAll().each(function(){return t(this).is(".selected")?!1:void t(this).not(".disabled, .optgroup").addClass("selected")}),o&&n.nextAll().each(function(){return t(this).is(".selected")?!1:void t(this).not(".disabled, .optgroup").addClass("selected")}),1==s.filter(".selected").length&&n.addClass("first")}f.prop("selected",!1),s.filter(".selected").each(function(){var e=t(this),n=e.index();e.is(".option")&&(n-=e.prevAll(".optgroup").length),f.eq(n).prop("selected",!0)}),r.change()}),f.each(function(e){t(this).data("optionIndex",e)}),r.on("change.styler",function(){s.removeClass("selected");var e=[];f.filter(":selected").each(function(){e.push(t(this).data("optionIndex"))}),s.not(".optgroup").filter(function(n){return-1<t.inArray(n,e)}).addClass("selected")}).on("focus.styler",function(){i.addClass("focused")}).on("blur.styler",function(){i.removeClass("focused")}),u>i.height()&&r.on("keydown.styler",function(t){38!=t.which&&37!=t.which&&33!=t.which||o.scrollTop(o.scrollTop()+s.filter(".selected").position().top-c),40!=t.which&&39!=t.which&&34!=t.which||o.scrollTop(o.scrollTop()+s.filter(".selected:last").position().top-o.innerHeight()+2*c)}))}var f=t("option",r),p="";r.is("[multiple]")?s||o||c():u()};f(),r.on("refresh",function(){r.off(".styler").parent().before(r).remove(),f()})}else r.is(":reset")&&r.on("click",function(){setTimeout(function(){r.closest(i.wrapper).find("input, select").trigger("refresh")},1)})},destroy:function(){var e=t(this.element);e.is(":checkbox")||e.is(":radio")?(e.removeData("_"+r).off(".styler refresh").removeAttr("style").parent().before(e).remove(),e.closest("label").add('label[for="'+e.attr("id")+'"]').off(".styler")):e.is('input[type="number"]')?e.removeData("_"+r).off(".styler refresh").closest(".jq-number").before(e).remove():(e.is(":file")||e.is("select"))&&e.removeData("_"+r).off(".styler refresh").removeAttr("style").parent().before(e).remove()}},t.fn[r]=function(n){var i=arguments;if(void 0===n||"object"==typeof n)return this.each(function(){t.data(this,"_"+r)||t.data(this,"_"+r,new e(this,n))}).promise().done(function(){var e=t(this[0]).data("_"+r);e&&e.options.onFormStyled.call()}),this;if("string"==typeof n&&"_"!==n[0]&&"init"!==n){var o;return this.each(function(){var s=t.data(this,"_"+r);s instanceof e&&"function"==typeof s[n]&&(o=s[n].apply(s,Array.prototype.slice.call(i,1)))}),void 0!==o?o:this}},n.registered=!1}),function(t,e,n){"use strict";function r(t,e){return e=e||Error,function(){var n,r,i=2,o=arguments,s=o[0],a="["+(t?t+":":"")+s+"] ",l=o[1];for(a+=l.replace(/\{\d+\}/g,function(t){var e=+t.slice(1,-1),n=e+i;return n<o.length?$t(o[n]):t}),a+="\nhttp://errors.angularjs.org/1.4.8/"+(t?t+"/":"")+s,r=i,n="?";r<o.length;r++,n="&")a+=n+"p"+(r-i)+"="+encodeURIComponent($t(o[r]));return new e(a)}}function i(t){if(null==t||E(t))return!1;if(Vr(t)||_(t)||Ar&&t instanceof Ar)return!0;var e="length"in Object(t)&&t.length;return T(e)&&(e>=0&&e-1 in t||"function"==typeof t.item)}function o(t,e,n){var r,s;if(t)if(S(t))for(r in t)"prototype"==r||"length"==r||"name"==r||t.hasOwnProperty&&!t.hasOwnProperty(r)||e.call(n,t[r],r,t);else if(Vr(t)||i(t)){var a="object"!=typeof t;for(r=0,s=t.length;s>r;r++)(a||r in t)&&e.call(n,t[r],r,t)}else if(t.forEach&&t.forEach!==o)t.forEach(e,n,t);else if(x(t))for(r in t)e.call(n,t[r],r,t);else if("function"==typeof t.hasOwnProperty)for(r in t)t.hasOwnProperty(r)&&e.call(n,t[r],r,t);else for(r in t)Tr.call(t,r)&&e.call(n,t[r],r,t);return t}function s(t,e,n){for(var r=Object.keys(t).sort(),i=0;i<r.length;i++)e.call(n,t[r[i]],r[i]);return r}function a(t){return function(e,n){t(n,e)}}function l(){return++Fr}function u(t,e){e?t.$$hashKey=e:delete t.$$hashKey}function c(t,e,n){for(var r=t.$$hashKey,i=0,o=e.length;o>i;++i){var s=e[i];if(w(s)||S(s))for(var a=Object.keys(s),l=0,f=a.length;f>l;l++){var p=a[l],h=s[p];n&&w(h)?C(h)?t[p]=new Date(h.valueOf()):k(h)?t[p]=new RegExp(h):h.nodeName?t[p]=h.cloneNode(!0):I(h)?t[p]=h.clone():(w(t[p])||(t[p]=Vr(h)?[]:{}),c(t[p],[h],!0)):t[p]=h}}return u(t,r),t}function f(t){return c(t,Pr.call(arguments,1),!1)}function p(t){return c(t,Pr.call(arguments,1),!0)}function h(t){return parseInt(t,10)}function d(t,e){return f(Object.create(t),e)}function m(){}function v(t){return t}function g(t){return function(){return t}}function y(t){return S(t.toString)&&t.toString!==Mr}function $(t){return"undefined"==typeof t}function b(t){return"undefined"!=typeof t}function w(t){return null!==t&&"object"==typeof t}function x(t){return null!==t&&"object"==typeof t&&!Ir(t)}function _(t){return"string"==typeof t}function T(t){return"number"==typeof t}function C(t){return"[object Date]"===Mr.call(t)}function S(t){return"function"==typeof t}function k(t){return"[object RegExp]"===Mr.call(t)}function E(t){return t&&t.window===t}function A(t){return t&&t.$evalAsync&&t.$watch}function O(t){return"[object File]"===Mr.call(t)}function j(t){return"[object FormData]"===Mr.call(t)}function P(t){return"[object Blob]"===Mr.call(t)}function N(t){return"boolean"==typeof t}function D(t){return t&&S(t.then)}function M(t){return t&&T(t.length)&&Hr.test(Mr.call(t))}function I(t){return!(!t||!(t.nodeName||t.prop&&t.attr&&t.find))}function R(t){var e,n={},r=t.split(",");for(e=0;e<r.length;e++)n[r[e]]=!0;return n}function q(t){return _r(t.nodeName||t[0]&&t[0].nodeName)}function F(t,e){var n=t.indexOf(e);return n>=0&&t.splice(n,1),n}function L(t,e){function n(t,e){var n,i=e.$$hashKey;if(Vr(t))for(var o=0,s=t.length;s>o;o++)e.push(r(t[o]));else if(x(t))for(n in t)e[n]=r(t[n]);else if(t&&"function"==typeof t.hasOwnProperty)for(n in t)t.hasOwnProperty(n)&&(e[n]=r(t[n]));else for(n in t)Tr.call(t,n)&&(e[n]=r(t[n]));return u(e,i),e}function r(t){if(!w(t))return t;var e=i.indexOf(t);if(-1!==e)return s[e];if(E(t)||A(t))throw Rr("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r,o=!1;return Vr(t)?(r=[],o=!0):M(t)?r=new t.constructor(t):C(t)?r=new Date(t.getTime()):k(t)?(r=new RegExp(t.source,t.toString().match(/[^\/]*$/)[0]),r.lastIndex=t.lastIndex):S(t.cloneNode)?r=t.cloneNode(!0):(r=Object.create(Ir(t)),o=!0),i.push(t),s.push(r),o?n(t,r):r}var i=[],s=[];if(e){if(M(e))throw Rr("cpta","Can't copy! TypedArray destination cannot be mutated.");if(t===e)throw Rr("cpi","Can't copy! Source and destination are identical.");return Vr(e)?e.length=0:o(e,function(t,n){"$$hashKey"!==n&&delete e[n]}),i.push(t),s.push(e),n(t,e)}return r(t)}function V(t,e){if(Vr(t)){e=e||[];for(var n=0,r=t.length;r>n;n++)e[n]=t[n]}else if(w(t)){e=e||{};for(var i in t)("$"!==i.charAt(0)||"$"!==i.charAt(1))&&(e[i]=t[i])}return e||t}function H(t,e){if(t===e)return!0;if(null===t||null===e)return!1;if(t!==t&&e!==e)return!0;var n,r,i,o=typeof t,s=typeof e;if(o==s&&"object"==o){if(!Vr(t)){if(C(t))return C(e)?H(t.getTime(),e.getTime()):!1;if(k(t))return k(e)?t.toString()==e.toString():!1;if(A(t)||A(e)||E(t)||E(e)||Vr(e)||C(e)||k(e))return!1;i=vt();for(r in t)if("$"!==r.charAt(0)&&!S(t[r])){if(!H(t[r],e[r]))return!1;i[r]=!0}for(r in e)if(!(r in i)&&"$"!==r.charAt(0)&&b(e[r])&&!S(e[r]))return!1;return!0}if(!Vr(e))return!1;if((n=t.length)==e.length){for(r=0;n>r;r++)if(!H(t[r],e[r]))return!1;return!0}}return!1}function B(t,e,n){return t.concat(Pr.call(e,n))}function z(t,e){return Pr.call(t,e||0)}function U(t,e){var n=arguments.length>2?z(arguments,2):[];return!S(e)||e instanceof RegExp?e:n.length?function(){return arguments.length?e.apply(t,B(n,arguments,0)):e.apply(t,n)}:function(){return arguments.length?e.apply(t,arguments):e.call(t)}}function W(t,r){var i=r;return"string"==typeof t&&"$"===t.charAt(0)&&"$"===t.charAt(1)?i=n:E(r)?i="$WINDOW":r&&e===r?i="$DOCUMENT":A(r)&&(i="$SCOPE"),i}function X(t,e){return"undefined"==typeof t?n:(T(e)||(e=e?2:null),JSON.stringify(t,W,e))}function Y(t){return _(t)?JSON.parse(t):t}function G(t,e){var n=Date.parse("Jan 01, 1970 00:00:00 "+t)/6e4;return isNaN(n)?e:n}function Q(t,e){return t=new Date(t.getTime()),t.setMinutes(t.getMinutes()+e),t}function Z(t,e,n){n=n?-1:1;var r=G(e,t.getTimezoneOffset());return Q(t,n*(r-t.getTimezoneOffset()))}function K(t){t=Ar(t).clone();try{t.empty()}catch(e){}var n=Ar("<div>").append(t).html();try{return t[0].nodeType===Kr?_r(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(t,e){return"<"+_r(e)})}catch(e){return _r(n)}}function J(t){try{return decodeURIComponent(t)}catch(e){}}function tt(t){var e={};return o((t||"").split("&"),function(t){var n,r,i;t&&(r=t=t.replace(/\+/g,"%20"),n=t.indexOf("="),-1!==n&&(r=t.substring(0,n),i=t.substring(n+1)),r=J(r),b(r)&&(i=b(i)?J(i):!0,Tr.call(e,r)?Vr(e[r])?e[r].push(i):e[r]=[e[r],i]:e[r]=i))}),e}function et(t){var e=[];return o(t,function(t,n){Vr(t)?o(t,function(t){e.push(rt(n,!0)+(t===!0?"":"="+rt(t,!0)))}):e.push(rt(n,!0)+(t===!0?"":"="+rt(t,!0)))}),e.length?e.join("&"):""}function nt(t){return rt(t,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function rt(t,e){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,e?"%20":"+")}function it(t,e){var n,r,i=Xr.length;for(r=0;i>r;++r)if(n=Xr[r]+e,_(n=t.getAttribute(n)))return n;return null}function ot(t,e){var n,r,i={};o(Xr,function(e){var i=e+"app";!n&&t.hasAttribute&&t.hasAttribute(i)&&(n=t,r=t.getAttribute(i))}),o(Xr,function(e){var i,o=e+"app";!n&&(i=t.querySelector("["+o.replace(":","\\:")+"]"))&&(n=i,r=i.getAttribute(o))}),n&&(i.strictDi=null!==it(n,"strict-di"),e(n,r?[r]:[],i))}function st(n,r,i){w(i)||(i={});var s={strictDi:!1};i=f(s,i);var a=function(){if(n=Ar(n),n.injector()){var t=n[0]===e?"document":K(n);throw Rr("btstrpd","App Already Bootstrapped with this Element '{0}'",t.replace(/</,"&lt;").replace(/>/,"&gt;"))}r=r||[],r.unshift(["$provide",function(t){t.value("$rootElement",n)}]),i.debugInfoEnabled&&r.push(["$compileProvider",function(t){t.debugInfoEnabled(!0)}]),r.unshift("ng");var o=te(r,i.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(t,e,n,r){t.$apply(function(){e.data("$injector",r),n(e)(t)})}]),o},l=/^NG_ENABLE_DEBUG_INFO!/,u=/^NG_DEFER_BOOTSTRAP!/;return t&&l.test(t.name)&&(i.debugInfoEnabled=!0,t.name=t.name.replace(l,"")),t&&!u.test(t.name)?a():(t.name=t.name.replace(u,""),qr.resumeBootstrap=function(t){return o(t,function(t){r.push(t)}),a()},void(S(qr.resumeDeferredBootstrap)&&qr.resumeDeferredBootstrap()))}function at(){t.name="NG_ENABLE_DEBUG_INFO!"+t.name,t.location.reload()}function lt(t){var e=qr.element(t).injector();if(!e)throw Rr("test","no injector found for element argument to getTestability");return e.get("$$testability")}function ut(t,e){return e=e||"_",t.replace(Yr,function(t,n){return(n?e:"")+t.toLowerCase()})}function ct(){var e;if(!Gr){var r=Wr();Or=$(r)?t.jQuery:r?t[r]:n,Or&&Or.fn.on?(Ar=Or,f(Or.fn,{scope:gi.scope,isolateScope:gi.isolateScope,controller:gi.controller,injector:gi.injector,inheritedData:gi.inheritedData}),e=Or.cleanData,Or.cleanData=function(t){var n;if(Lr)Lr=!1;else for(var r,i=0;null!=(r=t[i]);i++)n=Or._data(r,"events"),n&&n.$destroy&&Or(r).triggerHandler("$destroy");e(t)}):Ar=Et,qr.element=Ar,Gr=!0}}function ft(t,e,n){if(!t)throw Rr("areq","Argument '{0}' is {1}",e||"?",n||"required");return t}function pt(t,e,n){return n&&Vr(t)&&(t=t[t.length-1]),ft(S(t),e,"not a function, got "+(t&&"object"==typeof t?t.constructor.name||"Object":typeof t)),t}function ht(t,e){if("hasOwnProperty"===t)throw Rr("badname","hasOwnProperty is not a valid {0} name",e)}function dt(t,e,n){if(!e)return t;for(var r,i=e.split("."),o=t,s=i.length,a=0;s>a;a++)r=i[a],t&&(t=(o=t)[r]);return!n&&S(t)?U(o,t):t}function mt(t){for(var e,n=t[0],r=t[t.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(e||t[i]!==n)&&(e||(e=Ar(Pr.call(t,0,i))),e.push(n));return e||t}function vt(){return Object.create(null)}function gt(t){function e(t,e,n){return t[e]||(t[e]=n())}var n=r("$injector"),i=r("ng"),o=e(t,"angular",Object);return o.$$minErr=o.$$minErr||r,e(o,"module",function(){var t={};return function(r,o,s){var a=function(t,e){if("hasOwnProperty"===t)throw i("badname","hasOwnProperty is not a valid {0} name",e)};return a(r,"module"),o&&t.hasOwnProperty(r)&&(t[r]=null),e(t,r,function(){function t(t,e,n,r){return r||(r=i),function(){return r[n||"push"]([t,e,arguments]),c}}function e(t,e){return function(n,o){return o&&S(o)&&(o.$$moduleName=r),i.push([t,e,arguments]),c}}if(!o)throw n("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var i=[],a=[],l=[],u=t("$injector","invoke","push",a),c={_invokeQueue:i,_configBlocks:a,_runBlocks:l,requires:o,name:r,provider:e("$provide","provider"),factory:e("$provide","factory"),service:e("$provide","service"),value:t("$provide","value"),constant:t("$provide","constant","unshift"),decorator:e("$provide","decorator"),animation:e("$animateProvider","register"),filter:e("$filterProvider","register"),controller:e("$controllerProvider","register"),directive:e("$compileProvider","directive"),config:u,run:function(t){return l.push(t),this}};return s&&u(s),c})}})}function yt(t){var e=[];return JSON.stringify(t,function(t,n){if(n=W(t,n),
w(n)){if(e.indexOf(n)>=0)return"...";e.push(n)}return n})}function $t(t){return"function"==typeof t?t.toString().replace(/ \{[\s\S]*$/,""):$(t)?"undefined":"string"!=typeof t?yt(t):t}function bt(e){f(e,{bootstrap:st,copy:L,extend:f,merge:p,equals:H,element:Ar,forEach:o,injector:te,noop:m,bind:U,toJson:X,fromJson:Y,identity:v,isUndefined:$,isDefined:b,isString:_,isFunction:S,isObject:w,isNumber:T,isElement:I,isArray:Vr,version:ni,isDate:C,lowercase:_r,uppercase:Cr,callbacks:{counter:0},getTestability:lt,$$minErr:r,$$csp:Ur,reloadWithDebugInfo:at}),(jr=gt(t))("ng",["ngLocale"],["$provide",function(t){t.provider({$$sanitizeUri:$n}),t.provider("$compile",ce).directive({a:yo,input:Mo,textarea:Mo,form:_o,script:ks,select:Os,style:Ps,option:js,ngBind:qo,ngBindHtml:Lo,ngBindTemplate:Fo,ngClass:Ho,ngClassEven:zo,ngClassOdd:Bo,ngCloak:Uo,ngController:Wo,ngForm:To,ngHide:ws,ngIf:Go,ngInclude:Qo,ngInit:Ko,ngNonBindable:ps,ngPluralize:vs,ngRepeat:gs,ngShow:bs,ngStyle:xs,ngSwitch:_s,ngSwitchWhen:Ts,ngSwitchDefault:Cs,ngOptions:ms,ngTransclude:Ss,ngModel:us,ngList:Jo,ngChange:Vo,pattern:Ds,ngPattern:Ds,required:Ns,ngRequired:Ns,minlength:Is,ngMinlength:Is,maxlength:Ms,ngMaxlength:Ms,ngValue:Ro,ngModelOptions:fs}).directive({ngInclude:Zo}).directive($o).directive(Xo),t.provider({$anchorScroll:ee,$animate:Pi,$animateCss:Ni,$$animateQueue:ji,$$AnimateRunner:Oi,$browser:ae,$cacheFactory:le,$controller:me,$document:ve,$exceptionHandler:ge,$filter:Nn,$$forceReflow:qi,$interpolate:je,$interval:Pe,$http:ke,$httpParamSerializer:$e,$httpParamSerializerJQLike:be,$httpBackend:Ae,$xhrFactory:Ee,$location:We,$log:Xe,$parse:hn,$rootScope:yn,$q:dn,$$q:mn,$sce:_n,$sceDelegate:xn,$sniffer:Tn,$templateCache:ue,$templateRequest:Cn,$$testability:Sn,$timeout:kn,$window:On,$$rAF:gn,$$jqLite:Gt,$$HashMap:wi,$$cookieReader:Pn})}])}function wt(){return++ii}function xt(t){return t.replace(ai,function(t,e,n,r){return r?n.toUpperCase():n}).replace(li,"Moz$1")}function _t(t){return!pi.test(t)}function Tt(t){var e=t.nodeType;return e===Qr||!e||e===ti}function Ct(t){for(var e in ri[t.ng339])return!0;return!1}function St(t,e){var n,r,i,s,a=e.createDocumentFragment(),l=[];if(_t(t))l.push(e.createTextNode(t));else{for(n=n||a.appendChild(e.createElement("div")),r=(hi.exec(t)||["",""])[1].toLowerCase(),i=mi[r]||mi._default,n.innerHTML=i[1]+t.replace(di,"<$1></$2>")+i[2],s=i[0];s--;)n=n.lastChild;l=B(l,n.childNodes),n=a.firstChild,n.textContent=""}return a.textContent="",a.innerHTML="",o(l,function(t){a.appendChild(t)}),a}function kt(t,n){n=n||e;var r;return(r=fi.exec(t))?[n.createElement(r[1])]:(r=St(t,n))?r.childNodes:[]}function Et(t){if(t instanceof Et)return t;var e;if(_(t)&&(t=Br(t),e=!0),!(this instanceof Et)){if(e&&"<"!=t.charAt(0))throw ci("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new Et(t)}e?qt(this,kt(t)):qt(this,t)}function At(t){return t.cloneNode(!0)}function Ot(t,e){if(e||Pt(t),t.querySelectorAll)for(var n=t.querySelectorAll("*"),r=0,i=n.length;i>r;r++)Pt(n[r])}function jt(t,e,n,r){if(b(r))throw ci("offargs","jqLite#off() does not support the `selector` argument");var i=Nt(t),s=i&&i.events,a=i&&i.handle;if(a)if(e){var l=function(e){var r=s[e];b(n)&&F(r||[],n),b(n)&&r&&r.length>0||(si(t,e,a),delete s[e])};o(e.split(" "),function(t){l(t),ui[t]&&l(ui[t])})}else for(e in s)"$destroy"!==e&&si(t,e,a),delete s[e]}function Pt(t,e){var r=t.ng339,i=r&&ri[r];if(i){if(e)return void delete i.data[e];i.handle&&(i.events.$destroy&&i.handle({},"$destroy"),jt(t)),delete ri[r],t.ng339=n}}function Nt(t,e){var r=t.ng339,i=r&&ri[r];return e&&!i&&(t.ng339=r=wt(),i=ri[r]={events:{},data:{},handle:n}),i}function Dt(t,e,n){if(Tt(t)){var r=b(n),i=!r&&e&&!w(e),o=!e,s=Nt(t,!i),a=s&&s.data;if(r)a[e]=n;else{if(o)return a;if(i)return a&&a[e];f(a,e)}}}function Mt(t,e){return t.getAttribute?(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+e+" ")>-1:!1}function It(t,e){e&&t.setAttribute&&o(e.split(" "),function(e){t.setAttribute("class",Br((" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+Br(e)+" "," ")))})}function Rt(t,e){if(e&&t.setAttribute){var n=(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(e.split(" "),function(t){t=Br(t),-1===n.indexOf(" "+t+" ")&&(n+=t+" ")}),t.setAttribute("class",Br(n))}}function qt(t,e){if(e)if(e.nodeType)t[t.length++]=e;else{var n=e.length;if("number"==typeof n&&e.window!==e){if(n)for(var r=0;n>r;r++)t[t.length++]=e[r]}else t[t.length++]=e}}function Ft(t,e){return Lt(t,"$"+(e||"ngController")+"Controller")}function Lt(t,e,n){t.nodeType==ti&&(t=t.documentElement);for(var r=Vr(e)?e:[e];t;){for(var i=0,o=r.length;o>i;i++)if(b(n=Ar.data(t,r[i])))return n;t=t.parentNode||t.nodeType===ei&&t.host}}function Vt(t){for(Ot(t,!0);t.firstChild;)t.removeChild(t.firstChild)}function Ht(t,e){e||Ot(t);var n=t.parentNode;n&&n.removeChild(t)}function Bt(e,n){n=n||t,"complete"===n.document.readyState?n.setTimeout(e):Ar(n).on("load",e)}function zt(t,e){var n=yi[e.toLowerCase()];return n&&$i[q(t)]&&n}function Ut(t){return bi[t]}function Wt(t,e){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=e[r||n.type],o=i?i.length:0;if(o){if($(n.immediatePropagationStopped)){var s=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),s&&s.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0};var a=i.specialHandlerWrapper||Xt;o>1&&(i=V(i));for(var l=0;o>l;l++)n.isImmediatePropagationStopped()||a(t,n,i[l])}};return n.elem=t,n}function Xt(t,e,n){n.call(t,e)}function Yt(t,e,n){var r=e.relatedTarget;(!r||r!==t&&!vi.call(t,r))&&n.call(t,e)}function Gt(){this.$get=function(){return f(Et,{hasClass:function(t,e){return t.attr&&(t=t[0]),Mt(t,e)},addClass:function(t,e){return t.attr&&(t=t[0]),Rt(t,e)},removeClass:function(t,e){return t.attr&&(t=t[0]),It(t,e)}})}}function Qt(t,e){var n=t&&t.$$hashKey;if(n)return"function"==typeof n&&(n=t.$$hashKey()),n;var r=typeof t;return n="function"==r||"object"==r&&null!==t?t.$$hashKey=r+":"+(e||l)():r+":"+t}function Zt(t,e){if(e){var n=0;this.nextUid=function(){return++n}}o(t,this.put,this)}function Kt(t){var e=t.toString().replace(Ci,""),n=e.match(xi);return n?"function("+(n[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function Jt(t,e,n){var r,i,s,a;if("function"==typeof t){if(!(r=t.$inject)){if(r=[],t.length){if(e)throw _(n)&&n||(n=t.name||Kt(t)),Si("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);i=t.toString().replace(Ci,""),s=i.match(xi),o(s[1].split(_i),function(t){t.replace(Ti,function(t,e,n){r.push(n)})})}t.$inject=r}}else Vr(t)?(a=t.length-1,pt(t[a],"fn"),r=t.slice(0,a)):pt(t,"fn",!0);return r}function te(t,e){function r(t){return function(e,n){return w(e)?void o(e,a(t)):t(e,n)}}function i(t,e){if(ht(t,"service"),(S(e)||Vr(e))&&(e=T.instantiate(e)),!e.$get)throw Si("pget","Provider '{0}' must define $get factory method.",t);return x[t+v]=e}function s(t,e){return function(){var n=k.invoke(e,this);if($(n))throw Si("undef","Provider '{0}' must return a value from $get factory method.",t);return n}}function l(t,e,n){return i(t,{$get:n!==!1?s(t,e):e})}function u(t,e){return l(t,["$injector",function(t){return t.instantiate(e)}])}function c(t,e){return l(t,g(e),!1)}function f(t,e){ht(t,"constant"),x[t]=e,C[t]=e}function p(t,e){var n=T.get(t+v),r=n.$get;n.$get=function(){var t=k.invoke(r,n);return k.invoke(e,null,{$delegate:t})}}function h(t){ft($(t)||Vr(t),"modulesToLoad","not an array");var e,n=[];return o(t,function(t){function r(t){var e,n;for(e=0,n=t.length;n>e;e++){var r=t[e],i=T.get(r[0]);i[r[1]].apply(i,r[2])}}if(!b.get(t)){b.put(t,!0);try{_(t)?(e=jr(t),n=n.concat(h(e.requires)).concat(e._runBlocks),r(e._invokeQueue),r(e._configBlocks)):S(t)?n.push(T.invoke(t)):Vr(t)?n.push(T.invoke(t)):pt(t,"module")}catch(i){throw Vr(t)&&(t=t[t.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),Si("modulerr","Failed to instantiate module {0} due to:\n{1}",t,i.stack||i.message||i)}}}),n}function d(t,n){function r(e,r){if(t.hasOwnProperty(e)){if(t[e]===m)throw Si("cdep","Circular dependency found: {0}",e+" <- "+y.join(" <- "));return t[e]}try{return y.unshift(e),t[e]=m,t[e]=n(e,r)}catch(i){throw t[e]===m&&delete t[e],i}finally{y.shift()}}function i(t,n,i,o){"string"==typeof i&&(o=i,i=null);var s,a,l,u=[],c=te.$$annotate(t,e,o);for(a=0,s=c.length;s>a;a++){if(l=c[a],"string"!=typeof l)throw Si("itkn","Incorrect injection token! Expected service name as string, got {0}",l);u.push(i&&i.hasOwnProperty(l)?i[l]:r(l,o))}return Vr(t)&&(t=t[s]),t.apply(n,u)}function o(t,e,n){var r=Object.create((Vr(t)?t[t.length-1]:t).prototype||null),o=i(t,r,e,n);return w(o)||S(o)?o:r}return{invoke:i,instantiate:o,get:r,annotate:te.$$annotate,has:function(e){return x.hasOwnProperty(e+v)||t.hasOwnProperty(e)}}}e=e===!0;var m={},v="Provider",y=[],b=new Zt([],!0),x={$provide:{provider:r(i),factory:r(l),service:r(u),value:r(c),constant:r(f),decorator:p}},T=x.$injector=d(x,function(t,e){throw qr.isString(e)&&y.push(e),Si("unpr","Unknown provider: {0}",y.join(" <- "))}),C={},k=C.$injector=d(C,function(t,e){var r=T.get(t+v,e);return k.invoke(r.$get,r,n,t)});return o(h(t),function(t){t&&k.invoke(t)}),k}function ee(){var t=!0;this.disableAutoScrolling=function(){t=!1},this.$get=["$window","$location","$rootScope",function(e,n,r){function i(t){var e=null;return Array.prototype.some.call(t,function(t){return"a"===q(t)?(e=t,!0):void 0}),e}function o(){var t=a.yOffset;if(S(t))t=t();else if(I(t)){var n=t[0],r=e.getComputedStyle(n);t="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else T(t)||(t=0);return t}function s(t){if(t){t.scrollIntoView();var n=o();if(n){var r=t.getBoundingClientRect().top;e.scrollBy(0,r-n)}}else e.scrollTo(0,0)}function a(t){t=_(t)?t:n.hash();var e;t?(e=l.getElementById(t))?s(e):(e=i(l.getElementsByName(t)))?s(e):"top"===t&&s(null):s(null)}var l=e.document;return t&&r.$watch(function(){return n.hash()},function(t,e){(t!==e||""!==t)&&Bt(function(){r.$evalAsync(a)})}),a}]}function ne(t,e){return t||e?t?e?(Vr(t)&&(t=t.join(" ")),Vr(e)&&(e=e.join(" ")),t+" "+e):t:e:""}function re(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.nodeType===Ei)return n}}function ie(t){_(t)&&(t=t.split(" "));var e=vt();return o(t,function(t){t.length&&(e[t]=!0)}),e}function oe(t){return w(t)?t:{}}function se(t,e,n,r){function i(t){try{t.apply(null,z(arguments,1))}finally{if(y--,0===y)for(;b.length;)try{b.pop()()}catch(e){n.error(e)}}}function s(t){var e=t.indexOf("#");return-1===e?"":t.substr(e)}function a(){C=null,u(),c()}function l(){try{return h.state}catch(t){}}function u(){w=l(),w=$(w)?null:w,H(w,E)&&(w=E),E=w}function c(){(_!==f.url()||x!==w)&&(_=f.url(),x=w,o(S,function(t){t(f.url(),w)}))}var f=this,p=(e[0],t.location),h=t.history,d=t.setTimeout,v=t.clearTimeout,g={};f.isMock=!1;var y=0,b=[];f.$$completeOutstandingRequest=i,f.$$incOutstandingRequestCount=function(){y++},f.notifyWhenNoOutstandingRequests=function(t){0===y?t():b.push(t)};var w,x,_=p.href,T=e.find("base"),C=null;u(),x=w,f.url=function(e,n,i){if($(i)&&(i=null),p!==t.location&&(p=t.location),h!==t.history&&(h=t.history),e){var o=x===i;if(_===e&&(!r.history||o))return f;var a=_&&Re(_)===Re(e);return _=e,x=i,!r.history||a&&o?((!a||C)&&(C=e),n?p.replace(e):a?p.hash=s(e):p.href=e,p.href!==e&&(C=e)):(h[n?"replaceState":"pushState"](i,"",e),u(),x=w),f}return C||p.href.replace(/%27/g,"'")},f.state=function(){return w};var S=[],k=!1,E=null;f.onUrlChange=function(e){return k||(r.history&&Ar(t).on("popstate",a),Ar(t).on("hashchange",a),k=!0),S.push(e),e},f.$$applicationDestroyed=function(){Ar(t).off("hashchange popstate",a)},f.$$checkUrlChange=c,f.baseHref=function(){var t=T.attr("href");return t?t.replace(/^(https?\:)?\/\/[^\/]*/,""):""},f.defer=function(t,e){var n;return y++,n=d(function(){delete g[n],i(t)},e||0),g[n]=!0,n},f.defer.cancel=function(t){return g[t]?(delete g[t],v(t),i(m),!0):!1}}function ae(){this.$get=["$window","$log","$sniffer","$document",function(t,e,n,r){return new se(t,r,e,n)}]}function le(){this.$get=function(){function t(t,n){function i(t){t!=p&&(h?h==t&&(h=t.n):h=t,o(t.n,t.p),o(t,p),p=t,p.n=null)}function o(t,e){t!=e&&(t&&(t.p=e),e&&(e.n=t))}if(t in e)throw r("$cacheFactory")("iid","CacheId '{0}' is already taken!",t);var s=0,a=f({},n,{id:t}),l=vt(),u=n&&n.capacity||Number.MAX_VALUE,c=vt(),p=null,h=null;return e[t]={put:function(t,e){if(!$(e)){if(u<Number.MAX_VALUE){var n=c[t]||(c[t]={key:t});i(n)}return t in l||s++,l[t]=e,s>u&&this.remove(h.key),e}},get:function(t){if(u<Number.MAX_VALUE){var e=c[t];if(!e)return;i(e)}return l[t]},remove:function(t){if(u<Number.MAX_VALUE){var e=c[t];if(!e)return;e==p&&(p=e.p),e==h&&(h=e.n),o(e.n,e.p),delete c[t]}t in l&&(delete l[t],s--)},removeAll:function(){l=vt(),s=0,c=vt(),p=h=null},destroy:function(){l=null,a=null,c=null,delete e[t]},info:function(){return f({},a,{size:s})}}}var e={};return t.info=function(){var t={};return o(e,function(e,n){t[n]=e.info()}),t},t.get=function(t){return e[t]},t}}function ue(){this.$get=["$cacheFactory",function(t){return t("templates")}]}function ce(t,r){function i(t,e,n){var r=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,i={};return o(t,function(t,o){var s=t.match(r);if(!s)throw Di("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",e,o,t,n?"controller bindings definition":"isolate scope definition");i[o]={mode:s[1][0],collection:"*"===s[2],optional:"?"===s[3],attrName:s[4]||o}}),i}function s(t,e){var n={isolateScope:null,bindToController:null};if(w(t.scope)&&(t.bindToController===!0?(n.bindToController=i(t.scope,e,!0),n.isolateScope={}):n.isolateScope=i(t.scope,e,!1)),w(t.bindToController)&&(n.bindToController=i(t.bindToController,e,!0)),w(n.bindToController)){var r=t.controller,o=t.controllerAs;if(!r)throw Di("noctrl","Cannot bind to controller without directive '{0}'s controller.",e);if(!de(r,o))throw Di("noident","Cannot bind to controller without identifier for directive '{0}'.",e)}return n}function l(t){var e=t.charAt(0);if(!e||e!==_r(e))throw Di("baddir","Directive name '{0}' is invalid. The first character must be a lowercase letter",t);if(t!==t.trim())throw Di("baddir","Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",t)}var u={},c="Directive",p=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,h=/(([\w\-]+)(?:\:([^;]+))?;?)/,y=R("ngSrc,ngSrcset,src,srcset"),x=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,T=/^(on[a-z]+|formaction)$/;this.directive=function k(e,n){return ht(e,"directive"),_(e)?(l(e),ft(n,"directiveFactory"),u.hasOwnProperty(e)||(u[e]=[],t.factory(e+c,["$injector","$exceptionHandler",function(t,n){var r=[];return o(u[e],function(i,o){try{var a=t.invoke(i);S(a)?a={compile:g(a)}:!a.compile&&a.link&&(a.compile=g(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||e,a.require=a.require||a.controller&&a.name,a.restrict=a.restrict||"EA";var l=a.$$bindings=s(a,a.name);w(l.isolateScope)&&(a.$$isolateBindings=l.isolateScope),a.$$moduleName=i.$$moduleName,r.push(a)}catch(u){n(u)}}),r}])),u[e].push(n)):o(e,a(k)),this},this.aHrefSanitizationWhitelist=function(t){return b(t)?(r.aHrefSanitizationWhitelist(t),this):r.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(t){return b(t)?(r.imgSrcSanitizationWhitelist(t),this):r.imgSrcSanitizationWhitelist()};var C=!0;this.debugInfoEnabled=function(t){return b(t)?(C=t,this):C},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(t,r,i,s,a,l,g,b,k,E,O){function j(t,e){try{t.addClass(e)}catch(n){}}function P(t,e,n,r,i){t instanceof Ar||(t=Ar(t)),o(t,function(e,n){e.nodeType==Kr&&e.nodeValue.match(/\S+/)&&(t[n]=Ar(e).wrap("<span></span>").parent()[0])});var s=D(t,e,t,n,r,i);P.$$addScopeClass(t);var a=null;return function(e,n,r){ft(e,"scope"),i&&i.needsNewScope&&(e=e.$parent.$new()),r=r||{};var o=r.parentBoundTranscludeFn,l=r.transcludeControllers,u=r.futureParentElement;o&&o.$$boundTransclude&&(o=o.$$boundTransclude),a||(a=N(u));var c;if(c="html"!==a?Ar(J(a,Ar("<div>").append(t).html())):n?gi.clone.call(t):t,l)for(var f in l)c.data("$"+f+"Controller",l[f].instance);return P.$$addScopeInfo(c,e),n&&n(c,e),s&&s(e,c,c,o),c}}function N(t){var e=t&&t[0];return e&&"foreignobject"!==q(e)&&e.toString().match(/SVG/)?"svg":"html"}function D(t,e,r,i,o,s){function a(t,r,i,o){var s,a,l,u,c,f,p,h,v;if(d){var g=r.length;for(v=new Array(g),c=0;c<m.length;c+=3)p=m[c],v[p]=r[p]}else v=r;for(c=0,f=m.length;f>c;)l=v[m[c++]],s=m[c++],a=m[c++],s?(s.scope?(u=t.$new(),P.$$addScopeInfo(Ar(l),u)):u=t,h=s.transcludeOnThisElement?M(t,s.transclude,o):!s.templateOnThisElement&&o?o:!o&&e?M(t,e):null,s(a,u,l,i,h)):a&&a(t,l.childNodes,n,o)}for(var l,u,c,f,p,h,d,m=[],v=0;v<t.length;v++)l=new st,u=I(t[v],[],l,0===v?i:n,o),c=u.length?V(u,t[v],l,e,r,null,[],[],s):null,c&&c.scope&&P.$$addScopeClass(l.$$element),p=c&&c.terminal||!(f=t[v].childNodes)||!f.length?null:D(f,c?(c.transcludeOnThisElement||!c.templateOnThisElement)&&c.transclude:e),(c||p)&&(m.push(v,c,p),h=!0,d=d||c),s=null;return h?a:null}function M(t,e,n){var r=function(r,i,o,s,a){return r||(r=t.$new(!1,a),r.$$transcluded=!0),e(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:s})};return r}function I(t,e,n,r,i){var o,s,a=t.nodeType,l=n.$attr;switch(a){case Qr:U(e,fe(q(t)),"E",r,i);for(var u,c,f,d,m,v,g=t.attributes,y=0,$=g&&g.length;$>y;y++){var b=!1,x=!1;u=g[y],c=u.name,m=Br(u.value),d=fe(c),(v=pt.test(d))&&(c=c.replace(Mi,"").substr(8).replace(/_(.)/g,function(t,e){return e.toUpperCase()}));var T=d.match(ht);T&&W(T[1])&&(b=c,x=c.substr(0,c.length-5)+"end",c=c.substr(0,c.length-6)),f=fe(c.toLowerCase()),l[f]=c,(v||!n.hasOwnProperty(f))&&(n[f]=m,zt(t,f)&&(n[f]=!0)),et(t,e,m,f,v),U(e,f,"A",r,i,b,x)}if(s=t.className,w(s)&&(s=s.animVal),_(s)&&""!==s)for(;o=h.exec(s);)f=fe(o[2]),U(e,f,"C",r,i)&&(n[f]=Br(o[3])),s=s.substr(o.index+o[0].length);break;case Kr:if(11===Er)for(;t.parentNode&&t.nextSibling&&t.nextSibling.nodeType===Kr;)t.nodeValue=t.nodeValue+t.nextSibling.nodeValue,t.parentNode.removeChild(t.nextSibling);Z(e,t.nodeValue);break;case Jr:try{o=p.exec(t.nodeValue),o&&(f=fe(o[1]),U(e,f,"M",r,i)&&(n[f]=Br(o[2])))}catch(C){}}return e.sort(G),e}function R(t,e,n){var r=[],i=0;if(e&&t.hasAttribute&&t.hasAttribute(e)){do{if(!t)throw Di("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",e,n);t.nodeType==Qr&&(t.hasAttribute(e)&&i++,t.hasAttribute(n)&&i--),r.push(t),t=t.nextSibling}while(i>0)}else r.push(t);return Ar(r)}function L(t,e,n){return function(r,i,o,s,a){return i=R(i[0],e,n),t(r,i,o,s,a)}}function V(t,r,o,s,a,u,c,f,p){function h(t,e,n,r){t&&(n&&(t=L(t,n,r)),t.require=g.require,t.directiveName=y,(O===g||g.$$isolateScope)&&(t=rt(t,{isolateScope:!0})),c.push(t)),e&&(n&&(e=L(e,n,r)),e.require=g.require,e.directiveName=y,(O===g||g.$$isolateScope)&&(e=rt(e,{isolateScope:!0})),f.push(e))}function d(t,e,n,r){var i;if(_(e)){var o=e.match(x),s=e.substring(o[0].length),a=o[1]||o[3],l="?"===o[2];if("^^"===a?n=n.parent():(i=r&&r[s],i=i&&i.instance),!i){var u="$"+s+"Controller";i=a?n.inheritedData(u):n.data(u)}if(!i&&!l)throw Di("ctreq","Controller '{0}', required by directive '{1}', can't be found!",s,t)}else if(Vr(e)){i=[];for(var c=0,f=e.length;f>c;c++)i[c]=d(t,e[c],n,r)}return i||null}function m(t,e,n,r,i,o){var s=vt();for(var a in r){var u=r[a],c={$scope:u===O||u.$$isolateScope?i:o,$element:t,$attrs:e,$transclude:n},f=u.controller;"@"==f&&(f=e[u.name]);var p=l(f,c,!0,u.controllerAs);s[u.name]=p,q||t.data("$"+u.name+"Controller",p.instance)}return s}function v(t,e,i,s,a){function l(t,e,r){var i;return A(t)||(r=e,e=t,t=n),q&&(i=v),r||(r=q?y.parent():y),a(t,e,i,r,N)}var u,p,h,v,g,y,$,b,w;r===i?($=o,y=o.$$element):(y=Ar(i),$=new st(y,o)),h=e,O?p=e.$new(!0):k&&(h=e.$parent),a&&(g=l,g.$$boundTransclude=a),E&&(v=m(y,$,g,E,p,e)),O&&(P.$$addScopeInfo(y,p,!0,!(j&&(j===O||j===O.$$originalDirective))),P.$$addScopeClass(y,!0),p.$$isolateBindings=O.$$isolateBindings,b=ot(e,$,p,p.$$isolateBindings,O),b&&p.$on("$destroy",b));for(var x in v){var _=E[x],T=v[x],C=_.$$bindings.bindToController;T.identifier&&C&&(w=ot(h,$,T.instance,C,_));var S=T();S!==T.instance&&(T.instance=S,y.data("$"+_.name+"Controller",S),w&&w(),w=ot(h,$,T.instance,C,_))}for(U=0,W=c.length;W>U;U++)u=c[U],it(u,u.isolateScope?p:e,y,$,u.require&&d(u.directiveName,u.require,y,v),g);var N=e;for(O&&(O.template||null===O.templateUrl)&&(N=p),t&&t(N,i.childNodes,n,a),U=f.length-1;U>=0;U--)u=f[U],it(u,u.isolateScope?p:e,y,$,u.require&&d(u.directiveName,u.require,y,v),g)}p=p||{};for(var g,y,$,b,T,C=-Number.MAX_VALUE,k=p.newScopeDirective,E=p.controllerDirectives,O=p.newIsolateScopeDirective,j=p.templateDirective,N=p.nonTlbTranscludeDirective,D=!1,M=!1,q=p.hasElementTranscludeDirective,F=o.$$element=Ar(r),V=u,H=s,U=0,W=t.length;W>U;U++){g=t[U];var G=g.$$start,Z=g.$$end;if(G&&(F=R(r,G,Z)),$=n,C>g.priority)break;if((T=g.scope)&&(g.templateUrl||(w(T)?(Q("new/isolated scope",O||k,g,F),O=g):Q("new/isolated scope",O,g,F)),k=k||g),y=g.name,!g.templateUrl&&g.controller&&(T=g.controller,E=E||vt(),Q("'"+y+"' controller",E[y],g,F),E[y]=g),(T=g.transclude)&&(D=!0,g.$$tlb||(Q("transclusion",N,g,F),N=g),"element"==T?(q=!0,C=g.priority,$=F,F=o.$$element=Ar(e.createComment(" "+y+": "+o[y]+" ")),r=F[0],nt(a,z($),r),H=P($,s,C,V&&V.name,{nonTlbTranscludeDirective:N})):($=Ar(At(r)).contents(),F.empty(),H=P($,s,n,n,{needsNewScope:g.$$isolateScope||g.$$newScope}))),g.template)if(M=!0,Q("template",j,g,F),j=g,T=S(g.template)?g.template(F,o):g.template,T=ct(T),g.replace){if(V=g,$=_t(T)?[]:he(J(g.templateNamespace,Br(T))),r=$[0],1!=$.length||r.nodeType!==Qr)throw Di("tplrt","Template for directive '{0}' must have exactly one root element. {1}",y,"");nt(a,F,r);var tt={$attr:{}},et=I(r,[],tt),at=t.splice(U+1,t.length-(U+1));(O||k)&&B(et,O,k),t=t.concat(et).concat(at),X(o,tt),W=t.length}else F.html(T);if(g.templateUrl)M=!0,Q("template",j,g,F),j=g,g.replace&&(V=g),v=Y(t.splice(U,t.length-U),F,o,a,D&&H,c,f,{controllerDirectives:E,newScopeDirective:k!==g&&k,newIsolateScopeDirective:O,templateDirective:j,nonTlbTranscludeDirective:N}),W=t.length;else if(g.compile)try{b=g.compile(F,o,H),S(b)?h(null,b,G,Z):b&&h(b.pre,b.post,G,Z)}catch(lt){i(lt,K(F))}g.terminal&&(v.terminal=!0,C=Math.max(C,g.priority))}return v.scope=k&&k.scope===!0,v.transcludeOnThisElement=D,v.templateOnThisElement=M,v.transclude=H,p.hasElementTranscludeDirective=q,v}function B(t,e,n){for(var r=0,i=t.length;i>r;r++)t[r]=d(t[r],{$$isolateScope:e,$$newScope:n})}function U(e,n,r,o,s,a,l){if(n===s)return null;var f=null;if(u.hasOwnProperty(n))for(var p,h=t.get(n+c),m=0,v=h.length;v>m;m++)try{p=h[m],($(o)||o>p.priority)&&-1!=p.restrict.indexOf(r)&&(a&&(p=d(p,{$$start:a,$$end:l})),e.push(p),f=p)}catch(g){i(g)}return f}function W(e){if(u.hasOwnProperty(e))for(var n,r=t.get(e+c),i=0,o=r.length;o>i;i++)if(n=r[i],n.multiElement)return!0;return!1}function X(t,e){var n=e.$attr,r=t.$attr,i=t.$$element;o(t,function(r,i){"$"!=i.charAt(0)&&(e[i]&&e[i]!==r&&(r+=("style"===i?";":" ")+e[i]),t.$set(i,r,!0,n[i]))}),o(e,function(e,o){"class"==o?(j(i,e),t["class"]=(t["class"]?t["class"]+" ":"")+e):"style"==o?(i.attr("style",i.attr("style")+";"+e),t.style=(t.style?t.style+";":"")+e):"$"==o.charAt(0)||t.hasOwnProperty(o)||(t[o]=e,r[o]=n[o])})}function Y(t,e,n,r,i,a,l,u){var c,f,p=[],h=e[0],m=t.shift(),v=d(m,{templateUrl:null,transclude:null,replace:null,$$originalDirective:m}),g=S(m.templateUrl)?m.templateUrl(e,n):m.templateUrl,y=m.templateNamespace;return e.empty(),s(g).then(function(s){var d,$,b,x;if(s=ct(s),m.replace){if(b=_t(s)?[]:he(J(y,Br(s))),d=b[0],1!=b.length||d.nodeType!==Qr)throw Di("tplrt","Template for directive '{0}' must have exactly one root element. {1}",m.name,g);$={$attr:{}},nt(r,e,d);var _=I(d,[],$);w(m.scope)&&B(_,!0),t=_.concat(t),X(n,$)}else d=h,e.html(s);for(t.unshift(v),c=V(t,d,n,i,e,m,a,l,u),o(r,function(t,n){t==d&&(r[n]=e[0])}),f=D(e[0].childNodes,i);p.length;){var T=p.shift(),C=p.shift(),S=p.shift(),k=p.shift(),E=e[0];if(!T.$$destroyed){if(C!==h){var A=C.className;u.hasElementTranscludeDirective&&m.replace||(E=At(d)),nt(S,Ar(C),E),j(Ar(E),A)}x=c.transcludeOnThisElement?M(T,c.transclude,k):k,c(f,T,E,r,x)}}p=null}),function(t,e,n,r,i){var o=i;e.$$destroyed||(p?p.push(e,n,r,o):(c.transcludeOnThisElement&&(o=M(e,c.transclude,i)),c(f,e,n,r,o)))}}function G(t,e){var n=e.priority-t.priority;return 0!==n?n:t.name!==e.name?t.name<e.name?-1:1:t.index-e.index}function Q(t,e,n,r){function i(t){return t?" (module: "+t+")":""}if(e)throw Di("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",e.name,i(e.$$moduleName),n.name,i(n.$$moduleName),t,K(r))}function Z(t,e){var n=r(e,!0);n&&t.push({priority:0,compile:function(t){var e=t.parent(),r=!!e.length;return r&&P.$$addBindingClass(e),function(t,e){var i=e.parent();r||P.$$addBindingClass(i),P.$$addBindingInfo(i,n.expressions),t.$watch(n,function(t){e[0].nodeValue=t})}}})}function J(t,n){switch(t=_r(t||"html")){case"svg":case"math":var r=e.createElement("div");return r.innerHTML="<"+t+">"+n+"</"+t+">",r.childNodes[0].childNodes;default:return n}}function tt(t,e){if("srcdoc"==e)return k.HTML;var n=q(t);return"xlinkHref"==e||"form"==n&&"action"==e||"img"!=n&&("src"==e||"ngSrc"==e)?k.RESOURCE_URL:void 0}function et(t,e,n,i,o){var s=tt(t,i);o=y[i]||o;var a=r(n,!0,s,o);if(a){if("multiple"===i&&"select"===q(t))throw Di("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",K(t));e.push({priority:100,compile:function(){return{pre:function(t,e,l){var u=l.$$observers||(l.$$observers=vt());if(T.test(i))throw Di("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");var c=l[i];c!==n&&(a=c&&r(c,!0,s,o),n=c),a&&(l[i]=a(t),(u[i]||(u[i]=[])).$$inter=!0,(l.$$observers&&l.$$observers[i].$$scope||t).$watch(a,function(t,e){"class"===i&&t!=e?l.$updateClass(t,e):l.$set(i,t)}))}}}})}}function nt(t,n,r){var i,o,s=n[0],a=n.length,l=s.parentNode;if(t)for(i=0,o=t.length;o>i;i++)if(t[i]==s){t[i++]=r;for(var u=i,c=u+a-1,f=t.length;f>u;u++,c++)f>c?t[u]=t[c]:delete t[u];t.length-=a-1,t.context===s&&(t.context=r);break}l&&l.replaceChild(r,s);var p=e.createDocumentFragment();p.appendChild(s),Ar.hasData(s)&&(Ar.data(r,Ar.data(s)),Or?(Lr=!0,Or.cleanData([s])):delete Ar.cache[s[Ar.expando]]);for(var h=1,d=n.length;d>h;h++){var m=n[h];Ar(m).remove(),p.appendChild(m),delete n[h]}n[0]=r,n.length=1}function rt(t,e){return f(function(){return t.apply(null,arguments)},t,e)}function it(t,e,n,r,o,s){try{t(e,n,r,o,s)}catch(a){i(a,K(n))}}function ot(t,e,n,i,s){var l=[];return o(i,function(i,o){var u,c,f,p,h=i.attrName,d=i.optional,v=i.mode;switch(v){case"@":d||Tr.call(e,h)||(n[o]=e[h]=void 0),e.$observe(h,function(t){_(t)&&(n[o]=t)}),e.$$observers[h].$$scope=t,_(e[h])&&(n[o]=r(e[h])(t));break;case"=":if(!Tr.call(e,h)){if(d)break;e[h]=void 0}if(d&&!e[h])break;c=a(e[h]),p=c.literal?H:function(t,e){return t===e||t!==t&&e!==e},f=c.assign||function(){throw u=n[o]=c(t),Di("nonassign","Expression '{0}' used with directive '{1}' is non-assignable!",e[h],s.name)},u=n[o]=c(t);var g=function(e){return p(e,n[o])||(p(e,u)?f(t,e=n[o]):n[o]=e),u=e};g.$stateful=!0;var y;y=i.collection?t.$watchCollection(e[h],g):t.$watch(a(e[h],g),null,c.literal),l.push(y);break;case"&":if(c=e.hasOwnProperty(h)?a(e[h]):m,c===m&&d)break;n[o]=function(e){return c(t,e)}}}),l.length&&function(){for(var t=0,e=l.length;e>t;++t)l[t]()}}var st=function(t,e){if(e){var n,r,i,o=Object.keys(e);for(n=0,r=o.length;r>n;n++)i=o[n],this[i]=e[i]}else this.$attr={};this.$$element=t};st.prototype={$normalize:fe,$addClass:function(t){t&&t.length>0&&E.addClass(this.$$element,t)},$removeClass:function(t){t&&t.length>0&&E.removeClass(this.$$element,t)},$updateClass:function(t,e){var n=pe(t,e);n&&n.length&&E.addClass(this.$$element,n);var r=pe(e,t);r&&r.length&&E.removeClass(this.$$element,r)},$set:function(t,e,n,r){var s,a=this.$$element[0],l=zt(a,t),u=Ut(t),c=t;if(l?(this.$$element.prop(t,e),r=l):u&&(this[u]=e,c=u),this[t]=e,r?this.$attr[t]=r:(r=this.$attr[t],r||(this.$attr[t]=r=ut(t,"-"))),s=q(this.$$element),"a"===s&&"href"===t||"img"===s&&"src"===t)this[t]=e=O(e,"src"===t);else if("img"===s&&"srcset"===t){for(var f="",p=Br(e),h=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,d=/\s/.test(p)?h:/(,)/,m=p.split(d),v=Math.floor(m.length/2),g=0;v>g;g++){var y=2*g;f+=O(Br(m[y]),!0),f+=" "+Br(m[y+1])}var b=Br(m[2*g]).split(/\s/);f+=O(Br(b[0]),!0),2===b.length&&(f+=" "+Br(b[1])),this[t]=e=f}n!==!1&&(null===e||$(e)?this.$$element.removeAttr(r):this.$$element.attr(r,e));var w=this.$$observers;w&&o(w[c],function(t){try{t(e)}catch(n){i(n)}})},$observe:function(t,e){var n=this,r=n.$$observers||(n.$$observers=vt()),i=r[t]||(r[t]=[]);return i.push(e),g.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(t)||$(n[t])||e(n[t])}),function(){F(i,e)}}};var at=r.startSymbol(),lt=r.endSymbol(),ct="{{"==at||"}}"==lt?v:function(t){return t.replace(/\{\{/g,at).replace(/}}/g,lt)},pt=/^ngAttr[A-Z]/,ht=/^(.+)Start$/;return P.$$addBindingInfo=C?function(t,e){var n=t.data("$binding")||[];Vr(e)?n=n.concat(e):n.push(e),t.data("$binding",n)}:m,P.$$addBindingClass=C?function(t){j(t,"ng-binding")}:m,P.$$addScopeInfo=C?function(t,e,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";t.data(i,e)}:m,P.$$addScopeClass=C?function(t,e){j(t,e?"ng-isolate-scope":"ng-scope")}:m,P}]}function fe(t){return xt(t.replace(Mi,""))}function pe(t,e){var n="",r=t.split(/\s+/),i=e.split(/\s+/);t:for(var o=0;o<r.length;o++){for(var s=r[o],a=0;a<i.length;a++)if(s==i[a])continue t;n+=(n.length>0?" ":"")+s}return n}function he(t){t=Ar(t);var e=t.length;if(1>=e)return t;for(;e--;){var n=t[e];n.nodeType===Jr&&Nr.call(t,e,1)}return t}function de(t,e){if(e&&_(e))return e;if(_(t)){var n=Ri.exec(t);if(n)return n[3]}}function me(){var t={},e=!1;this.register=function(e,n){ht(e,"controller"),w(e)?f(t,e):t[e]=n},this.allowGlobals=function(){e=!0},this.$get=["$injector","$window",function(i,o){function s(t,e,n,i){if(!t||!w(t.$scope))throw r("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,e);t.$scope[e]=n}return function(r,a,l,u){var c,p,h,d;if(l=l===!0,u&&_(u)&&(d=u),_(r)){if(p=r.match(Ri),!p)throw Ii("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",r);h=p[1],d=d||p[3],r=t.hasOwnProperty(h)?t[h]:dt(a.$scope,h,!0)||(e?dt(o,h,!0):n),pt(r,h,!0)}if(l){var m=(Vr(r)?r[r.length-1]:r).prototype;c=Object.create(m||null),d&&s(a,d,c,h||r.name);var v;return v=f(function(){var t=i.invoke(r,c,a,h);return t!==c&&(w(t)||S(t))&&(c=t,d&&s(a,d,c,h||r.name)),c},{instance:c,identifier:d})}return c=i.instantiate(r,a,h),d&&s(a,d,c,h||r.name),c}}]}function ve(){this.$get=["$window",function(t){return Ar(t.document)}]}function ge(){this.$get=["$log",function(t){return function(e,n){t.error.apply(t,arguments)}}]}function ye(t){return w(t)?C(t)?t.toISOString():X(t):t}function $e(){this.$get=function(){return function(t){if(!t)return"";var e=[];return s(t,function(t,n){null===t||$(t)||(Vr(t)?o(t,function(t,r){e.push(rt(n)+"="+rt(ye(t)))}):e.push(rt(n)+"="+rt(ye(t))))}),e.join("&")}}}function be(){this.$get=function(){return function(t){function e(t,r,i){null===t||$(t)||(Vr(t)?o(t,function(t,n){e(t,r+"["+(w(t)?n:"")+"]")}):w(t)&&!C(t)?s(t,function(t,n){e(t,r+(i?"":"[")+n+(i?"":"]"))}):n.push(rt(r)+"="+rt(ye(t))))}if(!t)return"";var n=[];return e(t,"",!0),n.join("&")}}}function we(t,e){if(_(t)){var n=t.replace(Bi,"").trim();if(n){var r=e("Content-Type");(r&&0===r.indexOf(Fi)||xe(n))&&(t=Y(n))}}return t}function xe(t){var e=t.match(Vi);return e&&Hi[e[0]].test(t)}function _e(t){function e(t,e){t&&(r[t]=r[t]?r[t]+", "+e:e)}var n,r=vt();return _(t)?o(t.split("\n"),function(t){n=t.indexOf(":"),
e(_r(Br(t.substr(0,n))),Br(t.substr(n+1)))}):w(t)&&o(t,function(t,n){e(_r(n),Br(t))}),r}function Te(t){var e;return function(n){if(e||(e=_e(t)),n){var r=e[_r(n)];return void 0===r&&(r=null),r}return e}}function Ce(t,e,n,r){return S(r)?r(t,e,n):(o(r,function(r){t=r(t,e,n)}),t)}function Se(t){return t>=200&&300>t}function ke(){var t=this.defaults={transformResponse:[we],transformRequest:[function(t){return!w(t)||O(t)||P(t)||j(t)?t:X(t)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:V(Li),put:V(Li),patch:V(Li)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},e=!1;this.useApplyAsync=function(t){return b(t)?(e=!!t,this):e};var i=!0;this.useLegacyPromiseExtensions=function(t){return b(t)?(i=!!t,this):i};var s=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(a,l,u,c,p,h){function d(e){function s(t){var e=f({},t);return e.data=Ce(t.data,t.headers,t.status,u.transformResponse),Se(t.status)?e:p.reject(e)}function a(t,e){var n,r={};return o(t,function(t,i){S(t)?(n=t(e),null!=n&&(r[i]=n)):r[i]=t}),r}function l(e){var n,r,i,o=t.headers,s=f({},e.headers);o=f({},o.common,o[_r(e.method)]);t:for(n in o){r=_r(n);for(i in s)if(_r(i)===r)continue t;s[n]=o[n]}return a(s,V(e))}if(!qr.isObject(e))throw r("$http")("badreq","Http request configuration must be an object.  Received: {0}",e);var u=f({method:"get",transformRequest:t.transformRequest,transformResponse:t.transformResponse,paramSerializer:t.paramSerializer},e);u.headers=l(e),u.method=Cr(u.method),u.paramSerializer=_(u.paramSerializer)?h.get(u.paramSerializer):u.paramSerializer;var c=function(e){var r=e.headers,i=Ce(e.data,Te(r),n,e.transformRequest);return $(i)&&o(r,function(t,e){"content-type"===_r(e)&&delete r[e]}),$(e.withCredentials)&&!$(t.withCredentials)&&(e.withCredentials=t.withCredentials),g(e,i).then(s,s)},d=[c,n],m=p.when(u);for(o(T,function(t){(t.request||t.requestError)&&d.unshift(t.request,t.requestError),(t.response||t.responseError)&&d.push(t.response,t.responseError)});d.length;){var v=d.shift(),y=d.shift();m=m.then(v,y)}return i?(m.success=function(t){return pt(t,"fn"),m.then(function(e){t(e.data,e.status,e.headers,u)}),m},m.error=function(t){return pt(t,"fn"),m.then(null,function(e){t(e.data,e.status,e.headers,u)}),m}):(m.success=Ui("success"),m.error=Ui("error")),m}function m(t){o(arguments,function(t){d[t]=function(e,n){return d(f({},n||{},{method:t,url:e}))}})}function v(t){o(arguments,function(t){d[t]=function(e,n,r){return d(f({},r||{},{method:t,url:e,data:n}))}})}function g(r,i){function o(t,n,r,i){function o(){s(n,t,r,i)}h&&(Se(t)?h.put(T,[t,n,_e(r),i]):h.remove(T)),e?c.$applyAsync(o):(o(),c.$$phase||c.$apply())}function s(t,e,n,i){e=e>=-1?e:0,(Se(e)?v.resolve:v.reject)({data:t,status:e,headers:Te(n),config:r,statusText:i})}function u(t){s(t.data,t.status,V(t.headers()),t.statusText)}function f(){var t=d.pendingRequests.indexOf(r);-1!==t&&d.pendingRequests.splice(t,1)}var h,m,v=p.defer(),g=v.promise,_=r.headers,T=y(r.url,r.paramSerializer(r.params));if(d.pendingRequests.push(r),g.then(f,f),!r.cache&&!t.cache||r.cache===!1||"GET"!==r.method&&"JSONP"!==r.method||(h=w(r.cache)?r.cache:w(t.cache)?t.cache:x),h&&(m=h.get(T),b(m)?D(m)?m.then(u,u):Vr(m)?s(m[1],m[0],V(m[2]),m[3]):s(m,200,{},"OK"):h.put(T,g)),$(m)){var C=An(r.url)?l()[r.xsrfCookieName||t.xsrfCookieName]:n;C&&(_[r.xsrfHeaderName||t.xsrfHeaderName]=C),a(r.method,T,i,o,_,r.timeout,r.withCredentials,r.responseType)}return g}function y(t,e){return e.length>0&&(t+=(-1==t.indexOf("?")?"?":"&")+e),t}var x=u("$http");t.paramSerializer=_(t.paramSerializer)?h.get(t.paramSerializer):t.paramSerializer;var T=[];return o(s,function(t){T.unshift(_(t)?h.get(t):h.invoke(t))}),d.pendingRequests=[],m("get","delete","head","jsonp"),v("post","put","patch"),d.defaults=t,d}]}function Ee(){this.$get=function(){return function(){return new t.XMLHttpRequest}}}function Ae(){this.$get=["$browser","$window","$document","$xhrFactory",function(t,e,n,r){return Oe(t,r,t.defer,e.angular.callbacks,n[0])}]}function Oe(t,e,n,r,i){function s(t,e,n){var o=i.createElement("script"),s=null;return o.type="text/javascript",o.src=t,o.async=!0,s=function(t){si(o,"load",s),si(o,"error",s),i.body.removeChild(o),o=null;var a=-1,l="unknown";t&&("load"!==t.type||r[e].called||(t={type:"error"}),l=t.type,a="error"===t.type?404:200),n&&n(a,l)},oi(o,"load",s),oi(o,"error",s),i.body.appendChild(o),s}return function(i,a,l,u,c,f,p,h){function d(){y&&y(),w&&w.abort()}function v(e,r,i,o,s){b(T)&&n.cancel(T),y=w=null,e(r,i,o,s),t.$$completeOutstandingRequest(m)}if(t.$$incOutstandingRequestCount(),a=a||t.url(),"jsonp"==_r(i)){var g="_"+(r.counter++).toString(36);r[g]=function(t){r[g].data=t,r[g].called=!0};var y=s(a.replace("JSON_CALLBACK","angular.callbacks."+g),g,function(t,e){v(u,t,r[g].data,"",e),r[g]=m})}else{var w=e(i,a);w.open(i,a,!0),o(c,function(t,e){b(t)&&w.setRequestHeader(e,t)}),w.onload=function(){var t=w.statusText||"",e="response"in w?w.response:w.responseText,n=1223===w.status?204:w.status;0===n&&(n=e?200:"file"==En(a).protocol?404:0),v(u,n,e,w.getAllResponseHeaders(),t)};var x=function(){v(u,-1,null,null,"")};if(w.onerror=x,w.onabort=x,p&&(w.withCredentials=!0),h)try{w.responseType=h}catch(_){if("json"!==h)throw _}w.send($(l)?null:l)}if(f>0)var T=n(d,f);else D(f)&&f.then(d)}}function je(){var t="{{",e="}}";this.startSymbol=function(e){return e?(t=e,this):t},this.endSymbol=function(t){return t?(e=t,this):e},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(t){return"\\\\\\"+t}function s(n){return n.replace(p,t).replace(h,e)}function a(t){if(null==t)return"";switch(typeof t){case"string":break;case"number":t=""+t;break;default:t=X(t)}return t}function l(o,l,p,h){function d(t){try{return t=E(t),h&&!b(t)?t:a(t)}catch(e){r(Wi.interr(o,e))}}h=!!h;for(var m,v,g,y=0,w=[],x=[],_=o.length,T=[],C=[];_>y;){if(-1==(m=o.indexOf(t,y))||-1==(v=o.indexOf(e,m+u))){y!==_&&T.push(s(o.substring(y)));break}y!==m&&T.push(s(o.substring(y,m))),g=o.substring(m+u,v),w.push(g),x.push(n(g,d)),y=v+c,C.push(T.length),T.push("")}if(p&&T.length>1&&Wi.throwNoconcat(o),!l||w.length){var k=function(t){for(var e=0,n=w.length;n>e;e++){if(h&&$(t[e]))return;T[C[e]]=t[e]}return T.join("")},E=function(t){return p?i.getTrusted(p,t):i.valueOf(t)};return f(function(t){var e=0,n=w.length,i=new Array(n);try{for(;n>e;e++)i[e]=x[e](t);return k(i)}catch(s){r(Wi.interr(o,s))}},{exp:o,expressions:w,$$watchDelegate:function(t,e){var n;return t.$watchGroup(x,function(r,i){var o=k(r);S(e)&&e.call(this,o,r!==i?n:o,t),n=o})}})}}var u=t.length,c=e.length,p=new RegExp(t.replace(/./g,o),"g"),h=new RegExp(e.replace(/./g,o),"g");return l.startSymbol=function(){return t},l.endSymbol=function(){return e},l}]}function Pe(){this.$get=["$rootScope","$window","$q","$$q",function(t,e,n,r){function i(i,s,a,l){var u=arguments.length>4,c=u?z(arguments,4):[],f=e.setInterval,p=e.clearInterval,h=0,d=b(l)&&!l,m=(d?r:n).defer(),v=m.promise;return a=b(a)?a:0,v.then(null,null,u?function(){i.apply(null,c)}:i),v.$$intervalId=f(function(){m.notify(h++),a>0&&h>=a&&(m.resolve(h),p(v.$$intervalId),delete o[v.$$intervalId]),d||t.$apply()},s),o[v.$$intervalId]=m,v}var o={};return i.cancel=function(t){return t&&t.$$intervalId in o?(o[t.$$intervalId].reject("canceled"),e.clearInterval(t.$$intervalId),delete o[t.$$intervalId],!0):!1},i}]}function Ne(t){for(var e=t.split("/"),n=e.length;n--;)e[n]=nt(e[n]);return e.join("/")}function De(t,e){var n=En(t);e.$$protocol=n.protocol,e.$$host=n.hostname,e.$$port=h(n.port)||Yi[n.protocol]||null}function Me(t,e){var n="/"!==t.charAt(0);n&&(t="/"+t);var r=En(t);e.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),e.$$search=tt(r.search),e.$$hash=decodeURIComponent(r.hash),e.$$path&&"/"!=e.$$path.charAt(0)&&(e.$$path="/"+e.$$path)}function Ie(t,e){return 0===e.indexOf(t)?e.substr(t.length):void 0}function Re(t){var e=t.indexOf("#");return-1==e?t:t.substr(0,e)}function qe(t){return t.replace(/(#.+)|#$/,"$1")}function Fe(t){return t.substr(0,Re(t).lastIndexOf("/")+1)}function Le(t){return t.substring(0,t.indexOf("/",t.indexOf("//")+2))}function Ve(t,e,n){this.$$html5=!0,n=n||"",De(t,this),this.$$parse=function(t){var n=Ie(e,t);if(!_(n))throw Gi("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',t,e);Me(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var t=et(this.$$search),n=this.$$hash?"#"+nt(this.$$hash):"";this.$$url=Ne(this.$$path)+(t?"?"+t:"")+n,this.$$absUrl=e+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,s,a;return b(o=Ie(t,r))?(s=o,a=b(o=Ie(n,o))?e+(Ie("/",o)||o):t+s):b(o=Ie(e,r))?a=e+o:e==r+"/"&&(a=e),a&&this.$$parse(a),!!a}}function He(t,e,n){De(t,this),this.$$parse=function(r){function i(t,e,n){var r,i=/^\/[A-Z]:(\/.*)/;return 0===e.indexOf(n)&&(e=e.replace(n,"")),i.exec(e)?t:(r=i.exec(t),r?r[1]:t)}var o,s=Ie(t,r)||Ie(e,r);$(s)||"#"!==s.charAt(0)?this.$$html5?o=s:(o="",$(s)&&(t=r,this.replace())):(o=Ie(n,s),$(o)&&(o=s)),Me(o,this),this.$$path=i(this.$$path,o,t),this.$$compose()},this.$$compose=function(){var e=et(this.$$search),r=this.$$hash?"#"+nt(this.$$hash):"";this.$$url=Ne(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(e,n){return Re(t)==Re(e)?(this.$$parse(e),!0):!1}}function Be(t,e,n){this.$$html5=!0,He.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,s;return t==Re(r)?o=r:(s=Ie(e,r))?o=t+n+s:e===r+"/"&&(o=e),o&&this.$$parse(o),!!o},this.$$compose=function(){var e=et(this.$$search),r=this.$$hash?"#"+nt(this.$$hash):"";this.$$url=Ne(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+n+this.$$url}}function ze(t){return function(){return this[t]}}function Ue(t,e){return function(n){return $(n)?this[t]:(this[t]=e(n),this.$$compose(),this)}}function We(){var t="",e={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(e){return b(e)?(t=e,this):t},this.html5Mode=function(t){return N(t)?(e.enabled=t,this):w(t)?(N(t.enabled)&&(e.enabled=t.enabled),N(t.requireBase)&&(e.requireBase=t.requireBase),N(t.rewriteLinks)&&(e.rewriteLinks=t.rewriteLinks),this):e},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,s){function a(t,e,n){var i=u.url(),o=u.$$state;try{r.url(t,e,n),u.$$state=r.state()}catch(s){throw u.url(i),u.$$state=o,s}}function l(t,e){n.$broadcast("$locationChangeSuccess",u.absUrl(),t,u.$$state,e)}var u,c,f,p=r.baseHref(),h=r.url();if(e.enabled){if(!p&&e.requireBase)throw Gi("nobase","$location in HTML5 mode requires a <base> tag to be present!");f=Le(h)+(p||"/"),c=i.history?Ve:Be}else f=Re(h),c=He;var d=Fe(f);u=new c(f,d,"#"+t),u.$$parseLinkUrl(h,h),u.$$state=r.state();var m=/^\s*(javascript|mailto):/i;o.on("click",function(t){if(e.rewriteLinks&&!t.ctrlKey&&!t.metaKey&&!t.shiftKey&&2!=t.which&&2!=t.button){for(var i=Ar(t.target);"a"!==q(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var a=i.prop("href"),l=i.attr("href")||i.attr("xlink:href");w(a)&&"[object SVGAnimatedString]"===a.toString()&&(a=En(a.animVal).href),m.test(a)||!a||i.attr("target")||t.isDefaultPrevented()||u.$$parseLinkUrl(a,l)&&(t.preventDefault(),u.absUrl()!=r.url()&&(n.$apply(),s.angular["ff-684208-preventDefault"]=!0))}}),qe(u.absUrl())!=qe(h)&&r.url(u.absUrl(),!0);var v=!0;return r.onUrlChange(function(t,e){return $(Ie(d,t))?void(s.location.href=t):(n.$evalAsync(function(){var r,i=u.absUrl(),o=u.$$state;t=qe(t),u.$$parse(t),u.$$state=e,r=n.$broadcast("$locationChangeStart",t,i,e,o).defaultPrevented,u.absUrl()===t&&(r?(u.$$parse(i),u.$$state=o,a(i,!1,o)):(v=!1,l(i,o)))}),void(n.$$phase||n.$digest()))}),n.$watch(function(){var t=qe(r.url()),e=qe(u.absUrl()),o=r.state(),s=u.$$replace,c=t!==e||u.$$html5&&i.history&&o!==u.$$state;(v||c)&&(v=!1,n.$evalAsync(function(){var e=u.absUrl(),r=n.$broadcast("$locationChangeStart",e,t,u.$$state,o).defaultPrevented;u.absUrl()===e&&(r?(u.$$parse(t),u.$$state=o):(c&&a(e,s,o===u.$$state?null:u.$$state),l(t,o)))})),u.$$replace=!1}),u}]}function Xe(){var t=!0,e=this;this.debugEnabled=function(e){return b(e)?(t=e,this):t},this.$get=["$window",function(n){function r(t){return t instanceof Error&&(t.stack?t=t.message&&-1===t.stack.indexOf(t.message)?"Error: "+t.message+"\n"+t.stack:t.stack:t.sourceURL&&(t=t.message+"\n"+t.sourceURL+":"+t.line)),t}function i(t){var e=n.console||{},i=e[t]||e.log||m,s=!1;try{s=!!i.apply}catch(a){}return s?function(){var t=[];return o(arguments,function(e){t.push(r(e))}),i.apply(e,t)}:function(t,e){i(t,null==e?"":e)}}return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){t&&n.apply(e,arguments)}}()}}]}function Ye(t,e){if("__defineGetter__"===t||"__defineSetter__"===t||"__lookupGetter__"===t||"__lookupSetter__"===t||"__proto__"===t)throw Zi("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",e);return t}function Ge(t,e){if(t+="",!_(t))throw Zi("iseccst","Cannot convert object to primitive value! Expression: {0}",e);return t}function Qe(t,e){if(t){if(t.constructor===t)throw Zi("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",e);if(t.window===t)throw Zi("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",e);if(t.children&&(t.nodeName||t.prop&&t.attr&&t.find))throw Zi("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",e);if(t===Object)throw Zi("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",e)}return t}function Ze(t,e){if(t){if(t.constructor===t)throw Zi("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",e);if(t===Ki||t===Ji||t===to)throw Zi("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",e)}}function Ke(t,e){if(t&&(t===0..constructor||t===(!1).constructor||t==="".constructor||t==={}.constructor||t===[].constructor||t===Function.constructor))throw Zi("isecaf","Assigning to a constructor is disallowed! Expression: {0}",e)}function Je(t,e){return"undefined"!=typeof t?t:e}function tn(t,e){return"undefined"==typeof t?e:"undefined"==typeof e?t:t+e}function en(t,e){var n=t(e);return!n.$stateful}function nn(t,e){var n,r;switch(t.type){case io.Program:n=!0,o(t.body,function(t){nn(t.expression,e),n=n&&t.expression.constant}),t.constant=n;break;case io.Literal:t.constant=!0,t.toWatch=[];break;case io.UnaryExpression:nn(t.argument,e),t.constant=t.argument.constant,t.toWatch=t.argument.toWatch;break;case io.BinaryExpression:nn(t.left,e),nn(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.left.toWatch.concat(t.right.toWatch);break;case io.LogicalExpression:nn(t.left,e),nn(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.constant?[]:[t];break;case io.ConditionalExpression:nn(t.test,e),nn(t.alternate,e),nn(t.consequent,e),t.constant=t.test.constant&&t.alternate.constant&&t.consequent.constant,t.toWatch=t.constant?[]:[t];break;case io.Identifier:t.constant=!1,t.toWatch=[t];break;case io.MemberExpression:nn(t.object,e),t.computed&&nn(t.property,e),t.constant=t.object.constant&&(!t.computed||t.property.constant),t.toWatch=[t];break;case io.CallExpression:n=t.filter?en(e,t.callee.name):!1,r=[],o(t.arguments,function(t){nn(t,e),n=n&&t.constant,t.constant||r.push.apply(r,t.toWatch)}),t.constant=n,t.toWatch=t.filter&&en(e,t.callee.name)?r:[t];break;case io.AssignmentExpression:nn(t.left,e),nn(t.right,e),t.constant=t.left.constant&&t.right.constant,t.toWatch=[t];break;case io.ArrayExpression:n=!0,r=[],o(t.elements,function(t){nn(t,e),n=n&&t.constant,t.constant||r.push.apply(r,t.toWatch)}),t.constant=n,t.toWatch=r;break;case io.ObjectExpression:n=!0,r=[],o(t.properties,function(t){nn(t.value,e),n=n&&t.value.constant,t.value.constant||r.push.apply(r,t.value.toWatch)}),t.constant=n,t.toWatch=r;break;case io.ThisExpression:t.constant=!1,t.toWatch=[]}}function rn(t){if(1==t.length){var e=t[0].expression,r=e.toWatch;return 1!==r.length?r:r[0]!==e?r:n}}function on(t){return t.type===io.Identifier||t.type===io.MemberExpression}function sn(t){return 1===t.body.length&&on(t.body[0].expression)?{type:io.AssignmentExpression,left:t.body[0].expression,right:{type:io.NGValueParameter},operator:"="}:void 0}function an(t){return 0===t.body.length||1===t.body.length&&(t.body[0].expression.type===io.Literal||t.body[0].expression.type===io.ArrayExpression||t.body[0].expression.type===io.ObjectExpression)}function ln(t){return t.constant}function un(t,e){this.astBuilder=t,this.$filter=e}function cn(t,e){this.astBuilder=t,this.$filter=e}function fn(t){return"constructor"==t}function pn(t){return S(t.valueOf)?t.valueOf():so.call(t)}function hn(){var t=vt(),e=vt();this.$get=["$filter",function(r){function i(t,e){return null==t||null==e?t===e:"object"==typeof t&&(t=pn(t),"object"==typeof t)?!1:t===e||t!==t&&e!==e}function s(t,e,r,o,s){var a,l=o.inputs;if(1===l.length){var u=i;return l=l[0],t.$watch(function(t){var e=l(t);return i(e,u)||(a=o(t,n,n,[e]),u=e&&pn(e)),a},e,r,s)}for(var c=[],f=[],p=0,h=l.length;h>p;p++)c[p]=i,f[p]=null;return t.$watch(function(t){for(var e=!1,r=0,s=l.length;s>r;r++){var u=l[r](t);(e||(e=!i(u,c[r])))&&(f[r]=u,c[r]=u&&pn(u))}return e&&(a=o(t,n,n,f)),a},e,r,s)}function a(t,e,n,r){var i,o;return i=t.$watch(function(t){return r(t)},function(t,n,r){o=t,S(e)&&e.apply(this,arguments),b(t)&&r.$$postDigest(function(){b(o)&&i()})},n)}function l(t,e,n,r){function i(t){var e=!0;return o(t,function(t){b(t)||(e=!1)}),e}var s,a;return s=t.$watch(function(t){return r(t)},function(t,n,r){a=t,S(e)&&e.call(this,t,n,r),i(t)&&r.$$postDigest(function(){i(a)&&s()})},n)}function u(t,e,n,r){var i;return i=t.$watch(function(t){return r(t)},function(t,n,r){S(e)&&e.apply(this,arguments),i()},n)}function c(t,e){if(!e)return t;var n=t.$$watchDelegate,r=!1,i=n!==l&&n!==a,o=i?function(n,i,o,s){var a=r&&s?s[0]:t(n,i,o,s);return e(a,n,i)}:function(n,r,i,o){var s=t(n,r,i,o),a=e(s,n,r);return b(s)?a:s};return t.$$watchDelegate&&t.$$watchDelegate!==s?o.$$watchDelegate=t.$$watchDelegate:e.$stateful||(o.$$watchDelegate=s,r=!t.inputs,o.inputs=t.inputs?t.inputs:[t]),o}var f=Ur().noUnsafeEval,p={csp:f,expensiveChecks:!1},h={csp:f,expensiveChecks:!0};return function(n,i,o){var f,d,v;switch(typeof n){case"string":n=n.trim(),v=n;var g=o?e:t;if(f=g[v],!f){":"===n.charAt(0)&&":"===n.charAt(1)&&(d=!0,n=n.substring(2));var y=o?h:p,$=new ro(y),b=new oo($,r,y);f=b.parse(n),f.constant?f.$$watchDelegate=u:d?f.$$watchDelegate=f.literal?l:a:f.inputs&&(f.$$watchDelegate=s),g[v]=f}return c(f,i);case"function":return c(n,i);default:return m}}}]}function dn(){this.$get=["$rootScope","$exceptionHandler",function(t,e){return vn(function(e){t.$evalAsync(e)},e)}]}function mn(){this.$get=["$browser","$exceptionHandler",function(t,e){return vn(function(e){t.defer(e)},e)}]}function vn(t,e){function i(t,e,n){function r(e){return function(n){i||(i=!0,e.call(t,n))}}var i=!1;return[r(e),r(n)]}function s(){this.$$state={status:0}}function a(t,e){return function(n){e.call(t,n)}}function l(t){var r,i,o;o=t.pending,t.processScheduled=!1,t.pending=n;for(var s=0,a=o.length;a>s;++s){i=o[s][0],r=o[s][t.status];try{S(r)?i.resolve(r(t.value)):1===t.status?i.resolve(t.value):i.reject(t.value)}catch(l){i.reject(l),e(l)}}}function u(e){!e.processScheduled&&e.pending&&(e.processScheduled=!0,t(function(){l(e)}))}function c(){this.promise=new s,this.resolve=a(this,this.resolve),this.reject=a(this,this.reject),this.notify=a(this,this.notify)}function p(t){var e=new c,n=0,r=Vr(t)?[]:{};return o(t,function(t,i){n++,y(t).then(function(t){r.hasOwnProperty(i)||(r[i]=t,--n||e.resolve(r))},function(t){r.hasOwnProperty(i)||e.reject(t)})}),0===n&&e.resolve(r),e.promise}var h=r("$q",TypeError),d=function(){return new c};f(s.prototype,{then:function(t,e,n){if($(t)&&$(e)&&$(n))return this;var r=new c;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,t,e,n]),this.$$state.status>0&&u(this.$$state),r.promise},"catch":function(t){return this.then(null,t)},"finally":function(t,e){return this.then(function(e){return g(e,!0,t)},function(e){return g(e,!1,t)},e)}}),f(c.prototype,{resolve:function(t){this.promise.$$state.status||(t===this.promise?this.$$reject(h("qcycle","Expected promise to be resolved with value other than itself '{0}'",t)):this.$$resolve(t))},$$resolve:function(t){var n,r;r=i(this,this.$$resolve,this.$$reject);try{(w(t)||S(t))&&(n=t&&t.then),S(n)?(this.promise.$$state.status=-1,n.call(t,r[0],r[1],this.notify)):(this.promise.$$state.value=t,this.promise.$$state.status=1,u(this.promise.$$state))}catch(o){r[1](o),e(o)}},reject:function(t){this.promise.$$state.status||this.$$reject(t)},$$reject:function(t){this.promise.$$state.value=t,this.promise.$$state.status=2,u(this.promise.$$state)},notify:function(n){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&t(function(){for(var t,i,o=0,s=r.length;s>o;o++){i=r[o][0],t=r[o][3];try{i.notify(S(t)?t(n):n)}catch(a){e(a)}}})}});var m=function(t){var e=new c;return e.reject(t),e.promise},v=function(t,e){var n=new c;return e?n.resolve(t):n.reject(t),n.promise},g=function(t,e,n){var r=null;try{S(n)&&(r=n())}catch(i){return v(i,!1)}return D(r)?r.then(function(){return v(t,e)},function(t){return v(t,!1)}):v(t,e)},y=function(t,e,n,r){var i=new c;return i.resolve(t),i.promise.then(e,n,r)},b=y,x=function _(t){function e(t){r.resolve(t)}function n(t){r.reject(t)}if(!S(t))throw h("norslvr","Expected resolverFn, got '{0}'",t);if(!(this instanceof _))return new _(t);var r=new c;return t(e,n),r.promise};return x.defer=d,x.reject=m,x.when=y,x.resolve=b,x.all=p,x}function gn(){this.$get=["$window","$timeout",function(t,e){var n=t.requestAnimationFrame||t.webkitRequestAnimationFrame,r=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(t){var e=n(t);return function(){r(e)}}:function(t){var n=e(t,16.66,!1);return function(){e.cancel(n)}};return o.supported=i,o}]}function yn(){function t(t){function e(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=l(),this.$$ChildScope=null}return e.prototype=t,e}var e=10,n=r("$rootScope"),s=null,a=null;this.digestTtl=function(t){return arguments.length&&(e=t),e},this.$get=["$injector","$exceptionHandler","$parse","$browser",function(r,u,c,f){function p(t){t.currentScope.$$destroyed=!0}function h(t){9===Er&&(t.$$childHead&&h(t.$$childHead),t.$$nextSibling&&h(t.$$nextSibling)),t.$parent=t.$$nextSibling=t.$$prevSibling=t.$$childHead=t.$$childTail=t.$root=t.$$watchers=null}function d(){this.$id=l(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function v(t){if(C.$$phase)throw n("inprog","{0} already in progress",C.$$phase);C.$$phase=t}function g(){C.$$phase=null}function y(t,e){do t.$$watchersCount+=e;while(t=t.$parent)}function b(t,e,n){do t.$$listenerCount[n]-=e,0===t.$$listenerCount[n]&&delete t.$$listenerCount[n];while(t=t.$parent)}function x(){}function _(){for(;A.length;)try{A.shift()()}catch(t){u(t)}a=null}function T(){null===a&&(a=f.defer(function(){C.$apply(_)}))}d.prototype={constructor:d,$new:function(e,n){var r;return n=n||this,e?(r=new d,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=t(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(e||n!=this)&&r.$on("$destroy",p),r},$watch:function(t,e,n,r){var i=c(t);if(i.$$watchDelegate)return i.$$watchDelegate(this,e,n,i,t);var o=this,a=o.$$watchers,l={fn:e,last:x,get:i,exp:r||t,eq:!!n};return s=null,S(e)||(l.fn=m),a||(a=o.$$watchers=[]),a.unshift(l),y(this,1),function(){F(a,l)>=0&&y(o,-1),s=null}},$watchGroup:function(t,e){function n(){l=!1,u?(u=!1,e(i,i,a)):e(i,r,a)}var r=new Array(t.length),i=new Array(t.length),s=[],a=this,l=!1,u=!0;if(!t.length){var c=!0;return a.$evalAsync(function(){c&&e(i,i,a)}),function(){c=!1}}return 1===t.length?this.$watch(t[0],function(t,n,o){i[0]=t,r[0]=n,e(i,t===n?i:r,o)}):(o(t,function(t,e){var o=a.$watch(t,function(t,o){i[e]=t,r[e]=o,l||(l=!0,a.$evalAsync(n))});s.push(o)}),function(){for(;s.length;)s.shift()()})},$watchCollection:function(t,e){function n(t){o=t;var e,n,r,a,l;if(!$(o)){if(w(o))if(i(o)){s!==h&&(s=h,v=s.length=0,f++),e=o.length,v!==e&&(f++,s.length=v=e);for(var u=0;e>u;u++)l=s[u],a=o[u],r=l!==l&&a!==a,r||l===a||(f++,s[u]=a)}else{s!==d&&(s=d={},v=0,f++),e=0;for(n in o)Tr.call(o,n)&&(e++,a=o[n],l=s[n],n in s?(r=l!==l&&a!==a,r||l===a||(f++,s[n]=a)):(v++,s[n]=a,f++));if(v>e){f++;for(n in s)Tr.call(o,n)||(v--,delete s[n])}}else s!==o&&(s=o,f++);return f}}function r(){if(m?(m=!1,e(o,o,l)):e(o,a,l),u)if(w(o))if(i(o)){a=new Array(o.length);for(var t=0;t<o.length;t++)a[t]=o[t]}else{a={};for(var n in o)Tr.call(o,n)&&(a[n]=o[n])}else a=o}n.$stateful=!0;var o,s,a,l=this,u=e.length>1,f=0,p=c(t,n),h=[],d={},m=!0,v=0;return this.$watch(p,r)},$digest:function(){var t,r,i,o,l,c,p,h,d,m,y=e,$=this,b=[];v("$digest"),f.$$checkUrlChange(),this===C&&null!==a&&(f.defer.cancel(a),_()),s=null;do{for(c=!1,h=$;k.length;){try{m=k.shift(),m.scope.$eval(m.expression,m.locals)}catch(w){u(w)}s=null}t:do{if(o=h.$$watchers)for(l=o.length;l--;)try{if(t=o[l])if((r=t.get(h))===(i=t.last)||(t.eq?H(r,i):"number"==typeof r&&"number"==typeof i&&isNaN(r)&&isNaN(i))){if(t===s){c=!1;break t}}else c=!0,s=t,t.last=t.eq?L(r,null):r,t.fn(r,i===x?r:i,h),5>y&&(d=4-y,b[d]||(b[d]=[]),b[d].push({msg:S(t.exp)?"fn: "+(t.exp.name||t.exp.toString()):t.exp,newVal:r,oldVal:i}))}catch(w){u(w)}if(!(p=h.$$watchersCount&&h.$$childHead||h!==$&&h.$$nextSibling))for(;h!==$&&!(p=h.$$nextSibling);)h=h.$parent}while(h=p);if((c||k.length)&&!y--)throw g(),n("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",e,b)}while(c||k.length);for(g();E.length;)try{E.shift()()}catch(w){u(w)}},$destroy:function(){if(!this.$$destroyed){var t=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===C&&f.$$applicationDestroyed(),y(this,-this.$$watchersCount);for(var e in this.$$listenerCount)b(this,this.$$listenerCount[e],e);t&&t.$$childHead==this&&(t.$$childHead=this.$$nextSibling),t&&t.$$childTail==this&&(t.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=m,this.$on=this.$watch=this.$watchGroup=function(){return m},this.$$listeners={},this.$$nextSibling=null,h(this)}},$eval:function(t,e){return c(t)(this,e)},$evalAsync:function(t,e){C.$$phase||k.length||f.defer(function(){k.length&&C.$digest()}),k.push({scope:this,expression:t,locals:e})},$$postDigest:function(t){E.push(t)},$apply:function(t){try{v("$apply");try{return this.$eval(t)}finally{g()}}catch(e){u(e)}finally{try{C.$digest()}catch(e){throw u(e),e}}},$applyAsync:function(t){function e(){n.$eval(t)}var n=this;t&&A.push(e),T()},$on:function(t,e){var n=this.$$listeners[t];n||(this.$$listeners[t]=n=[]),n.push(e);var r=this;do r.$$listenerCount[t]||(r.$$listenerCount[t]=0),r.$$listenerCount[t]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(e);-1!==r&&(n[r]=null,b(i,1,t))}},$emit:function(t,e){var n,r,i,o=[],s=this,a=!1,l={name:t,targetScope:s,stopPropagation:function(){a=!0},preventDefault:function(){l.defaultPrevented=!0},defaultPrevented:!1},c=B([l],arguments,1);do{for(n=s.$$listeners[t]||o,l.currentScope=s,r=0,i=n.length;i>r;r++)if(n[r])try{n[r].apply(null,c)}catch(f){u(f)}else n.splice(r,1),r--,i--;if(a)return l.currentScope=null,l;s=s.$parent}while(s);return l.currentScope=null,l},$broadcast:function(t,e){var n=this,r=n,i=n,o={name:t,targetScope:n,preventDefault:function(){o.defaultPrevented=!0},defaultPrevented:!1};if(!n.$$listenerCount[t])return o;for(var s,a,l,c=B([o],arguments,1);r=i;){for(o.currentScope=r,s=r.$$listeners[t]||[],a=0,l=s.length;l>a;a++)if(s[a])try{s[a].apply(null,c)}catch(f){u(f)}else s.splice(a,1),a--,l--;if(!(i=r.$$listenerCount[t]&&r.$$childHead||r!==n&&r.$$nextSibling))for(;r!==n&&!(i=r.$$nextSibling);)r=r.$parent}return o.currentScope=null,o}};var C=new d,k=C.$$asyncQueue=[],E=C.$$postDigestQueue=[],A=C.$$applyAsyncQueue=[];return C}]}function $n(){var t=/^\s*(https?|ftp|mailto|tel|file):/,e=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(e){return b(e)?(t=e,this):t},this.imgSrcSanitizationWhitelist=function(t){return b(t)?(e=t,this):e},this.$get=function(){return function(n,r){var i,o=r?e:t;return i=En(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function bn(t){if("self"===t)return t;if(_(t)){if(t.indexOf("***")>-1)throw ao("iwcard","Illegal sequence *** in string matcher.  String: {0}",t);return t=zr(t).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+t+"$")}if(k(t))return new RegExp("^"+t.source+"$");throw ao("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function wn(t){var e=[];return b(t)&&o(t,function(t){e.push(bn(t))}),e}function xn(){this.SCE_CONTEXTS=lo;var t=["self"],e=[];this.resourceUrlWhitelist=function(e){return arguments.length&&(t=wn(e)),t},this.resourceUrlBlacklist=function(t){return arguments.length&&(e=wn(t)),e},this.$get=["$injector",function(n){function r(t,e){return"self"===t?An(e):!!t.exec(e.href)}function i(n){var i,o,s=En(n.toString()),a=!1;for(i=0,o=t.length;o>i;i++)if(r(t[i],s)){a=!0;break}if(a)for(i=0,o=e.length;o>i;i++)if(r(e[i],s)){a=!1;break}return a}function o(t){var e=function(t){this.$$unwrapTrustedValue=function(){return t}};return t&&(e.prototype=new t),e.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},e.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},e}function s(t,e){var n=f.hasOwnProperty(t)?f[t]:null;if(!n)throw ao("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",t,e);if(null===e||$(e)||""===e)return e;if("string"!=typeof e)throw ao("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",t);return new n(e)}function a(t){return t instanceof c?t.$$unwrapTrustedValue():t}function l(t,e){if(null===e||$(e)||""===e)return e;var n=f.hasOwnProperty(t)?f[t]:null;if(n&&e instanceof n)return e.$$unwrapTrustedValue();if(t===lo.RESOURCE_URL){if(i(e))return e;throw ao("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",e.toString())}if(t===lo.HTML)return u(e);throw ao("unsafe","Attempting to use an unsafe value in a safe context.")}var u=function(t){throw ao("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(u=n.get("$sanitize"));var c=o(),f={};return f[lo.HTML]=o(c),f[lo.CSS]=o(c),f[lo.URL]=o(c),f[lo.JS]=o(c),f[lo.RESOURCE_URL]=o(f[lo.URL]),{trustAs:s,getTrusted:l,valueOf:a}}]}function _n(){var t=!0;this.enabled=function(e){return arguments.length&&(t=!!e),t},this.$get=["$parse","$sceDelegate",function(e,n){if(t&&8>Er)throw ao("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=V(lo);r.isEnabled=function(){return t},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,t||(r.trustAs=r.getTrusted=function(t,e){return e},r.valueOf=v),r.parseAs=function(t,n){var i=e(n);return i.literal&&i.constant?i:e(n,function(e){
return r.getTrusted(t,e)})};var i=r.parseAs,s=r.getTrusted,a=r.trustAs;return o(lo,function(t,e){var n=_r(e);r[xt("parse_as_"+n)]=function(e){return i(t,e)},r[xt("get_trusted_"+n)]=function(e){return s(t,e)},r[xt("trust_as_"+n)]=function(e){return a(t,e)}}),r}]}function Tn(){this.$get=["$window","$document",function(t,e){var n,r,i={},o=h((/android (\d+)/.exec(_r((t.navigator||{}).userAgent))||[])[1]),s=/Boxee/i.test((t.navigator||{}).userAgent),a=e[0]||{},l=/^(Moz|webkit|ms)(?=[A-Z])/,u=a.body&&a.body.style,c=!1,f=!1;if(u){for(var p in u)if(r=l.exec(p)){n=r[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in u&&"webkit"),c=!!("transition"in u||n+"Transition"in u),f=!!("animation"in u||n+"Animation"in u),!o||c&&f||(c=_(u.webkitTransition),f=_(u.webkitAnimation))}return{history:!(!t.history||!t.history.pushState||4>o||s),hasEvent:function(t){if("input"===t&&11>=Er)return!1;if($(i[t])){var e=a.createElement("div");i[t]="on"+t in e}return i[t]},csp:Ur(),vendorPrefix:n,transitions:c,animations:f,android:o}}]}function Cn(){this.$get=["$templateCache","$http","$q","$sce",function(t,e,n,r){function i(o,s){function a(t){if(!s)throw Di("tpload","Failed to load template: {0} (HTTP status: {1} {2})",o,t.status,t.statusText);return n.reject(t)}i.totalPendingRequests++,_(o)&&t.get(o)||(o=r.getTrustedResourceUrl(o));var l=e.defaults&&e.defaults.transformResponse;Vr(l)?l=l.filter(function(t){return t!==we}):l===we&&(l=null);var u={cache:t,transformResponse:l};return e.get(o,u)["finally"](function(){i.totalPendingRequests--}).then(function(e){return t.put(o,e.data),e.data},a)}return i.totalPendingRequests=0,i}]}function Sn(){this.$get=["$rootScope","$browser","$location",function(t,e,n){var r={};return r.findBindings=function(t,e,n){var r=t.getElementsByClassName("ng-binding"),i=[];return o(r,function(t){var r=qr.element(t).data("$binding");r&&o(r,function(r){if(n){var o=new RegExp("(^|\\s)"+zr(e)+"(\\s|\\||$)");o.test(r)&&i.push(t)}else-1!=r.indexOf(e)&&i.push(t)})}),i},r.findModels=function(t,e,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",s="["+r[i]+"model"+o+'"'+e+'"]',a=t.querySelectorAll(s);if(a.length)return a}},r.getLocation=function(){return n.url()},r.setLocation=function(e){e!==n.url()&&(n.url(e),t.$digest())},r.whenStable=function(t){e.notifyWhenNoOutstandingRequests(t)},r}]}function kn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(t,e,n,r,i){function o(o,a,l){S(o)||(l=a,a=o,o=m);var u,c=z(arguments,3),f=b(l)&&!l,p=(f?r:n).defer(),h=p.promise;return u=e.defer(function(){try{p.resolve(o.apply(null,c))}catch(e){p.reject(e),i(e)}finally{delete s[h.$$timeoutId]}f||t.$apply()},a),h.$$timeoutId=u,s[u]=p,h}var s={};return o.cancel=function(t){return t&&t.$$timeoutId in s?(s[t.$$timeoutId].reject("canceled"),delete s[t.$$timeoutId],e.defer.cancel(t.$$timeoutId)):!1},o}]}function En(t){var e=t;return Er&&(uo.setAttribute("href",e),e=uo.href),uo.setAttribute("href",e),{href:uo.href,protocol:uo.protocol?uo.protocol.replace(/:$/,""):"",host:uo.host,search:uo.search?uo.search.replace(/^\?/,""):"",hash:uo.hash?uo.hash.replace(/^#/,""):"",hostname:uo.hostname,port:uo.port,pathname:"/"===uo.pathname.charAt(0)?uo.pathname:"/"+uo.pathname}}function An(t){var e=_(t)?En(t):t;return e.protocol===co.protocol&&e.host===co.host}function On(){this.$get=g(t)}function jn(t){function e(t){try{return decodeURIComponent(t)}catch(e){return t}}var n=t[0]||{},r={},i="";return function(){var t,o,s,a,l,u=n.cookie||"";if(u!==i)for(i=u,t=i.split("; "),r={},s=0;s<t.length;s++)o=t[s],a=o.indexOf("="),a>0&&(l=e(o.substring(0,a)),$(r[l])&&(r[l]=e(o.substring(a+1))));return r}}function Pn(){this.$get=jn}function Nn(t){function e(r,i){if(w(r)){var s={};return o(r,function(t,n){s[n]=e(n,t)}),s}return t.factory(r+n,i)}var n="Filter";this.register=e,this.$get=["$injector",function(t){return function(e){return t.get(e+n)}}],e("currency",qn),e("date",Zn),e("filter",Dn),e("json",Kn),e("limitTo",Jn),e("lowercase",vo),e("number",Fn),e("orderBy",tr),e("uppercase",go)}function Dn(){return function(t,e,n){if(!i(t)){if(null==t)return t;throw r("filter")("notarray","Expected array but received: {0}",t)}var o,s,a=Rn(e);switch(a){case"function":o=e;break;case"boolean":case"null":case"number":case"string":s=!0;case"object":o=Mn(e,n,s);break;default:return t}return Array.prototype.filter.call(t,o)}}function Mn(t,e,n){var r,i=w(t)&&"$"in t;return e===!0?e=H:S(e)||(e=function(t,e){return $(t)?!1:null===t||null===e?t===e:w(e)||w(t)&&!y(t)?!1:(t=_r(""+t),e=_r(""+e),-1!==t.indexOf(e))}),r=function(r){return i&&!w(r)?In(r,t.$,e,!1):In(r,t,e,n)}}function In(t,e,n,r,i){var o=Rn(t),s=Rn(e);if("string"===s&&"!"===e.charAt(0))return!In(t,e.substring(1),n,r);if(Vr(t))return t.some(function(t){return In(t,e,n,r)});switch(o){case"object":var a;if(r){for(a in t)if("$"!==a.charAt(0)&&In(t[a],e,n,!0))return!0;return i?!1:In(t,e,n,!1)}if("object"===s){for(a in e){var l=e[a];if(!S(l)&&!$(l)){var u="$"===a,c=u?t:t[a];if(!In(c,l,n,u,u))return!1}}return!0}return n(t,e);case"function":return!1;default:return n(t,e)}}function Rn(t){return null===t?"null":typeof t}function qn(t){var e=t.NUMBER_FORMATS;return function(t,n,r){return $(n)&&(n=e.CURRENCY_SYM),$(r)&&(r=e.PATTERNS[1].maxFrac),null==t?t:Ln(t,e.PATTERNS[1],e.GROUP_SEP,e.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function Fn(t){var e=t.NUMBER_FORMATS;return function(t,n){return null==t?t:Ln(t,e.PATTERNS[0],e.GROUP_SEP,e.DECIMAL_SEP,n)}}function Ln(t,e,n,r,i){if(w(t))return"";var o=0>t;t=Math.abs(t);var s=t===1/0;if(!s&&!isFinite(t))return"";var a=t+"",l="",u=!1,c=[];if(s&&(l="∞"),!s&&-1!==a.indexOf("e")){var f=a.match(/([\d\.]+)e(-?)(\d+)/);f&&"-"==f[2]&&f[3]>i+1?t=0:(l=a,u=!0)}if(s||u)i>0&&1>t&&(l=t.toFixed(i),t=parseFloat(l),l=l.replace(fo,r));else{var p=(a.split(fo)[1]||"").length;$(i)&&(i=Math.min(Math.max(e.minFrac,p),e.maxFrac)),t=+(Math.round(+(t.toString()+"e"+i)).toString()+"e"+-i);var h=(""+t).split(fo),d=h[0];h=h[1]||"";var m,v=0,g=e.lgSize,y=e.gSize;if(d.length>=g+y)for(v=d.length-g,m=0;v>m;m++)(v-m)%y===0&&0!==m&&(l+=n),l+=d.charAt(m);for(m=v;m<d.length;m++)(d.length-m)%g===0&&0!==m&&(l+=n),l+=d.charAt(m);for(;h.length<i;)h+="0";i&&"0"!==i&&(l+=r+h.substr(0,i))}return 0===t&&(o=!1),c.push(o?e.negPre:e.posPre,l,o?e.negSuf:e.posSuf),c.join("")}function Vn(t,e,n){var r="";for(0>t&&(r="-",t=-t),t=""+t;t.length<e;)t="0"+t;return n&&(t=t.substr(t.length-e)),r+t}function Hn(t,e,n,r){return n=n||0,function(i){var o=i["get"+t]();return(n>0||o>-n)&&(o+=n),0===o&&-12==n&&(o=12),Vn(o,e,r)}}function Bn(t,e){return function(n,r){var i=n["get"+t](),o=Cr(e?"SHORT"+t:t);return r[o][i]}}function zn(t,e,n){var r=-1*n,i=r>=0?"+":"";return i+=Vn(Math[r>0?"floor":"ceil"](r/60),2)+Vn(Math.abs(r%60),2)}function Un(t){var e=new Date(t,0,1).getDay();return new Date(t,0,(4>=e?5:12)-e)}function Wn(t){return new Date(t.getFullYear(),t.getMonth(),t.getDate()+(4-t.getDay()))}function Xn(t){return function(e){var n=Un(e.getFullYear()),r=Wn(e),i=+r-+n,o=1+Math.round(i/6048e5);return Vn(o,t)}}function Yn(t,e){return t.getHours()<12?e.AMPMS[0]:e.AMPMS[1]}function Gn(t,e){return t.getFullYear()<=0?e.ERAS[0]:e.ERAS[1]}function Qn(t,e){return t.getFullYear()<=0?e.ERANAMES[0]:e.ERANAMES[1]}function Zn(t){function e(t){var e;if(e=t.match(n)){var r=new Date(0),i=0,o=0,s=e[8]?r.setUTCFullYear:r.setFullYear,a=e[8]?r.setUTCHours:r.setHours;e[9]&&(i=h(e[9]+e[10]),o=h(e[9]+e[11])),s.call(r,h(e[1]),h(e[2])-1,h(e[3]));var l=h(e[4]||0)-i,u=h(e[5]||0)-o,c=h(e[6]||0),f=Math.round(1e3*parseFloat("0."+(e[7]||0)));return a.call(r,l,u,c,f),r}return t}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var s,a,l="",u=[];if(r=r||"mediumDate",r=t.DATETIME_FORMATS[r]||r,_(n)&&(n=mo.test(n)?h(n):e(n)),T(n)&&(n=new Date(n)),!C(n)||!isFinite(n.getTime()))return n;for(;r;)a=ho.exec(r),a?(u=B(u,a,1),r=u.pop()):(u.push(r),r=null);var c=n.getTimezoneOffset();return i&&(c=G(i,n.getTimezoneOffset()),n=Z(n,i,!0)),o(u,function(e){s=po[e],l+=s?s(n,t.DATETIME_FORMATS,c):e.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),l}}function Kn(){return function(t,e){return $(e)&&(e=2),X(t,e)}}function Jn(){return function(t,e,n){return e=Math.abs(Number(e))===1/0?Number(e):h(e),isNaN(e)?t:(T(t)&&(t=t.toString()),Vr(t)||_(t)?(n=!n||isNaN(n)?0:h(n),n=0>n?Math.max(0,t.length+n):n,e>=0?t.slice(n,n+e):0===n?t.slice(e,t.length):t.slice(Math.max(0,n+e),n)):t)}}function tr(t){function e(e,n){return n=n?-1:1,e.map(function(e){var r=1,i=v;if(S(e))i=e;else if(_(e)&&(("+"==e.charAt(0)||"-"==e.charAt(0))&&(r="-"==e.charAt(0)?-1:1,e=e.substring(1)),""!==e&&(i=t(e),i.constant))){var o=i();i=function(t){return t[o]}}return{get:i,descending:r*n}})}function n(t){switch(typeof t){case"number":case"boolean":case"string":return!0;default:return!1}}function r(t,e){return"function"==typeof t.valueOf&&(t=t.valueOf(),n(t))?t:y(t)&&(t=t.toString(),n(t))?t:e}function o(t,e){var n=typeof t;return null===t?(n="string",t="null"):"string"===n?t=t.toLowerCase():"object"===n&&(t=r(t,e)),{value:t,type:n}}function s(t,e){var n=0;return t.type===e.type?t.value!==e.value&&(n=t.value<e.value?-1:1):n=t.type<e.type?-1:1,n}return function(t,n,r){function a(t,e){return{value:t,predicateValues:u.map(function(n){return o(n.get(t),e)})}}function l(t,e){for(var n=0,r=0,i=u.length;i>r&&!(n=s(t.predicateValues[r],e.predicateValues[r])*u[r].descending);++r);return n}if(!i(t))return t;Vr(n)||(n=[n]),0===n.length&&(n=["+"]);var u=e(n,r);u.push({get:function(){return{}},descending:r?-1:1});var c=Array.prototype.map.call(t,a);return c.sort(l),t=c.map(function(t){return t.value})}}function er(t){return S(t)&&(t={link:t}),t.restrict=t.restrict||"AC",g(t)}function nr(t,e){t.$name=e}function rr(t,e,r,i,s){var a=this,l=[];a.$error={},a.$$success={},a.$pending=n,a.$name=s(e.name||e.ngForm||"")(r),a.$dirty=!1,a.$pristine=!0,a.$valid=!0,a.$invalid=!1,a.$submitted=!1,a.$$parentForm=bo,a.$rollbackViewValue=function(){o(l,function(t){t.$rollbackViewValue()})},a.$commitViewValue=function(){o(l,function(t){t.$commitViewValue()})},a.$addControl=function(t){ht(t.$name,"input"),l.push(t),t.$name&&(a[t.$name]=t),t.$$parentForm=a},a.$$renameControl=function(t,e){var n=t.$name;a[n]===t&&delete a[n],a[e]=t,t.$name=e},a.$removeControl=function(t){t.$name&&a[t.$name]===t&&delete a[t.$name],o(a.$pending,function(e,n){a.$setValidity(n,null,t)}),o(a.$error,function(e,n){a.$setValidity(n,null,t)}),o(a.$$success,function(e,n){a.$setValidity(n,null,t)}),F(l,t),t.$$parentForm=bo},yr({ctrl:this,$element:t,set:function(t,e,n){var r=t[e];if(r){var i=r.indexOf(n);-1===i&&r.push(n)}else t[e]=[n]},unset:function(t,e,n){var r=t[e];r&&(F(r,n),0===r.length&&delete t[e])},$animate:i}),a.$setDirty=function(){i.removeClass(t,ns),i.addClass(t,rs),a.$dirty=!0,a.$pristine=!1,a.$$parentForm.$setDirty()},a.$setPristine=function(){i.setClass(t,ns,rs+" "+wo),a.$dirty=!1,a.$pristine=!0,a.$submitted=!1,o(l,function(t){t.$setPristine()})},a.$setUntouched=function(){o(l,function(t){t.$setUntouched()})},a.$setSubmitted=function(){i.addClass(t,wo),a.$submitted=!0,a.$$parentForm.$setSubmitted()}}function ir(t){t.$formatters.push(function(e){return t.$isEmpty(e)?e:e.toString()})}function or(t,e,n,r,i,o){sr(t,e,n,r,i,o),ir(r)}function sr(t,e,n,r,i,o){var s=_r(e[0].type);if(!i.android){var a=!1;e.on("compositionstart",function(t){a=!0}),e.on("compositionend",function(){a=!1,l()})}var l=function(t){if(u&&(o.defer.cancel(u),u=null),!a){var i=e.val(),l=t&&t.type;"password"===s||n.ngTrim&&"false"===n.ngTrim||(i=Br(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,l)}};if(i.hasEvent("input"))e.on("input",l);else{var u,c=function(t,e,n){u||(u=o.defer(function(){u=null,e&&e.value===n||l(t)}))};e.on("keydown",function(t){var e=t.keyCode;91===e||e>15&&19>e||e>=37&&40>=e||c(t,this,this.value)}),i.hasEvent("paste")&&e.on("paste cut",c)}e.on("change",l),r.$render=function(){var t=r.$isEmpty(r.$viewValue)?"":r.$viewValue;e.val()!==t&&e.val(t)}}function ar(t,e){if(C(t))return t;if(_(t)){jo.lastIndex=0;var n=jo.exec(t);if(n){var r=+n[1],i=+n[2],o=0,s=0,a=0,l=0,u=Un(r),c=7*(i-1);return e&&(o=e.getHours(),s=e.getMinutes(),a=e.getSeconds(),l=e.getMilliseconds()),new Date(r,0,u.getDate()+c,o,s,a,l)}}return NaN}function lr(t,e){return function(n,r){var i,s;if(C(n))return n;if(_(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),Co.test(n))return new Date(n);if(t.lastIndex=0,i=t.exec(n))return i.shift(),s=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(t,n){n<e.length&&(s[e[n]]=+t)}),new Date(s.yyyy,s.MM-1,s.dd,s.HH,s.mm,s.ss||0,1e3*s.sss||0)}return NaN}}function ur(t,e,r,i){return function(o,s,a,l,u,c,f){function p(t){return t&&!(t.getTime&&t.getTime()!==t.getTime())}function h(t){return b(t)&&!C(t)?r(t)||n:t}cr(o,s,a,l),sr(o,s,a,l,u,c);var d,m=l&&l.$options&&l.$options.timezone;if(l.$$parserName=t,l.$parsers.push(function(t){if(l.$isEmpty(t))return null;if(e.test(t)){var i=r(t,d);return m&&(i=Z(i,m)),i}return n}),l.$formatters.push(function(t){if(t&&!C(t))throw as("datefmt","Expected `{0}` to be a date",t);return p(t)?(d=t,d&&m&&(d=Z(d,m,!0)),f("date")(t,i,m)):(d=null,"")}),b(a.min)||a.ngMin){var v;l.$validators.min=function(t){return!p(t)||$(v)||r(t)>=v},a.$observe("min",function(t){v=h(t),l.$validate()})}if(b(a.max)||a.ngMax){var g;l.$validators.max=function(t){return!p(t)||$(g)||r(t)<=g},a.$observe("max",function(t){g=h(t),l.$validate()})}}}function cr(t,e,r,i){var o=e[0],s=i.$$hasNativeValidators=w(o.validity);s&&i.$parsers.push(function(t){var r=e.prop(xr)||{};return r.badInput&&!r.typeMismatch?n:t})}function fr(t,e,r,i,o,s){if(cr(t,e,r,i),sr(t,e,r,i,o,s),i.$$parserName="number",i.$parsers.push(function(t){return i.$isEmpty(t)?null:Eo.test(t)?parseFloat(t):n}),i.$formatters.push(function(t){if(!i.$isEmpty(t)){if(!T(t))throw as("numfmt","Expected `{0}` to be a number",t);t=t.toString()}return t}),b(r.min)||r.ngMin){var a;i.$validators.min=function(t){return i.$isEmpty(t)||$(a)||t>=a},r.$observe("min",function(t){b(t)&&!T(t)&&(t=parseFloat(t,10)),a=T(t)&&!isNaN(t)?t:n,i.$validate()})}if(b(r.max)||r.ngMax){var l;i.$validators.max=function(t){return i.$isEmpty(t)||$(l)||l>=t},r.$observe("max",function(t){b(t)&&!T(t)&&(t=parseFloat(t,10)),l=T(t)&&!isNaN(t)?t:n,i.$validate()})}}function pr(t,e,n,r,i,o){sr(t,e,n,r,i,o),ir(r),r.$$parserName="url",r.$validators.url=function(t,e){var n=t||e;return r.$isEmpty(n)||So.test(n)}}function hr(t,e,n,r,i,o){sr(t,e,n,r,i,o),ir(r),r.$$parserName="email",r.$validators.email=function(t,e){var n=t||e;return r.$isEmpty(n)||ko.test(n)}}function dr(t,e,n,r){$(n.name)&&e.attr("name",l());var i=function(t){e[0].checked&&r.$setViewValue(n.value,t&&t.type)};e.on("click",i),r.$render=function(){var t=n.value;e[0].checked=t==r.$viewValue},n.$observe("value",r.$render)}function mr(t,e,n,r,i){var o;if(b(r)){if(o=t(r),!o.constant)throw as("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(e)}return i}function vr(t,e,n,r,i,o,s,a){var l=mr(a,t,"ngTrueValue",n.ngTrueValue,!0),u=mr(a,t,"ngFalseValue",n.ngFalseValue,!1),c=function(t){r.$setViewValue(e[0].checked,t&&t.type)};e.on("click",c),r.$render=function(){e[0].checked=r.$viewValue},r.$isEmpty=function(t){return t===!1},r.$formatters.push(function(t){return H(t,l)}),r.$parsers.push(function(t){return t?l:u})}function gr(t,e){return t="ngClass"+t,["$animate",function(n){function r(t,e){var n=[];t:for(var r=0;r<t.length;r++){for(var i=t[r],o=0;o<e.length;o++)if(i==e[o])continue t;n.push(i)}return n}function i(t){var e=[];return Vr(t)?(o(t,function(t){e=e.concat(i(t))}),e):_(t)?t.split(" "):w(t)?(o(t,function(t,n){t&&(e=e.concat(n.split(" ")))}),e):t}return{restrict:"AC",link:function(s,a,l){function u(t){var e=f(t,1);l.$addClass(e)}function c(t){var e=f(t,-1);l.$removeClass(e)}function f(t,e){var n=a.data("$classCounts")||vt(),r=[];return o(t,function(t){(e>0||n[t])&&(n[t]=(n[t]||0)+e,n[t]===+(e>0)&&r.push(t))}),a.data("$classCounts",n),r.join(" ")}function p(t,e){var i=r(e,t),o=r(t,e);i=f(i,1),o=f(o,-1),i&&i.length&&n.addClass(a,i),o&&o.length&&n.removeClass(a,o)}function h(t){if(e===!0||s.$index%2===e){var n=i(t||[]);if(d){if(!H(t,d)){var r=i(d);p(r,n)}}else u(n)}d=V(t)}var d;s.$watch(l[t],h,!0),l.$observe("class",function(e){h(s.$eval(l[t]))}),"ngClass"!==t&&s.$watch("$index",function(n,r){var o=1&n;if(o!==(1&r)){var a=i(s.$eval(l[t]));o===e?u(a):c(a)}})}}}]}function yr(t){function e(t,e,l){$(e)?r("$pending",t,l):i("$pending",t,l),N(e)?e?(f(a.$error,t,l),c(a.$$success,t,l)):(c(a.$error,t,l),f(a.$$success,t,l)):(f(a.$error,t,l),f(a.$$success,t,l)),a.$pending?(o(ss,!0),a.$valid=a.$invalid=n,s("",null)):(o(ss,!1),a.$valid=$r(a.$error),a.$invalid=!a.$valid,s("",a.$valid));var u;u=a.$pending&&a.$pending[t]?n:a.$error[t]?!1:a.$$success[t]?!0:null,s(t,u),a.$$parentForm.$setValidity(t,u,a)}function r(t,e,n){a[t]||(a[t]={}),c(a[t],e,n)}function i(t,e,r){a[t]&&f(a[t],e,r),$r(a[t])&&(a[t]=n)}function o(t,e){e&&!u[t]?(p.addClass(l,t),u[t]=!0):!e&&u[t]&&(p.removeClass(l,t),u[t]=!1)}function s(t,e){t=t?"-"+ut(t,"-"):"",o(ts+t,e===!0),o(es+t,e===!1)}var a=t.ctrl,l=t.$element,u={},c=t.set,f=t.unset,p=t.$animate;u[es]=!(u[ts]=l.hasClass(ts)),a.$setValidity=e}function $r(t){if(t)for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function br(t){t[0].hasAttribute("selected")&&(t[0].selected=!0)}var wr=/^\/(.+)\/([a-z]*)$/,xr="validity",_r=function(t){return _(t)?t.toLowerCase():t},Tr=Object.prototype.hasOwnProperty,Cr=function(t){return _(t)?t.toUpperCase():t},Sr=function(t){return _(t)?t.replace(/[A-Z]/g,function(t){return String.fromCharCode(32|t.charCodeAt(0))}):t},kr=function(t){return _(t)?t.replace(/[a-z]/g,function(t){return String.fromCharCode(-33&t.charCodeAt(0))}):t};"i"!=="I".toLowerCase()&&(_r=Sr,Cr=kr);var Er,Ar,Or,jr,Pr=[].slice,Nr=[].splice,Dr=[].push,Mr=Object.prototype.toString,Ir=Object.getPrototypeOf,Rr=r("ng"),qr=t.angular||(t.angular={}),Fr=0;Er=e.documentMode,m.$inject=[],v.$inject=[];var Lr,Vr=Array.isArray,Hr=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,Br=function(t){return _(t)?t.trim():t},zr=function(t){return t.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},Ur=function(){function t(){try{return new Function(""),!1}catch(t){return!0}}if(!b(Ur.rules)){var n=e.querySelector("[ng-csp]")||e.querySelector("[data-ng-csp]");if(n){var r=n.getAttribute("ng-csp")||n.getAttribute("data-ng-csp");Ur.rules={noUnsafeEval:!r||-1!==r.indexOf("no-unsafe-eval"),noInlineStyle:!r||-1!==r.indexOf("no-inline-style")}}else Ur.rules={noUnsafeEval:t(),noInlineStyle:!1}}return Ur.rules},Wr=function(){if(b(Wr.name_))return Wr.name_;var t,n,r,i,o=Xr.length;for(n=0;o>n;++n)if(r=Xr[n],t=e.querySelector("["+r.replace(":","\\:")+"jq]")){i=t.getAttribute(r+"jq");break}return Wr.name_=i},Xr=["ng-","data-ng-","ng:","x-ng-"],Yr=/[A-Z]/g,Gr=!1,Qr=1,Zr=2,Kr=3,Jr=8,ti=9,ei=11,ni={full:"1.4.8",major:1,minor:4,dot:8,codeName:"ice-manipulation"};Et.expando="ng339";var ri=Et.cache={},ii=1,oi=function(t,e,n){t.addEventListener(e,n,!1)},si=function(t,e,n){t.removeEventListener(e,n,!1)};Et._data=function(t){return this.cache[t[this.expando]]||{}};var ai=/([\:\-\_]+(.))/g,li=/^moz([A-Z])/,ui={mouseleave:"mouseout",mouseenter:"mouseover"},ci=r("jqLite"),fi=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,pi=/<|&#?\w+;/,hi=/<([\w:-]+)/,di=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,mi={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};mi.optgroup=mi.option,mi.tbody=mi.tfoot=mi.colgroup=mi.caption=mi.thead,mi.th=mi.td;var vi=Node.prototype.contains||function(t){return!!(16&this.compareDocumentPosition(t))},gi=Et.prototype={ready:function(n){function r(){i||(i=!0,n())}var i=!1;"complete"===e.readyState?setTimeout(r):(this.on("DOMContentLoaded",r),Et(t).on("load",r))},toString:function(){var t=[];return o(this,function(e){t.push(""+e)}),"["+t.join(", ")+"]"},eq:function(t){return Ar(t>=0?this[t]:this[this.length+t])},length:0,push:Dr,sort:[].sort,splice:[].splice},yi={};o("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(t){yi[_r(t)]=t});var $i={};o("input,select,option,textarea,button,form,details".split(","),function(t){$i[t]=!0});var bi={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};o({data:Dt,removeData:Pt,hasData:Ct},function(t,e){Et[e]=t}),o({data:Dt,inheritedData:Lt,scope:function(t){return Ar.data(t,"$scope")||Lt(t.parentNode||t,["$isolateScope","$scope"])},isolateScope:function(t){return Ar.data(t,"$isolateScope")||Ar.data(t,"$isolateScopeNoTemplate")},controller:Ft,injector:function(t){return Lt(t,"$injector")},removeAttr:function(t,e){t.removeAttribute(e)},hasClass:Mt,css:function(t,e,n){return e=xt(e),b(n)?void(t.style[e]=n):t.style[e]},attr:function(t,e,r){var i=t.nodeType;if(i!==Kr&&i!==Zr&&i!==Jr){var o=_r(e);if(yi[o]){if(!b(r))return t[e]||(t.attributes.getNamedItem(e)||m).specified?o:n;r?(t[e]=!0,t.setAttribute(e,o)):(t[e]=!1,t.removeAttribute(o))}else if(b(r))t.setAttribute(e,r);else if(t.getAttribute){var s=t.getAttribute(e,2);return null===s?n:s}}},prop:function(t,e,n){return b(n)?void(t[e]=n):t[e]},text:function(){function t(t,e){if($(e)){var n=t.nodeType;return n===Qr||n===Kr?t.textContent:""}t.textContent=e}return t.$dv="",t}(),val:function(t,e){if($(e)){if(t.multiple&&"select"===q(t)){var n=[];return o(t.options,function(t){t.selected&&n.push(t.value||t.text)}),0===n.length?null:n}return t.value}t.value=e},html:function(t,e){return $(e)?t.innerHTML:(Ot(t,!0),void(t.innerHTML=e))},empty:Vt},function(t,e){Et.prototype[e]=function(e,n){var r,i,o=this.length;if(t!==Vt&&$(2==t.length&&t!==Mt&&t!==Ft?e:n)){if(w(e)){for(r=0;o>r;r++)if(t===Dt)t(this[r],e);else for(i in e)t(this[r],i,e[i]);return this}for(var s=t.$dv,a=$(s)?Math.min(o,1):o,l=0;a>l;l++){var u=t(this[l],e,n);s=s?s+u:u}return s}for(r=0;o>r;r++)t(this[r],e,n);return this}}),o({removeData:Pt,on:function(t,e,r,i){if(b(i))throw ci("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Tt(t)){var o=Nt(t,!0),s=o.events,a=o.handle;a||(a=o.handle=Wt(t,s));for(var l=e.indexOf(" ")>=0?e.split(" "):[e],u=l.length,c=function(e,n,i){var o=s[e];o||(o=s[e]=[],o.specialHandlerWrapper=n,"$destroy"===e||i||oi(t,e,a)),o.push(r)};u--;)e=l[u],ui[e]?(c(ui[e],Yt),c(e,n,!0)):c(e)}},off:jt,one:function(t,e,n){t=Ar(t),t.on(e,function r(){t.off(e,n),t.off(e,r)}),t.on(e,n)},replaceWith:function(t,e){var n,r=t.parentNode;Ot(t),o(new Et(e),function(e){n?r.insertBefore(e,n.nextSibling):r.replaceChild(e,t),n=e})},children:function(t){var e=[];return o(t.childNodes,function(t){t.nodeType===Qr&&e.push(t)}),e},contents:function(t){return t.contentDocument||t.childNodes||[]},append:function(t,e){var n=t.nodeType;if(n===Qr||n===ei){e=new Et(e);for(var r=0,i=e.length;i>r;r++){var o=e[r];t.appendChild(o)}}},prepend:function(t,e){if(t.nodeType===Qr){var n=t.firstChild;o(new Et(e),function(e){t.insertBefore(e,n)})}},wrap:function(t,e){e=Ar(e).eq(0).clone()[0];var n=t.parentNode;n&&n.replaceChild(e,t),e.appendChild(t)},remove:Ht,detach:function(t){Ht(t,!0)},after:function(t,e){var n=t,r=t.parentNode;e=new Et(e);for(var i=0,o=e.length;o>i;i++){var s=e[i];r.insertBefore(s,n.nextSibling),n=s}},addClass:Rt,removeClass:It,toggleClass:function(t,e,n){e&&o(e.split(" "),function(e){var r=n;$(r)&&(r=!Mt(t,e)),(r?Rt:It)(t,e)})},parent:function(t){var e=t.parentNode;return e&&e.nodeType!==ei?e:null},next:function(t){return t.nextElementSibling},find:function(t,e){return t.getElementsByTagName?t.getElementsByTagName(e):[]},clone:At,triggerHandler:function(t,e,n){var r,i,s,a=e.type||e,l=Nt(t),u=l&&l.events,c=u&&u[a];c&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:m,type:a,target:t},e.type&&(r=f(r,e)),i=V(c),s=n?[r].concat(n):[r],o(i,function(e){r.isImmediatePropagationStopped()||e.apply(t,s)}))}},function(t,e){Et.prototype[e]=function(e,n,r){for(var i,o=0,s=this.length;s>o;o++)$(i)?(i=t(this[o],e,n,r),b(i)&&(i=Ar(i))):qt(i,t(this[o],e,n,r));return b(i)?i:this},Et.prototype.bind=Et.prototype.on,Et.prototype.unbind=Et.prototype.off}),Zt.prototype={put:function(t,e){this[Qt(t,this.nextUid)]=e},get:function(t){return this[Qt(t,this.nextUid)]},remove:function(t){var e=this[t=Qt(t,this.nextUid)];return delete this[t],e}};var wi=[function(){this.$get=[function(){return Zt}]}],xi=/^[^\(]*\(\s*([^\)]*)\)/m,_i=/,/,Ti=/^\s*(_?)(\S+?)\1\s*$/,Ci=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Si=r("$injector");te.$$annotate=Jt;var ki=r("$animate"),Ei=1,Ai="ng-animate",Oi=function(){this.$get=["$q","$$rAF",function(t,e){function n(){}return n.all=m,n.chain=m,n.prototype={end:m,cancel:m,resume:m,pause:m,complete:m,then:function(n,r){return t(function(t){e(function(){t()})}).then(n,r)}},n}]},ji=function(){var t=new Zt,e=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function i(t,e,n){var r=!1;return e&&(e=_(e)?e.split(" "):Vr(e)?e:[],o(e,function(e){e&&(r=!0,t[e]=n)})),r}function s(){o(e,function(e){var n=t.get(e);if(n){var r=ie(e.attr("class")),i="",s="";o(n,function(t,e){var n=!!r[e];t!==n&&(t?i+=(i.length?" ":"")+e:s+=(s.length?" ":"")+e)}),o(e,function(t){i&&Rt(t,i),s&&It(t,s)}),t.remove(e)}}),e.length=0}function a(n,o,a){var l=t.get(n)||{},u=i(l,o,!0),c=i(l,a,!1);(u||c)&&(t.put(n,l),e.push(n),1===e.length&&r.$$postDigest(s))}return{enabled:m,on:m,off:m,pin:m,push:function(t,e,r,i){return i&&i(),r=r||{},r.from&&t.css(r.from),r.to&&t.css(r.to),(r.addClass||r.removeClass)&&a(t,r.addClass,r.removeClass),new n}}}]},Pi=["$provide",function(t){var e=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw ki("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";e.$$registeredAnimations[n.substr(1)]=i,t.factory(i,r)},this.classNameFilter=function(t){if(1===arguments.length&&(this.$$classNameFilter=t instanceof RegExp?t:null,this.$$classNameFilter)){var e=new RegExp("(\\s+|\\/)"+Ai+"(\\s+|\\/)");if(e.test(this.$$classNameFilter.toString()))throw ki("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',Ai)}return this.$$classNameFilter},this.$get=["$$animateQueue",function(t){function e(t,e,n){if(n){var r=re(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(t):e.prepend(t)}return{on:t.on,off:t.off,pin:t.pin,enabled:t.enabled,cancel:function(t){t.end&&t.end()},enter:function(n,r,i,o){return r=r&&Ar(r),i=i&&Ar(i),r=r||i.parent(),e(n,r,i),t.push(n,"enter",oe(o))},move:function(n,r,i,o){return r=r&&Ar(r),i=i&&Ar(i),r=r||i.parent(),e(n,r,i),t.push(n,"move",oe(o))},leave:function(e,n){return t.push(e,"leave",oe(n),function(){e.remove()})},addClass:function(e,n,r){return r=oe(r),r.addClass=ne(r.addclass,n),t.push(e,"addClass",r)},removeClass:function(e,n,r){return r=oe(r),r.removeClass=ne(r.removeClass,n),t.push(e,"removeClass",r)},setClass:function(e,n,r,i){return i=oe(i),i.addClass=ne(i.addClass,n),i.removeClass=ne(i.removeClass,r),t.push(e,"setClass",i)},animate:function(e,n,r,i,o){return o=oe(o),o.from=o.from?f(o.from,n):n,o.to=o.to?f(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=ne(o.tempClasses,i),t.push(e,"animate",o)}}}]}],Ni=function(){this.$get=["$$rAF","$q",function(t,e){var n=function(){};return n.prototype={done:function(t){this.defer&&this.defer[t===!0?"reject":"resolve"]()},end:function(){this.done()},cancel:function(){this.done(!0)},getPromise:function(){return this.defer||(this.defer=e.defer()),this.defer.promise},then:function(t,e){return this.getPromise().then(t,e)},"catch":function(t){return this.getPromise()["catch"](t)},"finally":function(t){return this.getPromise()["finally"](t)}},function(e,r){function i(){return t(function(){o(),s||a.done(),s=!0}),a}function o(){r.addClass&&(e.addClass(r.addClass),r.addClass=null),r.removeClass&&(e.removeClass(r.removeClass),r.removeClass=null),r.to&&(e.css(r.to),r.to=null)}r.cleanupStyles&&(r.from=r.to=null),r.from&&(e.css(r.from),r.from=null);var s,a=new n;return{start:i,end:i}}}]},Di=r("$compile");ce.$inject=["$provide","$$sanitizeUriProvider"];var Mi=/^((?:x|data)[\:\-_])/i,Ii=r("$controller"),Ri=/^(\S+)(\s+as\s+(\w+))?$/,qi=function(){this.$get=["$document",function(t){return function(e){return e?!e.nodeType&&e instanceof Ar&&(e=e[0]):e=t[0].body,e.offsetWidth+1}}]},Fi="application/json",Li={"Content-Type":Fi+";charset=utf-8"},Vi=/^\[|^\{(?!\{)/,Hi={"[":/]$/,"{":/}$/},Bi=/^\)\]\}',?\n/,zi=r("$http"),Ui=function(t){return function(){throw zi("legacy","The method `{0}` on the promise returned from `$http` has been disabled.",t)}},Wi=qr.$interpolateMinErr=r("$interpolate");Wi.throwNoconcat=function(t){throw Wi("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",t)},Wi.interr=function(t,e){return Wi("interr","Can't interpolate: {0}\n{1}",t,e.toString())};var Xi=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,Yi={http:80,https:443,ftp:21},Gi=r("$location"),Qi={$$html5:!1,$$replace:!1,absUrl:ze("$$absUrl"),url:function(t){if($(t))return this.$$url;var e=Xi.exec(t);return(e[1]||""===t)&&this.path(decodeURIComponent(e[1])),(e[2]||e[1]||""===t)&&this.search(e[3]||""),this.hash(e[5]||""),this},protocol:ze("$$protocol"),host:ze("$$host"),port:ze("$$port"),path:Ue("$$path",function(t){return t=null!==t?t.toString():"","/"==t.charAt(0)?t:"/"+t}),search:function(t,e){switch(arguments.length){case 0:return this.$$search;case 1:if(_(t)||T(t))t=t.toString(),this.$$search=tt(t);else{if(!w(t))throw Gi("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");t=L(t,{}),o(t,function(e,n){null==e&&delete t[n]}),this.$$search=t}break;default:$(e)||null===e?delete this.$$search[t]:this.$$search[t]=e}return this.$$compose(),this},hash:Ue("$$hash",function(t){return null!==t?t.toString():""}),replace:function(){return this.$$replace=!0,this}};o([Be,He,Ve],function(t){t.prototype=Object.create(Qi),t.prototype.state=function(e){if(!arguments.length)return this.$$state;if(t!==Ve||!this.$$html5)throw Gi("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=$(e)?null:e,this}});var Zi=r("$parse"),Ki=Function.prototype.call,Ji=Function.prototype.apply,to=Function.prototype.bind,eo=vt();o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(t){eo[t]=!0});var no={n:"\n",f:"\f",r:"\r",t:"	",v:"\x0B","'":"'",'"':'"'},ro=function(t){this.options=t};ro.prototype={constructor:ro,lex:function(t){for(this.text=t,this.index=0,this.tokens=[];this.index<this.text.length;){var e=this.text.charAt(this.index);if('"'===e||"'"===e)this.readString(e);else if(this.isNumber(e)||"."===e&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(e))this.readIdent();else if(this.is(e,"(){}[].,;:?"))this.tokens.push({index:this.index,text:e}),this.index++;else if(this.isWhitespace(e))this.index++;else{var n=e+this.peek(),r=n+this.peek(2),i=eo[e],o=eo[n],s=eo[r];if(i||o||s){var a=s?r:o?n:e;this.tokens.push({index:this.index,text:a,operator:!0}),this.index+=a.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(t,e){return-1!==e.indexOf(t);
},peek:function(t){var e=t||1;return this.index+e<this.text.length?this.text.charAt(this.index+e):!1},isNumber:function(t){return t>="0"&&"9">=t&&"string"==typeof t},isWhitespace:function(t){return" "===t||"\r"===t||"	"===t||"\n"===t||"\x0B"===t||" "===t},isIdent:function(t){return t>="a"&&"z">=t||t>="A"&&"Z">=t||"_"===t||"$"===t},isExpOperator:function(t){return"-"===t||"+"===t||this.isNumber(t)},throwError:function(t,e,n){n=n||this.index;var r=b(e)?"s "+e+"-"+this.index+" ["+this.text.substring(e,n)+"]":" "+n;throw Zi("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",t,r,this.text)},readNumber:function(){for(var t="",e=this.index;this.index<this.text.length;){var n=_r(this.text.charAt(this.index));if("."==n||this.isNumber(n))t+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))t+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==t.charAt(t.length-1))t+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=t.charAt(t.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:e,text:t,constant:!0,value:Number(t)})},readIdent:function(){for(var t=this.index;this.index<this.text.length;){var e=this.text.charAt(this.index);if(!this.isIdent(e)&&!this.isNumber(e))break;this.index++}this.tokens.push({index:t,text:this.text.slice(t,this.index),identifier:!0})},readString:function(t){var e=this.index;this.index++;for(var n="",r=t,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var s=this.text.substring(this.index+1,this.index+5);s.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+s+"]"),this.index+=4,n+=String.fromCharCode(parseInt(s,16))}else{var a=no[o];n+=a||o}i=!1}else if("\\"===o)i=!0;else{if(o===t)return this.index++,void this.tokens.push({index:e,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",e)}};var io=function(t,e){this.lexer=t,this.options=e};io.Program="Program",io.ExpressionStatement="ExpressionStatement",io.AssignmentExpression="AssignmentExpression",io.ConditionalExpression="ConditionalExpression",io.LogicalExpression="LogicalExpression",io.BinaryExpression="BinaryExpression",io.UnaryExpression="UnaryExpression",io.CallExpression="CallExpression",io.MemberExpression="MemberExpression",io.Identifier="Identifier",io.Literal="Literal",io.ArrayExpression="ArrayExpression",io.Property="Property",io.ObjectExpression="ObjectExpression",io.ThisExpression="ThisExpression",io.NGValueParameter="NGValueParameter",io.prototype={ast:function(t){this.text=t,this.tokens=this.lexer.lex(t);var e=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),e},program:function(){for(var t=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&t.push(this.expressionStatement()),!this.expect(";"))return{type:io.Program,body:t}},expressionStatement:function(){return{type:io.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var t,e=this.expression();t=this.expect("|");)e=this.filter(e);return e},expression:function(){return this.assignment()},assignment:function(){var t=this.ternary();return this.expect("=")&&(t={type:io.AssignmentExpression,left:t,right:this.assignment(),operator:"="}),t},ternary:function(){var t,e,n=this.logicalOR();return this.expect("?")&&(t=this.expression(),this.consume(":"))?(e=this.expression(),{type:io.ConditionalExpression,test:n,alternate:t,consequent:e}):n},logicalOR:function(){for(var t=this.logicalAND();this.expect("||");)t={type:io.LogicalExpression,operator:"||",left:t,right:this.logicalAND()};return t},logicalAND:function(){for(var t=this.equality();this.expect("&&");)t={type:io.LogicalExpression,operator:"&&",left:t,right:this.equality()};return t},equality:function(){for(var t,e=this.relational();t=this.expect("==","!=","===","!==");)e={type:io.BinaryExpression,operator:t.text,left:e,right:this.relational()};return e},relational:function(){for(var t,e=this.additive();t=this.expect("<",">","<=",">=");)e={type:io.BinaryExpression,operator:t.text,left:e,right:this.additive()};return e},additive:function(){for(var t,e=this.multiplicative();t=this.expect("+","-");)e={type:io.BinaryExpression,operator:t.text,left:e,right:this.multiplicative()};return e},multiplicative:function(){for(var t,e=this.unary();t=this.expect("*","/","%");)e={type:io.BinaryExpression,operator:t.text,left:e,right:this.unary()};return e},unary:function(){var t;return(t=this.expect("+","-","!"))?{type:io.UnaryExpression,operator:t.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var t;this.expect("(")?(t=this.filterChain(),this.consume(")")):this.expect("[")?t=this.arrayDeclaration():this.expect("{")?t=this.object():this.constants.hasOwnProperty(this.peek().text)?t=L(this.constants[this.consume().text]):this.peek().identifier?t=this.identifier():this.peek().constant?t=this.constant():this.throwError("not a primary expression",this.peek());for(var e;e=this.expect("(","[",".");)"("===e.text?(t={type:io.CallExpression,callee:t,arguments:this.parseArguments()},this.consume(")")):"["===e.text?(t={type:io.MemberExpression,object:t,property:this.expression(),computed:!0},this.consume("]")):"."===e.text?t={type:io.MemberExpression,object:t,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return t},filter:function(t){for(var e=[t],n={type:io.CallExpression,callee:this.identifier(),arguments:e,filter:!0};this.expect(":");)e.push(this.expression());return n},parseArguments:function(){var t=[];if(")"!==this.peekToken().text)do t.push(this.expression());while(this.expect(","));return t},identifier:function(){var t=this.consume();return t.identifier||this.throwError("is not a valid identifier",t),{type:io.Identifier,name:t.text}},constant:function(){return{type:io.Literal,value:this.consume().value}},arrayDeclaration:function(){var t=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;t.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:io.ArrayExpression,elements:t}},object:function(){var t,e=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;t={type:io.Property,kind:"init"},this.peek().constant?t.key=this.constant():this.peek().identifier?t.key=this.identifier():this.throwError("invalid key",this.peek()),this.consume(":"),t.value=this.expression(),e.push(t)}while(this.expect(","));return this.consume("}"),{type:io.ObjectExpression,properties:e}},throwError:function(t,e){throw Zi("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",e.text,t,e.index+1,this.text,this.text.substring(e.index))},consume:function(t){if(0===this.tokens.length)throw Zi("ueoe","Unexpected end of expression: {0}",this.text);var e=this.expect(t);return e||this.throwError("is unexpected, expecting ["+t+"]",this.peek()),e},peekToken:function(){if(0===this.tokens.length)throw Zi("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(t,e,n,r){return this.peekAhead(0,t,e,n,r)},peekAhead:function(t,e,n,r,i){if(this.tokens.length>t){var o=this.tokens[t],s=o.text;if(s===e||s===n||s===r||s===i||!e&&!n&&!r&&!i)return o}return!1},expect:function(t,e,n,r){var i=this.peek(t,e,n,r);return i?(this.tokens.shift(),i):!1},constants:{"true":{type:io.Literal,value:!0},"false":{type:io.Literal,value:!1},"null":{type:io.Literal,value:null},undefined:{type:io.Literal,value:n},"this":{type:io.ThisExpression}}},un.prototype={compile:function(t,e){var r=this,i=this.astBuilder.ast(t);this.state={nextId:0,filters:{},expensiveChecks:e,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},nn(i,r.$filter);var s,a="";if(this.stage="assign",s=sn(i)){this.state.computing="assign";var l=this.nextId();this.recurse(s,l),this.return_(l),a="fn.assign="+this.generateFunction("assign","s,v,l")}var u=rn(i.body);r.stage="inputs",o(u,function(t,e){var n="fn"+e;r.state[n]={vars:[],body:[],own:{}},r.state.computing=n;var i=r.nextId();r.recurse(t,i),r.return_(i),r.state.inputs.push(n),t.watchId=e}),this.state.computing="fn",this.stage="main",this.recurse(i);var c='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+a+this.watchFns()+"return fn;",f=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",c)(this.$filter,Ye,Qe,Ze,Ge,Ke,Je,tn,t);return this.state=this.stage=n,f.literal=an(i),f.constant=ln(i),f},USE:"use",STRICT:"strict",watchFns:function(){var t=[],e=this.state.inputs,n=this;return o(e,function(e){t.push("var "+e+"="+n.generateFunction(e,"s"))}),e.length&&t.push("fn.inputs=["+e.join(",")+"];"),t.join("")},generateFunction:function(t,e){return"function("+e+"){"+this.varsPrefix(t)+this.body(t)+"};"},filterPrefix:function(){var t=[],e=this;return o(this.state.filters,function(n,r){t.push(n+"=$filter("+e.escape(r)+")")}),t.length?"var "+t.join(",")+";":""},varsPrefix:function(t){return this.state[t].vars.length?"var "+this.state[t].vars.join(",")+";":""},body:function(t){return this.state[t].body.join("")},recurse:function(t,e,r,i,s,a){var l,u,c,f,p=this;if(i=i||m,!a&&b(t.watchId))return e=e||this.nextId(),void this.if_("i",this.lazyAssign(e,this.computedMember("i",t.watchId)),this.lazyRecurse(t,e,r,i,s,!0));switch(t.type){case io.Program:o(t.body,function(e,r){p.recurse(e.expression,n,n,function(t){u=t}),r!==t.body.length-1?p.current().body.push(u,";"):p.return_(u)});break;case io.Literal:f=this.escape(t.value),this.assign(e,f),i(f);break;case io.UnaryExpression:this.recurse(t.argument,n,n,function(t){u=t}),f=t.operator+"("+this.ifDefined(u,0)+")",this.assign(e,f),i(f);break;case io.BinaryExpression:this.recurse(t.left,n,n,function(t){l=t}),this.recurse(t.right,n,n,function(t){u=t}),f="+"===t.operator?this.plus(l,u):"-"===t.operator?this.ifDefined(l,0)+t.operator+this.ifDefined(u,0):"("+l+")"+t.operator+"("+u+")",this.assign(e,f),i(f);break;case io.LogicalExpression:e=e||this.nextId(),p.recurse(t.left,e),p.if_("&&"===t.operator?e:p.not(e),p.lazyRecurse(t.right,e)),i(e);break;case io.ConditionalExpression:e=e||this.nextId(),p.recurse(t.test,e),p.if_(e,p.lazyRecurse(t.alternate,e),p.lazyRecurse(t.consequent,e)),i(e);break;case io.Identifier:e=e||this.nextId(),r&&(r.context="inputs"===p.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",t.name)+"?l:s"),r.computed=!1,r.name=t.name),Ye(t.name),p.if_("inputs"===p.stage||p.not(p.getHasOwnProperty("l",t.name)),function(){p.if_("inputs"===p.stage||"s",function(){s&&1!==s&&p.if_(p.not(p.nonComputedMember("s",t.name)),p.lazyAssign(p.nonComputedMember("s",t.name),"{}")),p.assign(e,p.nonComputedMember("s",t.name))})},e&&p.lazyAssign(e,p.nonComputedMember("l",t.name))),(p.state.expensiveChecks||fn(t.name))&&p.addEnsureSafeObject(e),i(e);break;case io.MemberExpression:l=r&&(r.context=this.nextId())||this.nextId(),e=e||this.nextId(),p.recurse(t.object,l,n,function(){p.if_(p.notNull(l),function(){t.computed?(u=p.nextId(),p.recurse(t.property,u),p.getStringValue(u),p.addEnsureSafeMemberName(u),s&&1!==s&&p.if_(p.not(p.computedMember(l,u)),p.lazyAssign(p.computedMember(l,u),"{}")),f=p.ensureSafeObject(p.computedMember(l,u)),p.assign(e,f),r&&(r.computed=!0,r.name=u)):(Ye(t.property.name),s&&1!==s&&p.if_(p.not(p.nonComputedMember(l,t.property.name)),p.lazyAssign(p.nonComputedMember(l,t.property.name),"{}")),f=p.nonComputedMember(l,t.property.name),(p.state.expensiveChecks||fn(t.property.name))&&(f=p.ensureSafeObject(f)),p.assign(e,f),r&&(r.computed=!1,r.name=t.property.name))},function(){p.assign(e,"undefined")}),i(e)},!!s);break;case io.CallExpression:e=e||this.nextId(),t.filter?(u=p.filter(t.callee.name),c=[],o(t.arguments,function(t){var e=p.nextId();p.recurse(t,e),c.push(e)}),f=u+"("+c.join(",")+")",p.assign(e,f),i(e)):(u=p.nextId(),l={},c=[],p.recurse(t.callee,u,l,function(){p.if_(p.notNull(u),function(){p.addEnsureSafeFunction(u),o(t.arguments,function(t){p.recurse(t,p.nextId(),n,function(t){c.push(p.ensureSafeObject(t))})}),l.name?(p.state.expensiveChecks||p.addEnsureSafeObject(l.context),f=p.member(l.context,l.name,l.computed)+"("+c.join(",")+")"):f=u+"("+c.join(",")+")",f=p.ensureSafeObject(f),p.assign(e,f)},function(){p.assign(e,"undefined")}),i(e)}));break;case io.AssignmentExpression:if(u=this.nextId(),l={},!on(t.left))throw Zi("lval","Trying to assing a value to a non l-value");this.recurse(t.left,n,l,function(){p.if_(p.notNull(l.context),function(){p.recurse(t.right,u),p.addEnsureSafeObject(p.member(l.context,l.name,l.computed)),p.addEnsureSafeAssignContext(l.context),f=p.member(l.context,l.name,l.computed)+t.operator+u,p.assign(e,f),i(e||f)})},1);break;case io.ArrayExpression:c=[],o(t.elements,function(t){p.recurse(t,p.nextId(),n,function(t){c.push(t)})}),f="["+c.join(",")+"]",this.assign(e,f),i(f);break;case io.ObjectExpression:c=[],o(t.properties,function(t){p.recurse(t.value,p.nextId(),n,function(e){c.push(p.escape(t.key.type===io.Identifier?t.key.name:""+t.key.value)+":"+e)})}),f="{"+c.join(",")+"}",this.assign(e,f),i(f);break;case io.ThisExpression:this.assign(e,"s"),i("s");break;case io.NGValueParameter:this.assign(e,"v"),i("v")}},getHasOwnProperty:function(t,e){var n=t+"."+e,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,t+"&&("+this.escape(e)+" in "+t+")")),r[n]},assign:function(t,e){return t?(this.current().body.push(t,"=",e,";"),t):void 0},filter:function(t){return this.state.filters.hasOwnProperty(t)||(this.state.filters[t]=this.nextId(!0)),this.state.filters[t]},ifDefined:function(t,e){return"ifDefined("+t+","+this.escape(e)+")"},plus:function(t,e){return"plus("+t+","+e+")"},return_:function(t){this.current().body.push("return ",t,";")},if_:function(t,e,n){if(t===!0)e();else{var r=this.current().body;r.push("if(",t,"){"),e(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(t){return"!("+t+")"},notNull:function(t){return t+"!=null"},nonComputedMember:function(t,e){return t+"."+e},computedMember:function(t,e){return t+"["+e+"]"},member:function(t,e,n){return n?this.computedMember(t,e):this.nonComputedMember(t,e)},addEnsureSafeObject:function(t){this.current().body.push(this.ensureSafeObject(t),";")},addEnsureSafeMemberName:function(t){this.current().body.push(this.ensureSafeMemberName(t),";")},addEnsureSafeFunction:function(t){this.current().body.push(this.ensureSafeFunction(t),";")},addEnsureSafeAssignContext:function(t){this.current().body.push(this.ensureSafeAssignContext(t),";")},ensureSafeObject:function(t){return"ensureSafeObject("+t+",text)"},ensureSafeMemberName:function(t){return"ensureSafeMemberName("+t+",text)"},ensureSafeFunction:function(t){return"ensureSafeFunction("+t+",text)"},getStringValue:function(t){this.assign(t,"getStringValue("+t+",text)")},ensureSafeAssignContext:function(t){return"ensureSafeAssignContext("+t+",text)"},lazyRecurse:function(t,e,n,r,i,o){var s=this;return function(){s.recurse(t,e,n,r,i,o)}},lazyAssign:function(t,e){var n=this;return function(){n.assign(t,e)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(t){return"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)},escape:function(t){if(_(t))return"'"+t.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(T(t))return t.toString();if(t===!0)return"true";if(t===!1)return"false";if(null===t)return"null";if("undefined"==typeof t)return"undefined";throw Zi("esc","IMPOSSIBLE")},nextId:function(t,e){var n="v"+this.state.nextId++;return t||this.current().vars.push(n+(e?"="+e:"")),n},current:function(){return this.state[this.state.computing]}},cn.prototype={compile:function(t,e){var n=this,r=this.astBuilder.ast(t);this.expression=t,this.expensiveChecks=e,nn(r,n.$filter);var i,s;(i=sn(r))&&(s=this.recurse(i));var a,l=rn(r.body);l&&(a=[],o(l,function(t,e){var r=n.recurse(t);t.input=r,a.push(r),t.watchId=e}));var u=[];o(r.body,function(t){u.push(n.recurse(t.expression))});var c=0===r.body.length?function(){}:1===r.body.length?u[0]:function(t,e){var n;return o(u,function(r){n=r(t,e)}),n};return s&&(c.assign=function(t,e,n){return s(t,n,e)}),a&&(c.inputs=a),c.literal=an(r),c.constant=ln(r),c},recurse:function(t,e,r){var i,s,a,l=this;if(t.input)return this.inputs(t.input,t.watchId);switch(t.type){case io.Literal:return this.value(t.value,e);case io.UnaryExpression:return s=this.recurse(t.argument),this["unary"+t.operator](s,e);case io.BinaryExpression:return i=this.recurse(t.left),s=this.recurse(t.right),this["binary"+t.operator](i,s,e);case io.LogicalExpression:return i=this.recurse(t.left),s=this.recurse(t.right),this["binary"+t.operator](i,s,e);case io.ConditionalExpression:return this["ternary?:"](this.recurse(t.test),this.recurse(t.alternate),this.recurse(t.consequent),e);case io.Identifier:return Ye(t.name,l.expression),l.identifier(t.name,l.expensiveChecks||fn(t.name),e,r,l.expression);case io.MemberExpression:return i=this.recurse(t.object,!1,!!r),t.computed||(Ye(t.property.name,l.expression),s=t.property.name),t.computed&&(s=this.recurse(t.property)),t.computed?this.computedMember(i,s,e,r,l.expression):this.nonComputedMember(i,s,l.expensiveChecks,e,r,l.expression);case io.CallExpression:return a=[],o(t.arguments,function(t){a.push(l.recurse(t))}),t.filter&&(s=this.$filter(t.callee.name)),t.filter||(s=this.recurse(t.callee,!0)),t.filter?function(t,r,i,o){for(var l=[],u=0;u<a.length;++u)l.push(a[u](t,r,i,o));var c=s.apply(n,l,o);return e?{context:n,name:n,value:c}:c}:function(t,n,r,i){var o,u=s(t,n,r,i);if(null!=u.value){Qe(u.context,l.expression),Ze(u.value,l.expression);for(var c=[],f=0;f<a.length;++f)c.push(Qe(a[f](t,n,r,i),l.expression));o=Qe(u.value.apply(u.context,c),l.expression)}return e?{value:o}:o};case io.AssignmentExpression:return i=this.recurse(t.left,!0,1),s=this.recurse(t.right),function(t,n,r,o){var a=i(t,n,r,o),u=s(t,n,r,o);return Qe(a.value,l.expression),Ke(a.context),a.context[a.name]=u,e?{value:u}:u};case io.ArrayExpression:return a=[],o(t.elements,function(t){a.push(l.recurse(t))}),function(t,n,r,i){for(var o=[],s=0;s<a.length;++s)o.push(a[s](t,n,r,i));return e?{value:o}:o};case io.ObjectExpression:return a=[],o(t.properties,function(t){a.push({key:t.key.type===io.Identifier?t.key.name:""+t.key.value,value:l.recurse(t.value)})}),function(t,n,r,i){for(var o={},s=0;s<a.length;++s)o[a[s].key]=a[s].value(t,n,r,i);return e?{value:o}:o};case io.ThisExpression:return function(t){return e?{value:t}:t};case io.NGValueParameter:return function(t,n,r,i){return e?{value:r}:r}}},"unary+":function(t,e){return function(n,r,i,o){var s=t(n,r,i,o);return s=b(s)?+s:0,e?{value:s}:s}},"unary-":function(t,e){return function(n,r,i,o){var s=t(n,r,i,o);return s=b(s)?-s:0,e?{value:s}:s}},"unary!":function(t,e){return function(n,r,i,o){var s=!t(n,r,i,o);return e?{value:s}:s}},"binary+":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s),l=e(r,i,o,s),u=tn(a,l);return n?{value:u}:u}},"binary-":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s),l=e(r,i,o,s),u=(b(a)?a:0)-(b(l)?l:0);return n?{value:u}:u}},"binary*":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s)*e(r,i,o,s);return n?{value:a}:a}},"binary/":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s)/e(r,i,o,s);return n?{value:a}:a}},"binary%":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s)%e(r,i,o,s);return n?{value:a}:a}},"binary===":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s)===e(r,i,o,s);return n?{value:a}:a}},"binary!==":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s)!==e(r,i,o,s);return n?{value:a}:a}},"binary==":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s)==e(r,i,o,s);return n?{value:a}:a}},"binary!=":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s)!=e(r,i,o,s);return n?{value:a}:a}},"binary<":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s)<e(r,i,o,s);return n?{value:a}:a}},"binary>":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s)>e(r,i,o,s);return n?{value:a}:a}},"binary<=":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s)<=e(r,i,o,s);return n?{value:a}:a}},"binary>=":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s)>=e(r,i,o,s);return n?{value:a}:a}},"binary&&":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s)&&e(r,i,o,s);return n?{value:a}:a}},"binary||":function(t,e,n){return function(r,i,o,s){var a=t(r,i,o,s)||e(r,i,o,s);return n?{value:a}:a}},"ternary?:":function(t,e,n,r){return function(i,o,s,a){var l=t(i,o,s,a)?e(i,o,s,a):n(i,o,s,a);return r?{value:l}:l}},value:function(t,e){return function(){return e?{context:n,name:n,value:t}:t}},identifier:function(t,e,r,i,o){return function(s,a,l,u){var c=a&&t in a?a:s;i&&1!==i&&c&&!c[t]&&(c[t]={});var f=c?c[t]:n;return e&&Qe(f,o),r?{context:c,name:t,value:f}:f}},computedMember:function(t,e,n,r,i){return function(o,s,a,l){var u,c,f=t(o,s,a,l);return null!=f&&(u=e(o,s,a,l),u=Ge(u),Ye(u,i),r&&1!==r&&f&&!f[u]&&(f[u]={}),c=f[u],Qe(c,i)),n?{context:f,name:u,value:c}:c}},nonComputedMember:function(t,e,r,i,o,s){return function(a,l,u,c){var f=t(a,l,u,c);o&&1!==o&&f&&!f[e]&&(f[e]={});var p=null!=f?f[e]:n;return(r||fn(e))&&Qe(p,s),i?{context:f,name:e,value:p}:p}},inputs:function(t,e){return function(n,r,i,o){return o?o[e]:t(n,r,i)}}};var oo=function(t,e,n){this.lexer=t,this.$filter=e,this.options=n,this.ast=new io(this.lexer),this.astCompiler=n.csp?new cn(this.ast,e):new un(this.ast,e)};oo.prototype={constructor:oo,parse:function(t){return this.astCompiler.compile(t,this.options.expensiveChecks)}};var so=(vt(),vt(),Object.prototype.valueOf),ao=r("$sce"),lo={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Di=r("$compile"),uo=e.createElement("a"),co=En(t.location.href);jn.$inject=["$document"],Nn.$inject=["$provide"],qn.$inject=["$locale"],Fn.$inject=["$locale"];var fo=".",po={yyyy:Hn("FullYear",4),yy:Hn("FullYear",2,0,!0),y:Hn("FullYear",1),MMMM:Bn("Month"),MMM:Bn("Month",!0),MM:Hn("Month",2,1),M:Hn("Month",1,1),dd:Hn("Date",2),d:Hn("Date",1),HH:Hn("Hours",2),H:Hn("Hours",1),hh:Hn("Hours",2,-12),h:Hn("Hours",1,-12),mm:Hn("Minutes",2),m:Hn("Minutes",1),ss:Hn("Seconds",2),s:Hn("Seconds",1),sss:Hn("Milliseconds",3),EEEE:Bn("Day"),EEE:Bn("Day",!0),a:Yn,Z:zn,ww:Xn(2),w:Xn(1),G:Gn,GG:Gn,GGG:Gn,GGGG:Qn},ho=/((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,mo=/^\-?\d+$/;Zn.$inject=["$locale"];var vo=g(_r),go=g(Cr);tr.$inject=["$parse"];var yo=g({restrict:"E",compile:function(t,e){return e.href||e.xlinkHref?void 0:function(t,e){if("a"===e[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===Mr.call(e.prop("href"))?"xlink:href":"href";e.on("click",function(t){e.attr(n)||t.preventDefault()})}}}}),$o={};o(yi,function(t,e){function n(t,n,i){t.$watch(i[r],function(t){i.$set(e,!!t)})}if("multiple"!=t){var r=fe("ng-"+e),i=n;"checked"===t&&(i=function(t,e,i){i.ngModel!==i[r]&&n(t,e,i)}),$o[r]=function(){return{restrict:"A",priority:100,link:i}}}}),o(bi,function(t,e){$o[e]=function(){return{priority:100,link:function(t,n,r){if("ngPattern"===e&&"/"==r.ngPattern.charAt(0)){var i=r.ngPattern.match(wr);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}t.$watch(r[e],function(t){r.$set(e,t)})}}}}),o(["src","srcset","href"],function(t){var e=fe("ng-"+t);$o[e]=function(){return{priority:99,link:function(n,r,i){var o=t,s=t;"href"===t&&"[object SVGAnimatedString]"===Mr.call(r.prop("href"))&&(s="xlinkHref",i.$attr[s]="xlink:href",o=null),i.$observe(e,function(e){return e?(i.$set(s,e),void(Er&&o&&r.prop(o,i[s]))):void("href"===t&&i.$set(s,null))})}}}});var bo={$addControl:m,$$renameControl:nr,$removeControl:m,$setValidity:m,$setDirty:m,$setPristine:m,$setSubmitted:m},wo="ng-submitted";rr.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var xo=function(t){return["$timeout","$parse",function(e,r){function i(t){return""===t?r('this[""]').assign:r(t).assign||m}var o={name:"form",restrict:t?"EAC":"E",require:["form","^^?form"],controller:rr,compile:function(r,o){r.addClass(ns).addClass(ts);var s=o.name?"name":t&&o.ngForm?"ngForm":!1;return{pre:function(t,r,o,a){var l=a[0];if(!("action"in o)){var u=function(e){t.$apply(function(){l.$commitViewValue(),l.$setSubmitted()}),e.preventDefault()};oi(r[0],"submit",u),r.on("$destroy",function(){e(function(){si(r[0],"submit",u)},0,!1)})}var c=a[1]||l.$$parentForm;c.$addControl(l);var p=s?i(l.$name):m;s&&(p(t,l),o.$observe(s,function(e){l.$name!==e&&(p(t,n),l.$$parentForm.$$renameControl(l,e),(p=i(l.$name))(t,l))})),r.on("$destroy",function(){l.$$parentForm.$removeControl(l),p(t,n),f(l,bo)})}}}};return o}]},_o=xo(),To=xo(!0),Co=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,So=/^[A-Za-z][A-Za-z\d.+-]*:\/*(?:\w+(?::\w+)?@)?[^\s/]+(?::\d+)?(?:\/[\w#!:.?+=&%@\-/]*)?$/,ko=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,Eo=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,Ao=/^(\d{4})-(\d{2})-(\d{2})$/,Oo=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,jo=/^(\d{4})-W(\d\d)$/,Po=/^(\d{4})-(\d\d)$/,No=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Do={text:or,date:ur("date",Ao,lr(Ao,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":ur("datetimelocal",Oo,lr(Oo,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:ur("time",No,lr(No,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:ur("week",jo,ar,"yyyy-Www"),month:ur("month",Po,lr(Po,["yyyy","MM"]),"yyyy-MM"),number:fr,url:pr,email:hr,radio:dr,checkbox:vr,hidden:m,button:m,submit:m,reset:m,file:m},Mo=["$browser","$sniffer","$filter","$parse",function(t,e,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,s,a){a[0]&&(Do[_r(s.type)]||Do.text)(i,o,s,a[0],e,t,n,r)}}}}],Io=/^(true|false|\d+)$/,Ro=function(){return{restrict:"A",priority:100,compile:function(t,e){return Io.test(e.ngValue)?function(t,e,n){n.$set("value",t.$eval(n.ngValue))}:function(t,e,n){t.$watch(n.ngValue,function(t){n.$set("value",t)})}}}},qo=["$compile",function(t){return{restrict:"AC",compile:function(e){return t.$$addBindingClass(e),function(e,n,r){t.$$addBindingInfo(n,r.ngBind),n=n[0],e.$watch(r.ngBind,function(t){n.textContent=$(t)?"":t})}}}}],Fo=["$interpolate","$compile",function(t,e){return{compile:function(n){return e.$$addBindingClass(n),function(n,r,i){var o=t(r.attr(i.$attr.ngBindTemplate));e.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(t){r.textContent=$(t)?"":t})}}}}],Lo=["$sce","$parse","$compile",function(t,e,n){return{restrict:"A",compile:function(r,i){var o=e(i.ngBindHtml),s=e(i.ngBindHtml,function(t){return(t||"").toString()});return n.$$addBindingClass(r),function(e,r,i){n.$$addBindingInfo(r,i.ngBindHtml),e.$watch(s,function(){r.html(t.getTrustedHtml(o(e))||"")})}}}}],Vo=g({restrict:"A",require:"ngModel",link:function(t,e,n,r){r.$viewChangeListeners.push(function(){t.$eval(n.ngChange)})}}),Ho=gr("",!0),Bo=gr("Odd",0),zo=gr("Even",1),Uo=er({compile:function(t,e){e.$set("ngCloak",n),t.removeClass("ng-cloak")}}),Wo=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Xo={},Yo={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(t){var e=fe("ng-"+t);Xo[e]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var s=n(o[e],null,!0);return function(e,n){n.on(t,function(n){var i=function(){s(e,{$event:n})};Yo[t]&&r.$$phase?e.$evalAsync(i):e.$apply(i)})}}}}]});var Go=["$animate",function(t){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,s){var a,l,u;n.$watch(i.ngIf,function(n){n?l||s(function(n,o){l=o,n[n.length++]=e.createComment(" end ngIf: "+i.ngIf+" "),a={clone:n},t.enter(n,r.parent(),r)}):(u&&(u.remove(),u=null),l&&(l.$destroy(),l=null),a&&(u=mt(a.clone),t.leave(u).then(function(){u=null}),a=null))})}}}],Qo=["$templateRequest","$anchorScroll","$animate",function(t,e,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:qr.noop,compile:function(r,i){var o=i.ngInclude||i.src,s=i.onload||"",a=i.autoscroll;return function(r,i,l,u,c){var f,p,h,d=0,m=function(){p&&(p.remove(),p=null),f&&(f.$destroy(),f=null),h&&(n.leave(h).then(function(){p=null}),p=h,h=null)};r.$watch(o,function(o){var l=function(){!b(a)||a&&!r.$eval(a)||e()},p=++d;o?(t(o,!0).then(function(t){if(p===d){var e=r.$new();u.template=t;var a=c(e,function(t){m(),n.enter(t,null,i).then(l)});f=e,h=a,f.$emit("$includeContentLoaded",o),r.$eval(s)}},function(){p===d&&(m(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(m(),u.template=null)})}}}}],Zo=["$compile",function(t){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){return/SVG/.test(r[0].toString())?(r.empty(),void t(St(o.template,e).childNodes)(n,function(t){r.append(t)},{futureParentElement:r})):(r.html(o.template),void t(r.contents())(n))}}}],Ko=er({priority:450,compile:function(){return{pre:function(t,e,n){t.$eval(n.ngInit)}}}}),Jo=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(t,e,r,i){var s=e.attr(r.$attr.ngList)||", ",a="false"!==r.ngTrim,l=a?Br(s):s,u=function(t){if(!$(t)){var e=[];return t&&o(t.split(l),function(t){t&&e.push(a?Br(t):t)}),e}};i.$parsers.push(u),i.$formatters.push(function(t){return Vr(t)?t.join(s):n}),i.$isEmpty=function(t){return!t||!t.length}}}},ts="ng-valid",es="ng-invalid",ns="ng-pristine",rs="ng-dirty",is="ng-untouched",os="ng-touched",ss="ng-pending",as=r("ngModel"),ls=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(t,e,r,i,s,a,l,u,c,f){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=n,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=n,this.$name=f(r.name||"",!1)(t),this.$$parentForm=bo;var p,h=s(r.ngModel),d=h.assign,v=h,g=d,y=null,w=this;this.$$setOptions=function(t){if(w.$options=t,t&&t.getterSetter){var e=s(r.ngModel+"()"),n=s(r.ngModel+"($$$p)");v=function(t){var n=h(t);return S(n)&&(n=e(t)),n},g=function(t,e){S(h(t))?n(t,{$$$p:w.$modelValue}):d(t,w.$modelValue)}}else if(!h.assign)throw as("nonassign","Expression '{0}' is non-assignable. Element: {1}",r.ngModel,K(i))},this.$render=m,this.$isEmpty=function(t){return $(t)||""===t||null===t||t!==t};var x=0;yr({ctrl:this,$element:i,set:function(t,e){t[e]=!0},unset:function(t,e){delete t[e]},$animate:a}),this.$setPristine=function(){w.$dirty=!1,w.$pristine=!0,a.removeClass(i,rs),a.addClass(i,ns)},this.$setDirty=function(){w.$dirty=!0,w.$pristine=!1,a.removeClass(i,ns),a.addClass(i,rs),w.$$parentForm.$setDirty()},this.$setUntouched=function(){w.$touched=!1,w.$untouched=!0,a.setClass(i,is,os)},this.$setTouched=function(){w.$touched=!0,w.$untouched=!1,a.setClass(i,os,is)},this.$rollbackViewValue=function(){l.cancel(y),w.$viewValue=w.$$lastCommittedViewValue,w.$render()},this.$validate=function(){if(!T(w.$modelValue)||!isNaN(w.$modelValue)){var t=w.$$lastCommittedViewValue,e=w.$$rawModelValue,r=w.$valid,i=w.$modelValue,o=w.$options&&w.$options.allowInvalid;w.$$runValidators(e,t,function(t){o||r===t||(w.$modelValue=t?e:n,w.$modelValue!==i&&w.$$writeModelToScope())})}},this.$$runValidators=function(t,e,r){function i(){var t=w.$$parserName||"parse";return $(p)?(l(t,null),!0):(p||(o(w.$validators,function(t,e){l(e,null)}),o(w.$asyncValidators,function(t,e){l(e,null)})),l(t,p),p)}function s(){var n=!0;return o(w.$validators,function(r,i){var o=r(t,e);n=n&&o,l(i,o)}),n?!0:(o(w.$asyncValidators,function(t,e){l(e,null)}),!1)}function a(){var r=[],i=!0;o(w.$asyncValidators,function(o,s){var a=o(t,e);if(!D(a))throw as("$asyncValidators","Expected asynchronous validator to return a promise but got '{0}' instead.",a);
l(s,n),r.push(a.then(function(){l(s,!0)},function(t){i=!1,l(s,!1)}))}),r.length?c.all(r).then(function(){u(i)},m):u(!0)}function l(t,e){f===x&&w.$setValidity(t,e)}function u(t){f===x&&r(t)}x++;var f=x;return i()&&s()?void a():void u(!1)},this.$commitViewValue=function(){var t=w.$viewValue;l.cancel(y),(w.$$lastCommittedViewValue!==t||""===t&&w.$$hasNativeValidators)&&(w.$$lastCommittedViewValue=t,w.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function e(){w.$modelValue!==s&&w.$$writeModelToScope()}var r=w.$$lastCommittedViewValue,i=r;if(p=$(i)?n:!0)for(var o=0;o<w.$parsers.length;o++)if(i=w.$parsers[o](i),$(i)){p=!1;break}T(w.$modelValue)&&isNaN(w.$modelValue)&&(w.$modelValue=v(t));var s=w.$modelValue,a=w.$options&&w.$options.allowInvalid;w.$$rawModelValue=i,a&&(w.$modelValue=i,e()),w.$$runValidators(i,w.$$lastCommittedViewValue,function(t){a||(w.$modelValue=t?i:n,e())})},this.$$writeModelToScope=function(){g(t,w.$modelValue),o(w.$viewChangeListeners,function(t){try{t()}catch(n){e(n)}})},this.$setViewValue=function(t,e){w.$viewValue=t,(!w.$options||w.$options.updateOnDefault)&&w.$$debounceViewValueCommit(e)},this.$$debounceViewValueCommit=function(e){var n,r=0,i=w.$options;i&&b(i.debounce)&&(n=i.debounce,T(n)?r=n:T(n[e])?r=n[e]:T(n["default"])&&(r=n["default"])),l.cancel(y),r?y=l(function(){w.$commitViewValue()},r):u.$$phase?w.$commitViewValue():t.$apply(function(){w.$commitViewValue()})},t.$watch(function(){var e=v(t);if(e!==w.$modelValue&&(w.$modelValue===w.$modelValue||e===e)){w.$modelValue=w.$$rawModelValue=e,p=n;for(var r=w.$formatters,i=r.length,o=e;i--;)o=r[i](o);w.$viewValue!==o&&(w.$viewValue=w.$$lastCommittedViewValue=o,w.$render(),w.$$runValidators(e,o,m))}return e})}],us=["$rootScope",function(t){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:ls,priority:1,compile:function(e){return e.addClass(ns).addClass(is).addClass(ts),{pre:function(t,e,n,r){var i=r[0],o=r[1]||i.$$parentForm;i.$$setOptions(r[2]&&r[2].$options),o.$addControl(i),n.$observe("name",function(t){i.$name!==t&&i.$$parentForm.$$renameControl(i,t)}),t.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(e,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(t){o.$$debounceViewValueCommit(t&&t.type)}),n.on("blur",function(n){o.$touched||(t.$$phase?e.$evalAsync(o.$setTouched):e.$apply(o.$setTouched))})}}}}}],cs=/(\s+|^)default(\s+|$)/,fs=function(){return{restrict:"A",controller:["$scope","$attrs",function(t,e){var n=this;this.$options=L(t.$eval(e.ngModelOptions)),b(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=Br(this.$options.updateOn.replace(cs,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},ps=er({terminal:!0,priority:1e3}),hs=r("ngOptions"),ds=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,ms=["$compile","$parse",function(t,n){function r(t,e,r){function o(t,e,n,r,i){this.selectValue=t,this.viewValue=e,this.label=n,this.group=r,this.disabled=i}function s(t){var e;if(!u&&i(t))e=t;else{e=[];for(var n in t)t.hasOwnProperty(n)&&"$"!==n.charAt(0)&&e.push(n)}return e}var a=t.match(ds);if(!a)throw hs("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",t,K(e));var l=a[5]||a[7],u=a[6],c=/ as /.test(a[0])&&a[1],f=a[9],p=n(a[2]?a[1]:l),h=c&&n(c),d=h||p,m=f&&n(f),v=f?function(t,e){return m(r,e)}:function(t){return Qt(t)},g=function(t,e){return v(t,_(t,e))},y=n(a[2]||a[1]),$=n(a[3]||""),b=n(a[4]||""),w=n(a[8]),x={},_=u?function(t,e){return x[u]=e,x[l]=t,x}:function(t){return x[l]=t,x};return{trackBy:f,getTrackByValue:g,getWatchables:n(w,function(t){var e=[];t=t||[];for(var n=s(t),i=n.length,o=0;i>o;o++){var l=t===n?o:n[o],u=(t[l],_(t[l],l)),c=v(t[l],u);if(e.push(c),a[2]||a[1]){var f=y(r,u);e.push(f)}if(a[4]){var p=b(r,u);e.push(p)}}return e}),getOptions:function(){for(var t=[],e={},n=w(r)||[],i=s(n),a=i.length,l=0;a>l;l++){var u=n===i?l:i[l],c=n[u],p=_(c,u),h=d(r,p),m=v(h,p),x=y(r,p),T=$(r,p),C=b(r,p),S=new o(m,h,x,T,C);t.push(S),e[m]=S}return{items:t,selectValueMap:e,getOptionFromViewValue:function(t){return e[g(t)]},getViewValueFromOption:function(t){return f?qr.copy(t.viewValue):t.viewValue}}}}}function s(e,n,i,s){function u(t,e){t.element=e,e.disabled=t.disabled,t.label!==e.label&&(e.label=t.label,e.textContent=t.label),t.value!==e.value&&(e.value=t.selectValue)}function c(t,e,n,r){var i;return e&&_r(e.nodeName)===n?i=e:(i=r.cloneNode(!1),e?t.insertBefore(i,e):t.appendChild(i)),i}function f(t){for(var e;t;)e=t.nextSibling,Ht(t),t=e}function p(t){var e=m&&m[0],n=x&&x[0];if(e||n)for(;t&&(t===e||t===n||t.nodeType===Jr||""===t.value);)t=t.nextSibling;return t}function h(){var t=_&&v.readValue();_=T.getOptions();var e={},r=n[0].firstChild;if(w&&n.prepend(m),r=p(r),_.items.forEach(function(t){var i,o,s;t.group?(i=e[t.group],i||(o=c(n[0],r,"optgroup",l),r=o.nextSibling,o.label=t.group,i=e[t.group]={groupElement:o,currentOptionElement:o.firstChild}),s=c(i.groupElement,i.currentOptionElement,"option",a),u(t,s),i.currentOptionElement=s.nextSibling):(s=c(n[0],r,"option",a),u(t,s),r=s.nextSibling)}),Object.keys(e).forEach(function(t){f(e[t].currentOptionElement)}),f(r),d.$render(),!d.$isEmpty(t)){var i=v.readValue();(T.trackBy?H(t,i):t===i)||(d.$setViewValue(i),d.$render())}}var d=s[1];if(d){for(var m,v=s[0],g=i.multiple,y=0,$=n.children(),b=$.length;b>y;y++)if(""===$[y].value){m=$.eq(y);break}var w=!!m,x=Ar(a.cloneNode(!1));x.val("?");var _,T=r(i.ngOptions,n,e),C=function(){w||n.prepend(m),n.val(""),m.prop("selected",!0),m.attr("selected",!0)},S=function(){w||m.remove()},k=function(){n.prepend(x),n.val("?"),x.prop("selected",!0),x.attr("selected",!0)},E=function(){x.remove()};g?(d.$isEmpty=function(t){return!t||0===t.length},v.writeValue=function(t){_.items.forEach(function(t){t.element.selected=!1}),t&&t.forEach(function(t){var e=_.getOptionFromViewValue(t);e&&!e.disabled&&(e.element.selected=!0)})},v.readValue=function(){var t=n.val()||[],e=[];return o(t,function(t){var n=_.selectValueMap[t];n&&!n.disabled&&e.push(_.getViewValueFromOption(n))}),e},T.trackBy&&e.$watchCollection(function(){return Vr(d.$viewValue)?d.$viewValue.map(function(t){return T.getTrackByValue(t)}):void 0},function(){d.$render()})):(v.writeValue=function(t){var e=_.getOptionFromViewValue(t);e&&!e.disabled?n[0].value!==e.selectValue&&(E(),S(),n[0].value=e.selectValue,e.element.selected=!0,e.element.setAttribute("selected","selected")):null===t||w?(E(),C()):(S(),k())},v.readValue=function(){var t=_.selectValueMap[n.val()];return t&&!t.disabled?(S(),E(),_.getViewValueFromOption(t)):null},T.trackBy&&e.$watch(function(){return T.getTrackByValue(d.$viewValue)},function(){d.$render()})),w?(m.remove(),t(m)(e),m.removeClass("ng-scope")):m=Ar(a.cloneNode(!1)),h(),e.$watchCollection(T.getWatchables,h)}}var a=e.createElement("option"),l=e.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","?ngModel"],link:{pre:function(t,e,n,r){r[0].registerOption=m},post:s}}}],vs=["$locale","$interpolate","$log",function(t,e,n){var r=/{}/g,i=/^when(Minus)?(.+)$/;return{link:function(s,a,l){function u(t){a.text(t||"")}var c,f=l.count,p=l.$attr.when&&a.attr(l.$attr.when),h=l.offset||0,d=s.$eval(p)||{},v={},g=e.startSymbol(),y=e.endSymbol(),b=g+f+"-"+h+y,w=qr.noop;o(l,function(t,e){var n=i.exec(e);if(n){var r=(n[1]?"-":"")+_r(n[2]);d[r]=a.attr(l.$attr[e])}}),o(d,function(t,n){v[n]=e(t.replace(r,b))}),s.$watch(f,function(e){var r=parseFloat(e),i=isNaN(r);if(i||r in d||(r=t.pluralCat(r-h)),r!==c&&!(i&&T(c)&&isNaN(c))){w();var o=v[r];$(o)?(null!=e&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+p),w=m,u()):w=s.$watch(o,u),c=r}})}}}],gs=["$parse","$animate",function(t,s){var a="$$NG_REMOVED",l=r("ngRepeat"),u=function(t,e,n,r,i,o,s){t[n]=r,i&&(t[i]=o),t.$index=e,t.$first=0===e,t.$last=e===s-1,t.$middle=!(t.$first||t.$last),t.$odd=!(t.$even=0===(1&e))},c=function(t){return t.clone[0]},f=function(t){return t.clone[t.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,p){var h=p.ngRepeat,d=e.createComment(" end ngRepeat: "+h+" "),m=h.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!m)throw l("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",h);var v=m[1],g=m[2],y=m[3],$=m[4];if(m=v.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!m)throw l("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",v);var b=m[3]||m[1],w=m[2];if(y&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(y)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(y)))throw l("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",y);var x,_,T,C,S={$id:Qt};return $?x=t($):(T=function(t,e){return Qt(e)},C=function(t){return t}),function(t,e,r,p,m){x&&(_=function(e,n,r){return w&&(S[w]=e),S[b]=n,S.$index=r,x(t,S)});var v=vt();t.$watchCollection(g,function(r){var p,g,$,x,S,k,E,A,O,j,P,N,D=e[0],M=vt();if(y&&(t[y]=r),i(r))O=r,A=_||T;else{A=_||C,O=[];for(var I in r)Tr.call(r,I)&&"$"!==I.charAt(0)&&O.push(I)}for(x=O.length,P=new Array(x),p=0;x>p;p++)if(S=r===O?p:O[p],k=r[S],E=A(S,k,p),v[E])j=v[E],delete v[E],M[E]=j,P[p]=j;else{if(M[E])throw o(P,function(t){t&&t.scope&&(v[t.id]=t)}),l("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",h,E,k);P[p]={id:E,scope:n,clone:n},M[E]=!0}for(var R in v){if(j=v[R],N=mt(j.clone),s.leave(N),N[0].parentNode)for(p=0,g=N.length;g>p;p++)N[p][a]=!0;j.scope.$destroy()}for(p=0;x>p;p++)if(S=r===O?p:O[p],k=r[S],j=P[p],j.scope){$=D;do $=$.nextSibling;while($&&$[a]);c(j)!=$&&s.move(mt(j.clone),null,Ar(D)),D=f(j),u(j.scope,p,b,k,w,S,x)}else m(function(t,e){j.scope=e;var n=d.cloneNode(!1);t[t.length++]=n,s.enter(t,null,Ar(D)),D=n,j.clone=t,M[j.id]=j,u(j.scope,p,b,k,w,S,x)});v=M})}}}}],ys="ng-hide",$s="ng-hide-animate",bs=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngShow,function(e){t[e?"removeClass":"addClass"](n,ys,{tempClasses:$s})})}}}],ws=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngHide,function(e){t[e?"addClass":"removeClass"](n,ys,{tempClasses:$s})})}}}],xs=er(function(t,e,n){t.$watch(n.ngStyle,function(t,n){n&&t!==n&&o(n,function(t,n){e.css(n,"")}),t&&e.css(t)},!0)}),_s=["$animate",function(t){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,s){var a=i.ngSwitch||i.on,l=[],u=[],c=[],f=[],p=function(t,e){return function(){t.splice(e,1)}};n.$watch(a,function(n){var r,i;for(r=0,i=c.length;i>r;++r)t.cancel(c[r]);for(c.length=0,r=0,i=f.length;i>r;++r){var a=mt(u[r].clone);f[r].$destroy();var h=c[r]=t.leave(a);h.then(p(c,r))}u.length=0,f.length=0,(l=s.cases["!"+n]||s.cases["?"])&&o(l,function(n){n.transclude(function(r,i){f.push(i);var o=n.element;r[r.length++]=e.createComment(" end ngSwitchWhen: ");var s={clone:r};u.push(s),t.enter(r,o.parent(),o)})})})}}}],Ts=er({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:e})}}),Cs=er({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:e})}}),Ss=er({restrict:"EAC",link:function(t,e,n,i,o){if(!o)throw r("ngTransclude")("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",K(e));o(function(t){e.empty(),e.append(t)})}}),ks=["$templateCache",function(t){return{restrict:"E",terminal:!0,compile:function(e,n){if("text/ng-template"==n.type){var r=n.id,i=e[0].text;t.put(r,i)}}}}],Es={$setViewValue:m,$render:m},As=["$element","$scope","$attrs",function(t,r,i){var o=this,s=new Zt;o.ngModelCtrl=Es,o.unknownOption=Ar(e.createElement("option")),o.renderUnknownOption=function(e){var n="? "+Qt(e)+" ?";o.unknownOption.val(n),t.prepend(o.unknownOption),t.val(n)},r.$on("$destroy",function(){o.renderUnknownOption=m}),o.removeUnknownOption=function(){o.unknownOption.parent()&&o.unknownOption.remove()},o.readValue=function(){return o.removeUnknownOption(),t.val()},o.writeValue=function(e){o.hasOption(e)?(o.removeUnknownOption(),t.val(e),""===e&&o.emptyOption.prop("selected",!0)):null==e&&o.emptyOption?(o.removeUnknownOption(),t.val("")):o.renderUnknownOption(e)},o.addOption=function(t,e){ht(t,'"option value"'),""===t&&(o.emptyOption=e);var n=s.get(t)||0;s.put(t,n+1),o.ngModelCtrl.$render(),br(e)},o.removeOption=function(t){var e=s.get(t);e&&(1===e?(s.remove(t),""===t&&(o.emptyOption=n)):s.put(t,e-1))},o.hasOption=function(t){return!!s.get(t)},o.registerOption=function(t,e,n,r,i){if(r){var s;n.$observe("value",function(t){b(s)&&o.removeOption(s),s=t,o.addOption(t,e)})}else i?t.$watch(i,function(t,r){n.$set("value",t),r!==t&&o.removeOption(r),o.addOption(t,e)}):o.addOption(n.value,e);e.on("$destroy",function(){o.removeOption(n.value),o.ngModelCtrl.$render()})}}],Os=function(){function t(t,e,n,r){var i=r[1];if(i){var s=r[0];if(s.ngModelCtrl=i,i.$render=function(){s.writeValue(i.$viewValue)},e.on("change",function(){t.$apply(function(){i.$setViewValue(s.readValue())})}),n.multiple){s.readValue=function(){var t=[];return o(e.find("option"),function(e){e.selected&&t.push(e.value)}),t},s.writeValue=function(t){var n=new Zt(t);o(e.find("option"),function(t){t.selected=b(n.get(t.value))})};var a,l=NaN;t.$watch(function(){l!==i.$viewValue||H(a,i.$viewValue)||(a=V(i.$viewValue),i.$render()),l=i.$viewValue}),i.$isEmpty=function(t){return!t||0===t.length}}}}return{restrict:"E",require:["select","?ngModel"],controller:As,priority:1,link:{pre:t}}},js=["$interpolate",function(t){return{restrict:"E",priority:100,compile:function(e,n){if(b(n.value))var r=t(n.value,!0);else{var i=t(e.text(),!0);i||n.$set("value",e.text())}return function(t,e,n){var o="$selectController",s=e.parent(),a=s.data(o)||s.parent().data(o);a&&a.registerOption(t,e,n,r,i)}}}}],Ps=g({restrict:"E",terminal:!1}),Ns=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){r&&(n.required=!0,r.$validators.required=function(t,e){return!n.required||!r.$isEmpty(e)},n.$observe("required",function(){r.$validate()}))}}},Ds=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,i,o){if(o){var s,a=i.ngPattern||i.pattern;i.$observe("pattern",function(t){if(_(t)&&t.length>0&&(t=new RegExp("^"+t+"$")),t&&!t.test)throw r("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",a,t,K(e));s=t||n,o.$validate()}),o.$validators.pattern=function(t,e){return o.$isEmpty(e)||$(s)||s.test(e)}}}}},Ms=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=-1;n.$observe("maxlength",function(t){var e=h(t);i=isNaN(e)?-1:e,r.$validate()}),r.$validators.maxlength=function(t,e){return 0>i||r.$isEmpty(e)||e.length<=i}}}}},Is=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=0;n.$observe("minlength",function(t){i=h(t)||0,r.$validate()}),r.$validators.minlength=function(t,e){return r.$isEmpty(e)||e.length>=i}}}}};return t.angular.bootstrap?void console.log("WARNING: Tried to load angular more than once."):(ct(),bt(qr),qr.module("ngLocale",[],["$provide",function(t){function e(t){t+="";var e=t.indexOf(".");return-1==e?0:t.length-e-1}function r(t,r){var i=r;n===i&&(i=Math.min(e(t),3));var o=Math.pow(10,i),s=(t*o|0)%o;return{v:i,f:s}}var i={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};t.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",pluralCat:function(t,e){var n=0|t,o=r(t,e);return 1==n&&0==o.v?i.ONE:i.OTHER}})}]),void Ar(e).ready(function(){ot(e,st)}))}(window,document),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ui.router"),function(t,e,n){"use strict";function r(t,e){return F(new(F(function(){},{prototype:t})),e)}function i(t){return q(arguments,function(e){e!==t&&q(e,function(e,n){t.hasOwnProperty(n)||(t[n]=e)})}),t}function o(t,e){var n=[];for(var r in t.path){if(t.path[r]!==e.path[r])break;n.push(t.path[r])}return n}function s(t){if(Object.keys)return Object.keys(t);var e=[];return q(t,function(t,n){e.push(n)}),e}function a(t,e){if(Array.prototype.indexOf)return t.indexOf(e,Number(arguments[2])||0);var n=t.length>>>0,r=Number(arguments[2])||0;for(r=0>r?Math.ceil(r):Math.floor(r),0>r&&(r+=n);n>r;r++)if(r in t&&t[r]===e)return r;return-1}function l(t,e,n,r){var i,l=o(n,r),u={},c=[];for(var f in l)if(l[f].params&&(i=s(l[f].params),i.length))for(var p in i)a(c,i[p])>=0||(c.push(i[p]),u[i[p]]=t[i[p]]);return F({},u,e)}function u(t,e,n){if(!n){n=[];for(var r in t)n.push(r)}for(var i=0;i<n.length;i++){var o=n[i];if(t[o]!=e[o])return!1}return!0}function c(t,e){var n={};return q(t,function(t){n[t]=e[t]}),n}function f(t){var e={},n=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));return q(n,function(n){n in t&&(e[n]=t[n])}),e}function p(t){var e={},n=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));for(var r in t)-1==a(n,r)&&(e[r]=t[r]);return e}function h(t,e){var n=R(t),r=n?[]:{};return q(t,function(t,i){e(t,i)&&(r[n?r.length:i]=t)}),r}function d(t,e){var n=R(t)?[]:{};return q(t,function(t,r){n[r]=e(t,r)}),n}function m(t,e){var r=1,o=2,l={},u=[],c=l,f=F(t.when(l),{$$promises:l,$$values:l});this.study=function(l){function h(t,n){if(y[n]!==o){if(g.push(n),y[n]===r)throw g.splice(0,a(g,n)),new Error("Cyclic dependency: "+g.join(" -> "));if(y[n]=r,M(t))v.push(n,[function(){return e.get(t)}],u);else{var i=e.annotate(t);q(i,function(t){t!==n&&l.hasOwnProperty(t)&&h(l[t],t)}),v.push(n,t,i)}g.pop(),y[n]=o}}function d(t){return I(t)&&t.then&&t.$$promises}if(!I(l))throw new Error("'invocables' must be an object");var m=s(l||{}),v=[],g=[],y={};return q(l,h),l=g=y=null,function(r,o,s){function a(){--b||(w||i($,o.$$values),g.$$values=$,g.$$promises=g.$$promises||!0,delete g.$$inheritedValues,h.resolve($))}function l(t){g.$$failure=t,h.reject(t)}function u(n,i,o){function u(t){f.reject(t),l(t)}function c(){if(!N(g.$$failure))try{f.resolve(e.invoke(i,s,$)),f.promise.then(function(t){$[n]=t,a()},u)}catch(t){u(t)}}var f=t.defer(),p=0;q(o,function(t){y.hasOwnProperty(t)&&!r.hasOwnProperty(t)&&(p++,y[t].then(function(e){$[t]=e,--p||c()},u))}),p||c(),y[n]=f.promise}if(d(r)&&s===n&&(s=o,o=r,r=null),r){if(!I(r))throw new Error("'locals' must be an object")}else r=c;if(o){if(!d(o))throw new Error("'parent' must be a promise returned by $resolve.resolve()")}else o=f;var h=t.defer(),g=h.promise,y=g.$$promises={},$=F({},r),b=1+v.length/3,w=!1;if(N(o.$$failure))return l(o.$$failure),g;o.$$inheritedValues&&i($,p(o.$$inheritedValues,m)),F(y,o.$$promises),o.$$values?(w=i($,p(o.$$values,m)),g.$$inheritedValues=p(o.$$values,m),a()):(o.$$inheritedValues&&(g.$$inheritedValues=p(o.$$inheritedValues,m)),o.then(a,l));for(var x=0,_=v.length;_>x;x+=3)r.hasOwnProperty(v[x])?a():u(v[x],v[x+1],v[x+2]);return g}},this.resolve=function(t,e,n,r){return this.study(t)(e,n,r)}}function v(t,e,n){this.fromConfig=function(t,e,n){return N(t.template)?this.fromString(t.template,e):N(t.templateUrl)?this.fromUrl(t.templateUrl,e):N(t.templateProvider)?this.fromProvider(t.templateProvider,e,n):null},this.fromString=function(t,e){return D(t)?t(e):t},this.fromUrl=function(n,r){return D(n)&&(n=n(r)),null==n?null:t.get(n,{cache:e,headers:{Accept:"text/html"}}).then(function(t){return t.data})},this.fromProvider=function(t,e,r){return n.invoke(t,null,r||{params:e})}}function g(t,e,i){function o(e,n,r,i){if(v.push(e),d[e])return d[e];if(!/^\w+(-+\w+)*(?:\[\])?$/.test(e))throw new Error("Invalid parameter name '"+e+"' in pattern '"+t+"'");if(m[e])throw new Error("Duplicate parameter name '"+e+"' in pattern '"+t+"'");return m[e]=new V.Param(e,n,r,i),m[e]}function s(t,e,n,r){var i=["",""],o=t.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!e)return o;switch(n){case!1:i=["(",")"+(r?"?":"")];break;case!0:i=["?(",")?"];break;default:i=["("+n+"|",")?"]}return o+i[0]+e+i[1]}function a(i,o){var s,a,l,u,c;return s=i[2]||i[3],c=e.params[s],l=t.substring(p,i.index),a=o?i[4]:i[4]||("*"==i[1]?".*":null),u=V.type(a||"string")||r(V.type("string"),{pattern:new RegExp(a,e.caseInsensitive?"i":n)}),{id:s,regexp:a,segment:l,type:u,cfg:c}}e=F({params:{}},I(e)?e:{});var l,u=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,c=/([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,f="^",p=0,h=this.segments=[],d=i?i.params:{},m=this.params=i?i.params.$$new():new V.ParamSet,v=[];this.source=t;for(var g,y,$;(l=u.exec(t))&&(g=a(l,!1),!(g.segment.indexOf("?")>=0));)y=o(g.id,g.type,g.cfg,"path"),f+=s(g.segment,y.type.pattern.source,y.squash,y.isOptional),h.push(g.segment),p=u.lastIndex;$=t.substring(p);var b=$.indexOf("?");if(b>=0){var w=this.sourceSearch=$.substring(b);if($=$.substring(0,b),this.sourcePath=t.substring(0,p+b),w.length>0)for(p=0;l=c.exec(w);)g=a(l,!0),y=o(g.id,g.type,g.cfg,"search"),p=u.lastIndex}else this.sourcePath=t,this.sourceSearch="";f+=s($)+(e.strict===!1?"/?":"")+"$",h.push($),this.regexp=new RegExp(f,e.caseInsensitive?"i":n),this.prefix=h[0],this.$$paramNames=v}function y(t){F(this,t)}function $(){function t(t){return null!=t?t.toString().replace(/\//g,"%2F"):t}function i(t){return null!=t?t.toString().replace(/%2F/g,"/"):t}function o(){return{strict:m,caseInsensitive:p}}function l(t){return D(t)||R(t)&&D(t[t.length-1])}function u(){for(;x.length;){var t=x.shift();if(t.pattern)throw new Error("You cannot override a type's .pattern at runtime.");e.extend(b[t.name],f.invoke(t.def))}}function c(t){F(this,t||{})}V=this;var f,p=!1,m=!0,v=!1,b={},w=!0,x=[],_={string:{encode:t,decode:i,is:function(t){return null==t||!N(t)||"string"==typeof t},pattern:/[^/]*/},"int":{encode:t,decode:function(t){return parseInt(t,10)},is:function(t){return N(t)&&this.decode(t.toString())===t},pattern:/\d+/},bool:{encode:function(t){return t?1:0},decode:function(t){return 0!==parseInt(t,10)},is:function(t){return t===!0||t===!1},pattern:/0|1/},date:{encode:function(t){return this.is(t)?[t.getFullYear(),("0"+(t.getMonth()+1)).slice(-2),("0"+t.getDate()).slice(-2)].join("-"):n},decode:function(t){if(this.is(t))return t;var e=this.capture.exec(t);return e?new Date(e[1],e[2]-1,e[3]):n},is:function(t){return t instanceof Date&&!isNaN(t.valueOf())},equals:function(t,e){return this.is(t)&&this.is(e)&&t.toISOString()===e.toISOString()},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/},json:{encode:e.toJson,decode:e.fromJson,is:e.isObject,equals:e.equals,pattern:/[^/]*/},any:{encode:e.identity,decode:e.identity,equals:e.equals,pattern:/.*/}};$.$$getDefaultValue=function(t){if(!l(t.value))return t.value;if(!f)throw new Error("Injectable functions cannot be called at configuration time");return f.invoke(t.value)},this.caseInsensitive=function(t){return N(t)&&(p=t),p},this.strictMode=function(t){return N(t)&&(m=t),m},this.defaultSquashPolicy=function(t){if(!N(t))return v;if(t!==!0&&t!==!1&&!M(t))throw new Error("Invalid squash policy: "+t+". Valid policies: false, true, arbitrary-string");return v=t,t},this.compile=function(t,e){return new g(t,F(o(),e))},this.isMatcher=function(t){if(!I(t))return!1;var e=!0;return q(g.prototype,function(n,r){D(n)&&(e=e&&N(t[r])&&D(t[r]))}),e},this.type=function(t,e,n){if(!N(e))return b[t];if(b.hasOwnProperty(t))throw new Error("A type named '"+t+"' has already been defined.");return b[t]=new y(F({name:t},e)),n&&(x.push({name:t,def:n}),w||u()),this},q(_,function(t,e){b[e]=new y(F({name:e},t))}),b=r(b,{}),this.$get=["$injector",function(t){return f=t,w=!1,u(),q(_,function(t,e){b[e]||(b[e]=new y(t))}),this}],this.Param=function(t,e,r,i){function o(t){var e=I(t)?s(t):[],n=-1===a(e,"value")&&-1===a(e,"type")&&-1===a(e,"squash")&&-1===a(e,"array");return n&&(t={value:t}),t.$$fn=l(t.value)?t.value:function(){return t.value},t}function u(e,n,r){if(e.type&&n)throw new Error("Param '"+t+"' has two type configurations.");return n?n:e.type?e.type instanceof y?e.type:new y(e.type):"config"===r?b.any:b.string}function c(){var e={array:"search"===i?"auto":!1},n=t.match(/\[\]$/)?{array:!0}:{};return F(e,n,r).array}function p(t,e){var n=t.squash;if(!e||n===!1)return!1;if(!N(n)||null==n)return v;if(n===!0||M(n))return n;throw new Error("Invalid squash policy: '"+n+"'. Valid policies: false, true, or arbitrary string")}function m(t,e,r,i){var o,s,l=[{from:"",to:r||e?n:""},{from:null,to:r||e?n:""}];return o=R(t.replace)?t.replace:[],M(i)&&o.push({from:i,to:n}),s=d(o,function(t){return t.from}),h(l,function(t){return-1===a(s,t.from)}).concat(o)}function g(){if(!f)throw new Error("Injectable functions cannot be called at configuration time");var t=f.invoke(r.$$fn);if(null!==t&&t!==n&&!x.type.is(t))throw new Error("Default value ("+t+") for parameter '"+x.id+"' is not an instance of Type ("+x.type.name+")");return t}function $(t){function e(t){return function(e){return e.from===t}}function n(t){var n=d(h(x.replace,e(t)),function(t){return t.to});return n.length?n[0]:t}return t=n(t),N(t)?x.type.$normalize(t):g()}function w(){return"{Param:"+t+" "+e+" squash: '"+C+"' optional: "+T+"}"}var x=this;r=o(r),e=u(r,e,i);var _=c();e=_?e.$asArray(_,"search"===i):e,"string"!==e.name||_||"path"!==i||r.value!==n||(r.value="");var T=r.value!==n,C=p(r,T),S=m(r,_,T,C);F(this,{id:t,type:e,location:i,array:_,squash:C,replace:S,isOptional:T,value:$,dynamic:n,config:r,toString:w})},c.prototype={$$new:function(){return r(this,F(new c,{$$parent:this}))},$$keys:function(){for(var t=[],e=[],n=this,r=s(c.prototype);n;)e.push(n),n=n.$$parent;return e.reverse(),q(e,function(e){q(s(e),function(e){-1===a(t,e)&&-1===a(r,e)&&t.push(e)})}),t},$$values:function(t){var e={},n=this;return q(n.$$keys(),function(r){e[r]=n[r].value(t&&t[r])}),e},$$equals:function(t,e){var n=!0,r=this;return q(r.$$keys(),function(i){var o=t&&t[i],s=e&&e[i];r[i].type.equals(o,s)||(n=!1)}),n},$$validates:function(t){var r,i,o,s,a,l=this.$$keys();for(r=0;r<l.length&&(i=this[l[r]],o=t[l[r]],o!==n&&null!==o||!i.isOptional);r++){if(s=i.type.$normalize(o),!i.type.is(s))return!1;if(a=i.type.encode(s),e.isString(a)&&!i.type.pattern.exec(a))return!1}return!0},$$parent:n},this.ParamSet=c}function b(t,r){function i(t){var e=/^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(t.source);return null!=e?e[1].replace(/\\(.)/g,"$1"):""}function o(t,e){return t.replace(/\$(\$|\d{1,2})/,function(t,n){return e["$"===n?0:Number(n)]})}function s(t,e,n){if(!n)return!1;var r=t.invoke(e,e,{$match:n});return N(r)?r:!0}function a(r,i,o,s){function a(t,e,n){return"/"===m?t:e?m.slice(0,-1)+t:n?m.slice(1)+t:t}function p(t){function e(t){var e=t(o,r);return e?(M(e)&&r.replace().url(e),!0):!1}if(!t||!t.defaultPrevented){d&&r.url()===d;d=n;var i,s=u.length;for(i=0;s>i;i++)if(e(u[i]))return;c&&e(c)}}function h(){return l=l||i.$on("$locationChangeSuccess",p)}var d,m=s.baseHref(),v=r.url();return f||h(),{sync:function(){p()},listen:function(){return h()},update:function(t){return t?void(v=r.url()):void(r.url()!==v&&(r.url(v),r.replace()))},push:function(t,e,i){var o=t.format(e||{});null!==o&&e&&e["#"]&&(o+="#"+e["#"]),r.url(o),d=i&&i.$$avoidResync?r.url():n,i&&i.replace&&r.replace()},href:function(n,i,o){if(!n.validates(i))return null;var s=t.html5Mode();e.isObject(s)&&(s=s.enabled);var l=n.format(i);if(o=o||{},s||null===l||(l="#"+t.hashPrefix()+l),null!==l&&i&&i["#"]&&(l+="#"+i["#"]),l=a(l,s,o.absolute),!o.absolute||!l)return l;var u=!s&&l?"/":"",c=r.port();return c=80===c||443===c?"":":"+c,[r.protocol(),"://",r.host(),c,u,l].join("")}}}var l,u=[],c=null,f=!1;this.rule=function(t){if(!D(t))throw new Error("'rule' must be a function");return u.push(t),this},this.otherwise=function(t){if(M(t)){var e=t;t=function(){return e}}else if(!D(t))throw new Error("'rule' must be a function");return c=t,this},this.when=function(t,e){var n,a=M(e);if(M(t)&&(t=r.compile(t)),!a&&!D(e)&&!R(e))throw new Error("invalid 'handler' in when()");var l={matcher:function(t,e){return a&&(n=r.compile(e),e=["$match",function(t){return n.format(t)}]),F(function(n,r){return s(n,e,t.exec(r.path(),r.search()))},{prefix:M(t.prefix)?t.prefix:""})},regex:function(t,e){if(t.global||t.sticky)throw new Error("when() RegExp must not be global or sticky");return a&&(n=e,e=["$match",function(t){return o(n,t)}]),F(function(n,r){return s(n,e,t.exec(r.path()))},{prefix:i(t)})}},u={matcher:r.isMatcher(t),regex:t instanceof RegExp};for(var c in u)if(u[c])return this.rule(l[c](t,e));throw new Error("invalid 'what' in when()")},this.deferIntercept=function(t){t===n&&(t=!0),f=t},this.$get=a,a.$inject=["$location","$rootScope","$injector","$browser"]}function w(t,i){function o(t){return 0===t.indexOf(".")||0===t.indexOf("^")}function p(t,e){if(!t)return n;var r=M(t),i=r?t:t.name,s=o(i);if(s){if(!e)throw new Error("No reference point given for path '"+i+"'");e=p(e);for(var a=i.split("."),l=0,u=a.length,c=e;u>l;l++)if(""!==a[l]||0!==l){if("^"!==a[l])break;if(!c.parent)throw new Error("Path '"+i+"' not valid for state '"+e.name+"'");c=c.parent}else c=e;a=a.slice(l).join("."),i=c.name+(c.name&&a?".":"")+a}var f=C[i];return!f||!r&&(r||f!==t&&f.self!==t)?n:f}function h(t,e){S[t]||(S[t]=[]),S[t].push(e)}function m(t){for(var e=S[t]||[];e.length;)v(e.shift())}function v(e){e=r(e,{self:e,resolve:e.resolve||{},toString:function(){return this.name}});var n=e.name;if(!M(n)||n.indexOf("@")>=0)throw new Error("State must have a valid name");if(C.hasOwnProperty(n))throw new Error("State '"+n+"'' is already defined");var i=-1!==n.indexOf(".")?n.substring(0,n.lastIndexOf(".")):M(e.parent)?e.parent:I(e.parent)&&M(e.parent.name)?e.parent.name:"";if(i&&!C[i])return h(i,e.self);for(var o in E)D(E[o])&&(e[o]=E[o](e,E.$delegates[o]));return C[n]=e,!e[k]&&e.url&&t.when(e.url,["$match","$stateParams",function(t,n){T.$current.navigable==e&&u(t,n)||T.transitionTo(e,t,{inherit:!0,location:!1})}]),m(n),e}function g(t){return t.indexOf("*")>-1}function y(t){for(var e=t.split("."),n=T.$current.name.split("."),r=0,i=e.length;i>r;r++)"*"===e[r]&&(n[r]="*");
return"**"===e[0]&&(n=n.slice(a(n,e[1])),n.unshift("**")),"**"===e[e.length-1]&&(n.splice(a(n,e[e.length-2])+1,Number.MAX_VALUE),n.push("**")),e.length!=n.length?!1:n.join("")===e.join("")}function $(t,e){return M(t)&&!N(e)?E[t]:D(e)&&M(t)?(E[t]&&!E.$delegates[t]&&(E.$delegates[t]=E[t]),E[t]=e,this):this}function b(t,e){return I(t)?e=t:e.name=t,v(e),this}function w(t,i,o,a,f,h,m,v,$){function b(e,n,r,o){var s=t.$broadcast("$stateNotFound",e,n,r);if(s.defaultPrevented)return m.update(),A;if(!s.retry)return null;if(o.$retry)return m.update(),O;var a=T.transition=i.when(s.retry);return a.then(function(){return a!==T.transition?S:(e.options.$retry=!0,T.transitionTo(e.to,e.toParams,e.options))},function(){return A}),m.update(),a}function w(t,n,r,s,l,u){function p(){var n=[];return q(t.views,function(r,i){var s=r.resolve&&r.resolve!==t.resolve?r.resolve:{};s.$template=[function(){return o.load(i,{view:r,locals:l.globals,params:h,notify:u.notify})||""}],n.push(f.resolve(s,l.globals,l.resolve,t).then(function(n){if(D(r.controllerProvider)||R(r.controllerProvider)){var o=e.extend({},s,l.globals);n.$$controller=a.invoke(r.controllerProvider,null,o)}else n.$$controller=r.controller;n.$$state=t,n.$$controllerAs=r.controllerAs,l[i]=n}))}),i.all(n).then(function(){return l.globals})}var h=r?n:c(t.params.$$keys(),n),d={$stateParams:h};l.resolve=f.resolve(t.resolve,d,l.resolve,t);var m=[l.resolve.then(function(t){l.globals=t})];return s&&m.push(s),i.all(m).then(p).then(function(t){return l})}var S=i.reject(new Error("transition superseded")),E=i.reject(new Error("transition prevented")),A=i.reject(new Error("transition aborted")),O=i.reject(new Error("transition failed"));return _.locals={resolve:null,globals:{$stateParams:{}}},T={params:{},current:_.self,$current:_,transition:null},T.reload=function(t){return T.transitionTo(T.current,h,{reload:t||!0,inherit:!1,notify:!0})},T.go=function(t,e,n){return T.transitionTo(t,e,F({inherit:!0,relative:T.$current},n))},T.transitionTo=function(e,n,o){n=n||{},o=F({location:!0,inherit:!1,relative:null,notify:!0,reload:!1,$retry:!1},o||{});var s,u=T.$current,f=T.params,d=u.path,v=p(e,o.relative),g=n["#"];if(!N(v)){var y={to:e,toParams:n,options:o},$=b(y,u.self,f,o);if($)return $;if(e=y.to,n=y.toParams,o=y.options,v=p(e,o.relative),!N(v)){if(!o.relative)throw new Error("No such state '"+e+"'");throw new Error("Could not resolve '"+e+"' from state '"+o.relative+"'")}}if(v[k])throw new Error("Cannot transition to abstract state '"+e+"'");if(o.inherit&&(n=l(h,n||{},T.$current,v)),!v.params.$$validates(n))return O;n=v.params.$$values(n),e=v;var C=e.path,A=0,j=C[A],P=_.locals,D=[];if(o.reload){if(M(o.reload)||I(o.reload)){if(I(o.reload)&&!o.reload.name)throw new Error("Invalid reload state object");var R=o.reload===!0?d[0]:p(o.reload);if(o.reload&&!R)throw new Error("No such reload state '"+(M(o.reload)?o.reload:o.reload.name)+"'");for(;j&&j===d[A]&&j!==R;)P=D[A]=j.locals,A++,j=C[A]}}else for(;j&&j===d[A]&&j.ownParams.$$equals(n,f);)P=D[A]=j.locals,A++,j=C[A];if(x(e,n,u,f,P,o))return g&&(n["#"]=g),T.params=n,L(T.params,h),o.location&&e.navigable&&e.navigable.url&&(m.push(e.navigable.url,n,{$$avoidResync:!0,replace:"replace"===o.location}),m.update(!0)),T.transition=null,i.when(T.current);if(n=c(e.params.$$keys(),n||{}),o.notify&&t.$broadcast("$stateChangeStart",e.self,n,u.self,f).defaultPrevented)return t.$broadcast("$stateChangeCancel",e.self,n,u.self,f),m.update(),E;for(var q=i.when(P),V=A;V<C.length;V++,j=C[V])P=D[V]=r(P),q=w(j,n,j===e,q,P,o);var H=T.transition=q.then(function(){var r,i,s;if(T.transition!==H)return S;for(r=d.length-1;r>=A;r--)s=d[r],s.self.onExit&&a.invoke(s.self.onExit,s.self,s.locals.globals),s.locals=null;for(r=A;r<C.length;r++)i=C[r],i.locals=D[r],i.self.onEnter&&a.invoke(i.self.onEnter,i.self,i.locals.globals);return g&&(n["#"]=g),T.transition!==H?S:(T.$current=e,T.current=e.self,T.params=n,L(T.params,h),T.transition=null,o.location&&e.navigable&&m.push(e.navigable.url,e.navigable.locals.globals.$stateParams,{$$avoidResync:!0,replace:"replace"===o.location}),o.notify&&t.$broadcast("$stateChangeSuccess",e.self,n,u.self,f),m.update(!0),T.current)},function(r){return T.transition!==H?S:(T.transition=null,s=t.$broadcast("$stateChangeError",e.self,n,u.self,f,r),s.defaultPrevented||m.update(),i.reject(r))});return H},T.is=function(t,e,r){r=F({relative:T.$current},r||{});var i=p(t,r.relative);return N(i)?T.$current!==i?!1:e?u(i.params.$$values(e),h):!0:n},T.includes=function(t,e,r){if(r=F({relative:T.$current},r||{}),M(t)&&g(t)){if(!y(t))return!1;t=T.$current.name}var i=p(t,r.relative);return N(i)?N(T.$current.includes[i.name])?e?u(i.params.$$values(e),h,s(e)):!0:!1:n},T.href=function(t,e,r){r=F({lossy:!0,inherit:!0,absolute:!1,relative:T.$current},r||{});var i=p(t,r.relative);if(!N(i))return null;r.inherit&&(e=l(h,e||{},T.$current,i));var o=i&&r.lossy?i.navigable:i;return o&&o.url!==n&&null!==o.url?m.href(o.url,c(i.params.$$keys().concat("#"),e||{}),{absolute:r.absolute}):null},T.get=function(t,e){if(0===arguments.length)return d(s(C),function(t){return C[t].self});var n=p(t,e||T.$current);return n&&n.self?n.self:null},T}function x(t,e,n,r,i,o){function s(t,e,n){function r(e){return"search"!=t.params[e].location}var i=t.params.$$keys().filter(r),o=f.apply({},[t.params].concat(i)),s=new V.ParamSet(o);return s.$$equals(e,n)}return!o.reload&&t===n&&(i===n.locals||t.self.reloadOnSearch===!1&&s(n,r,e))?!0:void 0}var _,T,C={},S={},k="abstract",E={parent:function(t){if(N(t.parent)&&t.parent)return p(t.parent);var e=/^(.+)\.[^.]+$/.exec(t.name);return e?p(e[1]):_},data:function(t){return t.parent&&t.parent.data&&(t.data=t.self.data=F({},t.parent.data,t.data)),t.data},url:function(t){var e=t.url,n={params:t.params||{}};if(M(e))return"^"==e.charAt(0)?i.compile(e.substring(1),n):(t.parent.navigable||_).url.concat(e,n);if(!e||i.isMatcher(e))return e;throw new Error("Invalid url '"+e+"' in state '"+t+"'")},navigable:function(t){return t.url?t:t.parent?t.parent.navigable:null},ownParams:function(t){var e=t.url&&t.url.params||new V.ParamSet;return q(t.params||{},function(t,n){e[n]||(e[n]=new V.Param(n,null,t,"config"))}),e},params:function(t){return t.parent&&t.parent.params?F(t.parent.params.$$new(),t.ownParams):new V.ParamSet},views:function(t){var e={};return q(N(t.views)?t.views:{"":t},function(n,r){r.indexOf("@")<0&&(r+="@"+t.parent.name),e[r]=n}),e},path:function(t){return t.parent?t.parent.path.concat(t):[]},includes:function(t){var e=t.parent?F({},t.parent.includes):{};return e[t.name]=!0,e},$delegates:{}};_=v({name:"",url:"^",views:null,"abstract":!0}),_.navigable=null,this.decorator=$,this.state=b,this.$get=w,w.$inject=["$rootScope","$q","$view","$injector","$resolve","$stateParams","$urlRouter","$location","$urlMatcherFactory"]}function x(){function t(t,e){return{load:function(n,r){var i,o={template:null,controller:null,view:null,locals:null,notify:!0,async:!0,params:{}};return r=F(o,r),r.view&&(i=e.fromConfig(r.view,r.params,r.locals)),i&&r.notify&&t.$broadcast("$viewContentLoading",r),i}}}this.$get=t,t.$inject=["$rootScope","$templateFactory"]}function _(){var t=!1;this.useAnchorScroll=function(){t=!0},this.$get=["$anchorScroll","$timeout",function(e,n){return t?e:function(t){return n(function(){t[0].scrollIntoView()},0,!1)}}]}function T(t,n,r,i){function o(){return n.has?function(t){return n.has(t)?n.get(t):null}:function(t){try{return n.get(t)}catch(e){return null}}}function s(t,e){var n=function(){return{enter:function(t,e,n){e.after(t),n()},leave:function(t,e){t.remove(),e()}}};if(u)return{enter:function(t,e,n){var r=u.enter(t,null,e,n);r&&r.then&&r.then(n)},leave:function(t,e){var n=u.leave(t,e);n&&n.then&&n.then(e)}};if(l){var r=l&&l(e,t);return{enter:function(t,e,n){r.enter(t,null,e),n()},leave:function(t,e){r.leave(t),e()}}}return n()}var a=o(),l=a("$animator"),u=a("$animate"),c={restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(n,o,a){return function(n,o,l){function u(){f&&(f.remove(),f=null),h&&(h.$destroy(),h=null),p&&(g.leave(p,function(){f=null}),f=p,p=null)}function c(s){var c,f=S(n,l,o,i),y=f&&t.$current&&t.$current.locals[f];if(s||y!==d){c=n.$new(),d=t.$current.locals[f];var $=a(c,function(t){g.enter(t,o,function(){h&&h.$emit("$viewContentAnimationEnded"),(e.isDefined(v)&&!v||n.$eval(v))&&r(t)}),u()});p=$,h=c,h.$emit("$viewContentLoaded"),h.$eval(m)}}var f,p,h,d,m=l.onload||"",v=l.autoscroll,g=s(l,n);n.$on("$stateChangeSuccess",function(){c(!1)}),n.$on("$viewContentLoading",function(){c(!1)}),c(!0)}}};return c}function C(t,e,n,r){return{restrict:"ECA",priority:-400,compile:function(i){var o=i.html();return function(i,s,a){var l=n.$current,u=S(i,a,s,r),c=l&&l.locals[u];if(c){s.data("$uiView",{name:u,state:c.$$state}),s.html(c.$template?c.$template:o);var f=t(s.contents());if(c.$$controller){c.$scope=i,c.$element=s;var p=e(c.$$controller,c);c.$$controllerAs&&(i[c.$$controllerAs]=p),s.data("$ngControllerController",p),s.children().data("$ngControllerController",p)}f(i)}}}}}function S(t,e,n,r){var i=r(e.uiView||e.name||"")(t),o=n.inheritedData("$uiView");return i.indexOf("@")>=0?i:i+"@"+(o?o.state.name:"")}function k(t,e){var n,r=t.match(/^\s*({[^}]*})\s*$/);if(r&&(t=e+"("+r[1]+")"),n=t.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/),!n||4!==n.length)throw new Error("Invalid state ref '"+t+"'");return{state:n[1],paramExpr:n[3]||null}}function E(t){var e=t.parent().inheritedData("$uiView");return e&&e.state&&e.state.name?e.state:void 0}function A(t,n){var r=["location","inherit","reload","absolute"];return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(i,o,s,a){var l=k(s.uiSref,t.current.name),u=null,c=E(o)||t.$current,f="[object SVGAnimatedString]"===Object.prototype.toString.call(o.prop("href"))?"xlink:href":"href",p=null,h="A"===o.prop("tagName").toUpperCase(),d="FORM"===o[0].nodeName,m=d?"action":f,v=!0,g={relative:c,inherit:!0},y=i.$eval(s.uiSrefOpts)||{};e.forEach(r,function(t){t in y&&(g[t]=y[t])});var $=function(n){if(n&&(u=e.copy(n)),v){p=t.href(l.state,u,g);var r=a[1]||a[0];return r&&r.$$addStateInfo(l.state,u),null===p?(v=!1,!1):void s.$set(m,p)}};l.paramExpr&&(i.$watch(l.paramExpr,function(t,e){t!==u&&$(t)},!0),u=e.copy(i.$eval(l.paramExpr))),$(),d||o.bind("click",function(e){var r=e.which||e.button;if(!(r>1||e.ctrlKey||e.metaKey||e.shiftKey||o.attr("target"))){var i=n(function(){t.go(l.state,u,g)});e.preventDefault();var s=h&&!p?1:0;e.preventDefault=function(){s--<=0&&n.cancel(i)}}})}}}function O(t,e,n){return{restrict:"A",controller:["$scope","$element","$attrs",function(e,r,i){function o(){s()?r.addClass(l):r.removeClass(l)}function s(){for(var t=0;t<u.length;t++)if(a(u[t].state,u[t].params))return!0;return!1}function a(e,n){return"undefined"!=typeof i.uiSrefActiveEq?t.is(e.name,n):t.includes(e.name,n)}var l,u=[];l=n(i.uiSrefActiveEq||i.uiSrefActive||"",!1)(e),this.$$addStateInfo=function(e,n){var i=t.get(e,E(r));u.push({state:i||{name:e},params:n}),o()},e.$on("$stateChangeSuccess",o)}]}}function j(t){var e=function(e){return t.is(e)};return e.$stateful=!0,e}function P(t){var e=function(e){return t.includes(e)};return e.$stateful=!0,e}var N=e.isDefined,D=e.isFunction,M=e.isString,I=e.isObject,R=e.isArray,q=e.forEach,F=e.extend,L=e.copy;e.module("ui.router.util",["ng"]),e.module("ui.router.router",["ui.router.util"]),e.module("ui.router.state",["ui.router.router","ui.router.util"]),e.module("ui.router",["ui.router.state"]),e.module("ui.router.compat",["ui.router"]),m.$inject=["$q","$injector"],e.module("ui.router.util").service("$resolve",m),v.$inject=["$http","$templateCache","$injector"],e.module("ui.router.util").service("$templateFactory",v);var V;g.prototype.concat=function(t,e){var n={caseInsensitive:V.caseInsensitive(),strict:V.strictMode(),squash:V.defaultSquashPolicy()};return new g(this.sourcePath+t+this.sourceSearch,F(n,e),this)},g.prototype.toString=function(){return this.source},g.prototype.exec=function(t,e){function n(t){function e(t){return t.split("").reverse().join("")}function n(t){return t.replace(/\\-/g,"-")}var r=e(t).split(/-(?!\\)/),i=d(r,e);return d(i,n).reverse()}var r=this.regexp.exec(t);if(!r)return null;e=e||{};var i,o,s,a=this.parameters(),l=a.length,u=this.segments.length-1,c={};if(u!==r.length-1)throw new Error("Unbalanced capture group in route '"+this.source+"'");for(i=0;u>i;i++){s=a[i];var f=this.params[s],p=r[i+1];for(o=0;o<f.replace;o++)f.replace[o].from===p&&(p=f.replace[o].to);p&&f.array===!0&&(p=n(p)),c[s]=f.value(p)}for(;l>i;i++)s=a[i],c[s]=this.params[s].value(e[s]);return c},g.prototype.parameters=function(t){return N(t)?this.params[t]||null:this.$$paramNames},g.prototype.validates=function(t){return this.params.$$validates(t)},g.prototype.format=function(t){function e(t){return encodeURIComponent(t).replace(/-/g,function(t){return"%5C%"+t.charCodeAt(0).toString(16).toUpperCase()})}t=t||{};var n=this.segments,r=this.parameters(),i=this.params;if(!this.validates(t))return null;var o,s=!1,a=n.length-1,l=r.length,u=n[0];for(o=0;l>o;o++){var c=a>o,f=r[o],p=i[f],h=p.value(t[f]),m=p.isOptional&&p.type.equals(p.value(),h),v=m?p.squash:!1,g=p.type.encode(h);if(c){var y=n[o+1];if(v===!1)null!=g&&(u+=R(g)?d(g,e).join("-"):encodeURIComponent(g)),u+=y;else if(v===!0){var $=u.match(/\/$/)?/\/?(.*)/:/(.*)/;u+=y.match($)[1]}else M(v)&&(u+=v+y)}else{if(null==g||m&&v!==!1)continue;R(g)||(g=[g]),g=d(g,encodeURIComponent).join("&"+f+"="),u+=(s?"&":"?")+(f+"="+g),s=!0}}return u},y.prototype.is=function(t,e){return!0},y.prototype.encode=function(t,e){return t},y.prototype.decode=function(t,e){return t},y.prototype.equals=function(t,e){return t==e},y.prototype.$subPattern=function(){var t=this.pattern.toString();return t.substr(1,t.length-2)},y.prototype.pattern=/.*/,y.prototype.toString=function(){return"{Type:"+this.name+"}"},y.prototype.$normalize=function(t){return this.is(t)?t:this.decode(t)},y.prototype.$asArray=function(t,e){function r(t,e){function r(t,e){return function(){return t[e].apply(t,arguments)}}function i(t){return R(t)?t:N(t)?[t]:[]}function o(t){switch(t.length){case 0:return n;case 1:return"auto"===e?t[0]:t;default:return t}}function s(t){return!t}function a(t,e){return function(n){n=i(n);var r=d(n,t);return e===!0?0===h(r,s).length:o(r)}}function l(t){return function(e,n){var r=i(e),o=i(n);if(r.length!==o.length)return!1;for(var s=0;s<r.length;s++)if(!t(r[s],o[s]))return!1;return!0}}this.encode=a(r(t,"encode")),this.decode=a(r(t,"decode")),this.is=a(r(t,"is"),!0),this.equals=l(r(t,"equals")),this.pattern=t.pattern,this.$normalize=a(r(t,"$normalize")),this.name=t.name,this.$arrayMode=e}if(!t)return this;if("auto"===t&&!e)throw new Error("'auto' array mode is for query parameters only");return new r(this,t)},e.module("ui.router.util").provider("$urlMatcherFactory",$),e.module("ui.router.util").run(["$urlMatcherFactory",function(t){}]),b.$inject=["$locationProvider","$urlMatcherFactoryProvider"],e.module("ui.router.router").provider("$urlRouter",b),w.$inject=["$urlRouterProvider","$urlMatcherFactoryProvider"],e.module("ui.router.state").value("$stateParams",{}).provider("$state",w),x.$inject=[],e.module("ui.router.state").provider("$view",x),e.module("ui.router.state").provider("$uiViewScroll",_),T.$inject=["$state","$injector","$uiViewScroll","$interpolate"],C.$inject=["$compile","$controller","$state","$interpolate"],e.module("ui.router.state").directive("uiView",T),e.module("ui.router.state").directive("uiView",C),A.$inject=["$state","$timeout"],O.$inject=["$state","$stateParams","$interpolate"],e.module("ui.router.state").directive("uiSref",A).directive("uiSrefActive",O).directive("uiSrefActiveEq",O),j.$inject=["$state"],P.$inject=["$state"],e.module("ui.router.state").filter("isState",j).filter("includedByState",P)}(window,window.angular),!function(t,e){"use strict";var n=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!n.TweenLite){var r,i,o,s,a,l=function(t){var e,r=t.split("."),i=n;for(e=0;e<r.length;e++)i[r[e]]=i=i[r[e]]||{};return i},u=l("com.greensock"),c=1e-10,f=function(t){var e,n=[],r=t.length;for(e=0;e!==r;n.push(t[e++]));return n},p=function(){},h=function(){var t=Object.prototype.toString,e=t.call([]);return function(n){return null!=n&&(n instanceof Array||"object"==typeof n&&!!n.push&&t.call(n)===e)}}(),d={},m=function(r,i,o,s){this.sc=d[r]?d[r].sc:[],d[r]=this,this.gsClass=null,this.func=o;var a=[];this.check=function(u){for(var c,f,p,h,v,g=i.length,y=g;--g>-1;)(c=d[i[g]]||new m(i[g],[])).gsClass?(a[g]=c.gsClass,y--):u&&c.sc.push(this);if(0===y&&o)for(f=("com.greensock."+r).split("."),p=f.pop(),h=l(f.join("."))[p]=this.gsClass=o.apply(o,a),s&&(n[p]=h,v="undefined"!=typeof module&&module.exports,!v&&"function"==typeof define&&define.amd?define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+r.split(".").pop(),[],function(){return h}):r===e&&v&&(module.exports=h)),g=0;g<this.sc.length;g++)this.sc[g].check()},this.check(!0)},v=t._gsDefine=function(t,e,n,r){return new m(t,e,n,r)},g=u._class=function(t,e,n){return e=e||function(){},v(t,[],function(){return e},n),e};v.globals=n;var y=[0,0,1,1],$=[],b=g("easing.Ease",function(t,e,n,r){this._func=t,this._type=n||0,this._power=r||0,this._params=e?y.concat(e):y},!0),w=b.map={},x=b.register=function(t,e,n,r){for(var i,o,s,a,l=e.split(","),c=l.length,f=(n||"easeIn,easeOut,easeInOut").split(",");--c>-1;)for(o=l[c],i=r?g("easing."+o,null,!0):u.easing[o]||{},s=f.length;--s>-1;)a=f[s],w[o+"."+a]=w[a+o]=i[a]=t.getRatio?t:t[a]||new t};for(o=b.prototype,o._calcEnd=!1,o.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,n=this._power,r=1===e?1-t:2===e?t:.5>t?2*t:2*(1-t);return 1===n?r*=r:2===n?r*=r*r:3===n?r*=r*r*r:4===n&&(r*=r*r*r*r),1===e?1-r:2===e?r:.5>t?r/2:1-r/2},r=["Linear","Quad","Cubic","Quart","Quint,Strong"],i=r.length;--i>-1;)o=r[i]+",Power"+i,x(new b(null,null,1,i),o,"easeOut",!0),x(new b(null,null,2,i),o,"easeIn"+(0===i?",easeNone":"")),x(new b(null,null,3,i),o,"easeInOut");w.linear=u.easing.Linear.easeIn,w.swing=u.easing.Quad.easeInOut;var _=g("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});o=_.prototype,o.addEventListener=function(t,e,n,r,i){i=i||0;var o,l,u=this._listeners[t],c=0;for(null==u&&(this._listeners[t]=u=[]),l=u.length;--l>-1;)o=u[l],o.c===e&&o.s===n?u.splice(l,1):0===c&&o.pr<i&&(c=l+1);u.splice(c,0,{c:e,s:n,up:r,pr:i}),this!==s||a||s.wake()},o.removeEventListener=function(t,e){var n,r=this._listeners[t];if(r)for(n=r.length;--n>-1;)if(r[n].c===e)return void r.splice(n,1)},o.dispatchEvent=function(t){var e,n,r,i=this._listeners[t];if(i)for(e=i.length,n=this._eventTarget;--e>-1;)r=i[e],r&&(r.up?r.c.call(r.s||n,{type:t,target:n}):r.c.call(r.s||n))};var T=t.requestAnimationFrame,C=t.cancelAnimationFrame,S=Date.now||function(){return(new Date).getTime()},k=S();for(r=["ms","moz","webkit","o"],i=r.length;--i>-1&&!T;)T=t[r[i]+"RequestAnimationFrame"],C=t[r[i]+"CancelAnimationFrame"]||t[r[i]+"CancelRequestAnimationFrame"];g("Ticker",function(t,e){var n,r,i,o,l,u=this,f=S(),h=e!==!1&&T?"auto":!1,d=500,m=33,v="tick",g=function(t){var e,s,a=S()-k;a>d&&(f+=a-m),k+=a,u.time=(k-f)/1e3,e=u.time-l,(!n||e>0||t===!0)&&(u.frame++,l+=e+(e>=o?.004:o-e),s=!0),t!==!0&&(i=r(g)),s&&u.dispatchEvent(v)};_.call(u),u.time=u.frame=0,u.tick=function(){g(!0)},u.lagSmoothing=function(t,e){d=t||1/c,m=Math.min(e,d,0)},u.sleep=function(){null!=i&&(h&&C?C(i):clearTimeout(i),r=p,i=null,u===s&&(a=!1))},u.wake=function(t){null!==i?u.sleep():t?f+=-k+(k=S()):u.frame>10&&(k=S()-d+5),r=0===n?p:h&&T?T:function(t){return setTimeout(t,1e3*(l-u.time)+1|0)},u===s&&(a=!0),g(2)},u.fps=function(t){return arguments.length?(n=t,o=1/(n||60),l=this.time+o,void u.wake()):n},u.useRAF=function(t){return arguments.length?(u.sleep(),h=t,void u.fps(n)):h},u.fps(t),setTimeout(function(){"auto"===h&&u.frame<5&&"hidden"!==document.visibilityState&&u.useRAF(!1)},1500)}),o=u.Ticker.prototype=new u.events.EventDispatcher,o.constructor=u.Ticker;var E=g("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,X){a||s.wake();var n=this.vars.useFrames?W:X;n.add(this,n._time),this.vars.paused&&this.paused(!0)}});s=E.ticker=new u.Ticker,o=E.prototype,o._dirty=o._gc=o._initted=o._paused=!1,o._totalTime=o._time=0,o._rawPrevTime=-1,o._next=o._last=o._onUpdate=o._timeline=o.timeline=null,o._paused=!1;var A=function(){a&&S()-k>2e3&&s.wake(),setTimeout(A,2e3)};A(),o.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},o.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},o.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},o.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},o.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},o.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},o.render=function(t,e,n){},o.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,(this._gc||!this.timeline)&&this._enabled(!0),this},o.isActive=function(){var t,e=this._timeline,n=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime())>=n&&t<n+this.totalDuration()/this._timeScale},o._enabled=function(t,e){return a||s.wake(),this._gc=!t,this._active=this.isActive(),e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},o._kill=function(t,e){return this._enabled(!1,!1)},o.kill=function(t,e){return this._kill(t,e),this},o._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},o._swapSelfInParams=function(t){for(var e=t.length,n=t.concat();--e>-1;)"{self}"===t[e]&&(n[e]=this);return n},o._callback=function(t){var e=this.vars;e[t].apply(e[t+"Scope"]||e.callbackScope||this,e[t+"Params"]||$)},o.eventCallback=function(t,e,n,r){if("on"===(t||"").substr(0,2)){var i=this.vars;if(1===arguments.length)return i[t];null==e?delete i[t]:(i[t]=e,i[t+"Params"]=h(n)&&-1!==n.join("").indexOf("{self}")?this._swapSelfInParams(n):n,i[t+"Scope"]=r),"onUpdate"===t&&(this._onUpdate=e)}return this},o.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},o.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},o.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},o.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},o.totalTime=function(t,e,n){if(a||s.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(0>t&&!n&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var r=this._totalDuration,i=this._timeline;if(t>r&&!n&&(t=r),this._startTime=(this._paused?this._pauseTime:i._time)-(this._reversed?r-t:t)/this._timeScale,i._dirty||this._uncache(!1),i._timeline)for(;i._timeline;)i._timeline._time!==(i._startTime+i._totalTime)/i._timeScale&&i.totalTime(i._totalTime,!0),i=i._timeline}this._gc&&this._enabled(!0,!1),(this._totalTime!==t||0===this._duration)&&(D.length&&G(),this.render(t,e,!1),D.length&&G())}return this},o.progress=o.totalProgress=function(t,e){var n=this.duration();return arguments.length?this.totalTime(n*t,e):n?this._time/n:this.ratio},o.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},o.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},o.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||c,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,n=e||0===e?e:this._timeline.totalTime();this._startTime=n-(n-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},o.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},o.paused=function(t){if(!arguments.length)return this._paused;var e,n,r=this._timeline;return t!=this._paused&&r&&(a||t||s.wake(),e=r.rawTime(),n=e-this._pauseTime,!t&&r.smoothChildTiming&&(this._startTime+=n,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==n&&this._initted&&this.duration()&&(e=r.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var O=g("core.SimpleTimeline",function(t){E.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});o=O.prototype=new E,o.constructor=O,o.kill()._gc=!1,o._first=o._last=o._recent=null,o._sortChildren=!1,o.add=o.insert=function(t,e,n,r){var i,o;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),i=this._last,this._sortChildren)for(o=t._startTime;i&&i._startTime>o;)i=i._prev;return i?(t._next=i._next,i._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=i,this._recent=t,this._timeline&&this._uncache(!0),this},o._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},o.render=function(t,e,n){var r,i=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;i;)r=i._next,(i._active||t>=i._startTime&&!i._paused)&&(i._reversed?i.render((i._dirty?i.totalDuration():i._totalDuration)-(t-i._startTime)*i._timeScale,e,n):i.render((t-i._startTime)*i._timeScale,e,n)),i=r},o.rawTime=function(){return a||s.wake(),this._totalTime};var j=g("TweenLite",function(e,n,r){if(E.call(this,n,r),this.render=j.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:j.selector(e)||e;var i,o,s,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?U[j.defaultOverwrite]:"number"==typeof l?l>>0:U[l],(a||e instanceof Array||e.push&&h(e))&&"number"!=typeof e[0])for(this._targets=s=f(e),this._propLookup=[],this._siblings=[],i=0;i<s.length;i++)o=s[i],o?"string"!=typeof o?o.length&&o!==t&&o[0]&&(o[0]===t||o[0].nodeType&&o[0].style&&!o.nodeType)?(s.splice(i--,1),this._targets=s=s.concat(f(o))):(this._siblings[i]=Q(o,this,!1),1===l&&this._siblings[i].length>1&&K(o,this,null,1,this._siblings[i])):(o=s[i--]=j.selector(o),"string"==typeof o&&s.splice(i+1,1)):s.splice(i--,1);else this._propLookup={},this._siblings=Q(e,this,!1),1===l&&this._siblings.length>1&&K(e,this,null,1,this._siblings);(this.vars.immediateRender||0===n&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-c,this.render(-this._delay))},!0),P=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},N=function(t,e){var n,r={};for(n in t)z[n]||n in e&&"transform"!==n&&"x"!==n&&"y"!==n&&"width"!==n&&"height"!==n&&"className"!==n&&"border"!==n||!(!V[n]||V[n]&&V[n]._autoCSS)||(r[n]=t[n],delete t[n]);t.css=r};o=j.prototype=new E,o.constructor=j,o.kill()._gc=!1,o.ratio=0,o._firstPT=o._targets=o._overwrittenProps=o._startAt=null,o._notifyPluginsOfEnabled=o._lazy=!1,j.version="1.18.2",j.defaultEase=o._ease=new b(null,null,1,1),j.defaultOverwrite="auto",j.ticker=s,j.autoSleep=120,j.lagSmoothing=function(t,e){s.lagSmoothing(t,e)},j.selector=t.$||t.jQuery||function(e){var n=t.$||t.jQuery;return n?(j.selector=n,n(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)};var D=[],M={},I=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,R=function(t){for(var e,n=this._firstPT,r=1e-6;n;)e=n.blob?t?this.join(""):this.start:n.c*t+n.s,n.r?e=Math.round(e):r>e&&e>-r&&(e=0),n.f?n.fp?n.t[n.p](n.fp,e):n.t[n.p](e):n.t[n.p]=e,n=n._next},q=function(t,e,n,r){var i,o,s,a,l,u,c,f=[t,e],p=0,h="",d=0;for(f.start=t,n&&(n(f),t=f[0],e=f[1]),f.length=0,i=t.match(I)||[],o=e.match(I)||[],r&&(r._next=null,r.blob=1,f._firstPT=r),l=o.length,a=0;l>a;a++)c=o[a],u=e.substr(p,e.indexOf(c,p)-p),h+=u||!a?u:",",p+=u.length,d?d=(d+1)%5:"rgba("===u.substr(-5)&&(d=1),c===i[a]||i.length<=a?h+=c:(h&&(f.push(h),h=""),s=parseFloat(i[a]),f.push(s),f._firstPT={_next:f._firstPT,t:f,p:f.length-1,s:s,c:("="===c.charAt(1)?parseInt(c.charAt(0)+"1",10)*parseFloat(c.substr(2)):parseFloat(c)-s)||0,f:0,r:d&&4>d}),p+=c.length;return h+=e.substr(p),h&&f.push(h),f.setRatio=R,f},F=function(t,e,n,r,i,o,s,a){var l,u,c="get"===n?t[e]:n,f=typeof t[e],p="string"==typeof r&&"="===r.charAt(1),h={t:t,p:e,s:c,f:"function"===f,pg:0,n:i||e,r:o,pr:0,c:p?parseInt(r.charAt(0)+"1",10)*parseFloat(r.substr(2)):parseFloat(r)-c||0};return"number"!==f&&("function"===f&&"get"===n&&(u=e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),h.s=c=s?t[u](s):t[u]()),"string"==typeof c&&(s||isNaN(c))?(h.fp=s,l=q(c,r,a||j.defaultStringFilter,h),h={t:l,p:"setRatio",s:0,c:1,f:2,pg:0,n:i||e,pr:0}):p||(h.s=parseFloat(c),h.c=parseFloat(r)-h.s||0)),h.c?((h._next=this._firstPT)&&(h._next._prev=h),this._firstPT=h,h):void 0},L=j._internals={isArray:h,isSelector:P,lazyTweens:D,blobDif:q},V=j._plugins={},H=L.tweenLookup={},B=0,z=L.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1},U={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,"true":1,"false":0},W=E._rootFramesTimeline=new O,X=E._rootTimeline=new O,Y=30,G=L.lazyRender=function(){var t,e=D.length;for(M={};--e>-1;)t=D[e],t&&t._lazy!==!1&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);D.length=0};X._startTime=s.time,W._startTime=s.frame,X._active=W._active=!0,setTimeout(G,1),E._updateRoot=j.render=function(){var t,e,n;if(D.length&&G(),X.render((s.time-X._startTime)*X._timeScale,!1,!1),W.render((s.frame-W._startTime)*W._timeScale,!1,!1),D.length&&G(),s.frame>=Y){Y=s.frame+(parseInt(j.autoSleep,10)||120);for(n in H){for(e=H[n].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete H[n]}if(n=X._first,(!n||n._paused)&&j.autoSleep&&!W._first&&1===s._listeners.tick.length){for(;n&&n._paused;)n=n._next;n||s.sleep()}}},s.addEventListener("tick",E._updateRoot);var Q=function(t,e,n){var r,i,o=t._gsTweenID;if(H[o||(t._gsTweenID=o="t"+B++)]||(H[o]={target:t,tweens:[]}),e&&(r=H[o].tweens,r[i=r.length]=e,n))for(;--i>-1;)r[i]===e&&r.splice(i,1);return H[o].tweens},Z=function(t,e,n,r){var i,o,s=t.vars.onOverwrite;return s&&(i=s(t,e,n,r)),s=j.onOverwrite,s&&(o=s(t,e,n,r)),i!==!1&&o!==!1},K=function(t,e,n,r,i){var o,s,a,l;if(1===r||r>=4){for(l=i.length,o=0;l>o;o++)if((a=i[o])!==e)a._gc||a._kill(null,t,e)&&(s=!0);else if(5===r)break;return s}var u,f=e._startTime+c,p=[],h=0,d=0===e._duration;
for(o=i.length;--o>-1;)(a=i[o])===e||a._gc||a._paused||(a._timeline!==e._timeline?(u=u||J(e,0,d),0===J(a,u,d)&&(p[h++]=a)):a._startTime<=f&&a._startTime+a.totalDuration()/a._timeScale>f&&((d||!a._initted)&&f-a._startTime<=2e-10||(p[h++]=a)));for(o=h;--o>-1;)if(a=p[o],2===r&&a._kill(n,t,e)&&(s=!0),2!==r||!a._firstPT&&a._initted){if(2!==r&&!Z(a,e))continue;a._enabled(!1,!1)&&(s=!0)}return s},J=function(t,e,n){for(var r=t._timeline,i=r._timeScale,o=t._startTime;r._timeline;){if(o+=r._startTime,i*=r._timeScale,r._paused)return-100;r=r._timeline}return o/=i,o>e?o-e:n&&o===e||!t._initted&&2*c>o-e?c:(o+=t.totalDuration()/t._timeScale/i)>e+c?0:o-e-c};o._init=function(){var t,e,n,r,i,o=this.vars,s=this._overwrittenProps,a=this._duration,l=!!o.immediateRender,u=o.ease;if(o.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),i={};for(r in o.startAt)i[r]=o.startAt[r];if(i.overwrite=!1,i.immediateRender=!0,i.lazy=l&&o.lazy!==!1,i.startAt=i.delay=null,this._startAt=j.to(this.target,0,i),l)if(this._time>0)this._startAt=null;else if(0!==a)return}else if(o.runBackwards&&0!==a)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(l=!1),n={};for(r in o)z[r]&&"autoCSS"!==r||(n[r]=o[r]);if(n.overwrite=0,n.data="isFromStart",n.lazy=l&&o.lazy!==!1,n.immediateRender=l,this._startAt=j.to(this.target,0,n),l){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=u=u?u instanceof b?u:"function"==typeof u?new b(u,o.easeParams):w[u]||j.defaultEase:j.defaultEase,o.easeParams instanceof Array&&u.config&&(this._ease=u.config.apply(u,o.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(t=this._targets.length;--t>-1;)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],s?s[t]:null)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,s);if(e&&j._onPluginEvent("_onInitAllProps",this),s&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),o.runBackwards)for(n=this._firstPT;n;)n.s+=n.c,n.c=-n.c,n=n._next;this._onUpdate=o.onUpdate,this._initted=!0},o._initProps=function(e,n,r,i){var o,s,a,l,u,c;if(null==e)return!1;M[e._gsTweenID]&&G(),this.vars.css||e.style&&e!==t&&e.nodeType&&V.css&&this.vars.autoCSS!==!1&&N(this.vars,e);for(o in this.vars)if(c=this.vars[o],z[o])c&&(c instanceof Array||c.push&&h(c))&&-1!==c.join("").indexOf("{self}")&&(this.vars[o]=c=this._swapSelfInParams(c,this));else if(V[o]&&(l=new V[o])._onInitTween(e,this.vars[o],this)){for(this._firstPT=u={_next:this._firstPT,t:l,p:"setRatio",s:0,c:1,f:1,n:o,pg:1,pr:l._priority},s=l._overwriteProps.length;--s>-1;)n[l._overwriteProps[s]]=this._firstPT;(l._priority||l._onInitAllProps)&&(a=!0),(l._onDisable||l._onEnable)&&(this._notifyPluginsOfEnabled=!0),u._next&&(u._next._prev=u)}else n[o]=F.call(this,e,o,"get",c,o,0,null,this.vars.stringFilter);return i&&this._kill(i,e)?this._initProps(e,n,r,i):this._overwrite>1&&this._firstPT&&r.length>1&&K(e,this,n,this._overwrite,r)?(this._kill(n,e),this._initProps(e,n,r,i)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(M[e._gsTweenID]=!0),a)},o.render=function(t,e,n){var r,i,o,s,a=this._time,l=this._duration,u=this._rawPrevTime;if(t>=l-1e-7)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(r=!0,i="onComplete",n=n||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||n)&&(this._startTime===this._timeline._duration&&(t=0),(0>u||0>=t&&t>=-1e-7||u===c&&"isPause"!==this.data)&&u!==t&&(n=!0,u>c&&(i="onReverseComplete")),this._rawPrevTime=s=!e||t||u===t?t:c);else if(1e-7>t)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&u>0)&&(i="onReverseComplete",r=this._reversed),0>t&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||n)&&(u>=0&&(u!==c||"isPause"!==this.data)&&(n=!0),this._rawPrevTime=s=!e||t||u===t?t:c)),this._initted||(n=!0);else if(this._totalTime=this._time=t,this._easeType){var f=t/l,p=this._easeType,h=this._easePower;(1===p||3===p&&f>=.5)&&(f=1-f),3===p&&(f*=2),1===h?f*=f:2===h?f*=f*f:3===h?f*=f*f*f:4===h&&(f*=f*f*f*f),1===p?this.ratio=1-f:2===p?this.ratio=f:.5>t/l?this.ratio=f/2:this.ratio=1-f/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==a||n){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!n&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=u,D.push(this),void(this._lazy=[t,e]);this._time&&!r?this.ratio=this._ease.getRatio(this._time/l):r&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,e,n):i||(i="_dummyGS")),this.vars.onStart&&(0!==this._time||0===l)&&(e||this._callback("onStart"))),o=this._firstPT;o;)o.f?o.t[o.p](o.c*this.ratio+o.s):o.t[o.p]=o.c*this.ratio+o.s,o=o._next;this._onUpdate&&(0>t&&this._startAt&&t!==-1e-4&&this._startAt.render(t,e,n),e||(this._time!==a||r)&&this._callback("onUpdate")),i&&(!this._gc||n)&&(0>t&&this._startAt&&!this._onUpdate&&t!==-1e-4&&this._startAt.render(t,e,n),r&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[i]&&this._callback(i),0===l&&this._rawPrevTime===c&&s!==c&&(this._rawPrevTime=0))}},o._kill=function(t,e,n){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:j.selector(e)||e;var r,i,o,s,a,l,u,c,f,p=n&&this._time&&n._startTime===this._startTime&&this._timeline===n._timeline;if((h(e)||P(e))&&"number"!=typeof e[0])for(r=e.length;--r>-1;)this._kill(t,e[r],n)&&(l=!0);else{if(this._targets){for(r=this._targets.length;--r>-1;)if(e===this._targets[r]){a=this._propLookup[r]||{},this._overwrittenProps=this._overwrittenProps||[],i=this._overwrittenProps[r]=t?this._overwrittenProps[r]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,i=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(u=t||a,c=t!==i&&"all"!==i&&t!==a&&("object"!=typeof t||!t._tempKill),n&&(j.onOverwrite||this.vars.onOverwrite)){for(o in u)a[o]&&(f||(f=[]),f.push(o));if((f||!t)&&!Z(this,n,e,f))return!1}for(o in u)(s=a[o])&&(p&&(s.f?s.t[s.p](s.s):s.t[s.p]=s.s,l=!0),s.pg&&s.t._kill(u)&&(l=!0),s.pg&&0!==s.t._overwriteProps.length||(s._prev?s._prev._next=s._next:s===this._firstPT&&(this._firstPT=s._next),s._next&&(s._next._prev=s._prev),s._next=s._prev=null),delete a[o]),c&&(i[o]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},o.invalidate=function(){return this._notifyPluginsOfEnabled&&j._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],E.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-c,this.render(-this._delay)),this},o._enabled=function(t,e){if(a||s.wake(),t&&this._gc){var n,r=this._targets;if(r)for(n=r.length;--n>-1;)this._siblings[n]=Q(r[n],this,!0);else this._siblings=Q(this.target,this,!0)}return E.prototype._enabled.call(this,t,e),this._notifyPluginsOfEnabled&&this._firstPT?j._onPluginEvent(t?"_onEnable":"_onDisable",this):!1},j.to=function(t,e,n){return new j(t,e,n)},j.from=function(t,e,n){return n.runBackwards=!0,n.immediateRender=0!=n.immediateRender,new j(t,e,n)},j.fromTo=function(t,e,n,r){return r.startAt=n,r.immediateRender=0!=r.immediateRender&&0!=n.immediateRender,new j(t,e,r)},j.delayedCall=function(t,e,n,r,i){return new j(e,0,{delay:t,onComplete:e,onCompleteParams:n,callbackScope:r,onReverseComplete:e,onReverseCompleteParams:n,immediateRender:!1,lazy:!1,useFrames:i,overwrite:0})},j.set=function(t,e){return new j(t,0,e)},j.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:j.selector(t)||t;var n,r,i,o;if((h(t)||P(t))&&"number"!=typeof t[0]){for(n=t.length,r=[];--n>-1;)r=r.concat(j.getTweensOf(t[n],e));for(n=r.length;--n>-1;)for(o=r[n],i=n;--i>-1;)o===r[i]&&r.splice(n,1)}else for(r=Q(t).concat(),n=r.length;--n>-1;)(r[n]._gc||e&&!r[n].isActive())&&r.splice(n,1);return r},j.killTweensOf=j.killDelayedCallsTo=function(t,e,n){"object"==typeof e&&(n=e,e=!1);for(var r=j.getTweensOf(t,e),i=r.length;--i>-1;)r[i]._kill(n,t)};var tt=g("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=tt.prototype},!0);if(o=tt.prototype,tt.version="1.18.0",tt.API=2,o._firstPT=null,o._addTween=F,o.setRatio=R,o._kill=function(t){var e,n=this._overwriteProps,r=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=n.length;--e>-1;)null!=t[n[e]]&&n.splice(e,1);for(;r;)null!=t[r.n]&&(r._next&&(r._next._prev=r._prev),r._prev?(r._prev._next=r._next,r._prev=null):this._firstPT===r&&(this._firstPT=r._next)),r=r._next;return!1},o._roundProps=function(t,e){for(var n=this._firstPT;n;)(t[this._propName]||null!=n.n&&t[n.n.split(this._propName+"_").join("")])&&(n.r=e),n=n._next},j._onPluginEvent=function(t,e){var n,r,i,o,s,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(s=a._next,r=i;r&&r.pr>a.pr;)r=r._next;(a._prev=r?r._prev:o)?a._prev._next=a:i=a,(a._next=r)?r._prev=a:o=a,a=s}a=e._firstPT=i}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(n=!0),a=a._next;return n},tt.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===tt.API&&(V[(new t[e])._propName]=t[e]);return!0},v.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,n=t.propName,r=t.priority||0,i=t.overwriteProps,o={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_roundProps",initAll:"_onInitAllProps"},s=g("plugins."+n.charAt(0).toUpperCase()+n.substr(1)+"Plugin",function(){tt.call(this,n,r),this._overwriteProps=i||[]},t.global===!0),a=s.prototype=new tt(n);a.constructor=s,s.API=t.API;for(e in o)"function"==typeof t[e]&&(a[o[e]]=t[e]);return s.version=t.version,tt.activate([s]),s},r=t._gsQueue){for(i=0;i<r.length;i++)r[i]();for(o in d)d[o].func||t.console.log("GSAP encountered missing dependency: com.greensock."+o)}a=!1}}("undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window,"TweenLite");var _gsScope="undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window;(_gsScope._gsQueue||(_gsScope._gsQueue=[])).push(function(){"use strict";_gsScope._gsDefine("easing.Back",["easing.Ease"],function(t){var e,n,r,i=_gsScope.GreenSockGlobals||_gsScope,o=i.com.greensock,s=2*Math.PI,a=Math.PI/2,l=o._class,u=function(e,n){var r=l("easing."+e,function(){},!0),i=r.prototype=new t;return i.constructor=r,i.getRatio=n,r},c=t.register||function(){},f=function(t,e,n,r,i){var o=l("easing."+t,{easeOut:new e,easeIn:new n,easeInOut:new r},!0);return c(o,t),o},p=function(t,e,n){this.t=t,this.v=e,n&&(this.next=n,n.prev=this,this.c=n.v-e,this.gap=n.t-t)},h=function(e,n){var r=l("easing."+e,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),i=r.prototype=new t;return i.constructor=r,i.getRatio=n,i.config=function(t){return new r(t)},r},d=f("Back",h("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),h("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),h("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),m=l("easing.SlowMo",function(t,e,n){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=n===!0},!0),v=m.prototype=new t;return v.constructor=m,v.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},m.ease=new m(.7,.7),v.config=m.config=function(t,e,n){return new m(t,e,n)},e=l("easing.SteppedEase",function(t){t=t||1,this._p1=1/t,this._p2=t+1},!0),v=e.prototype=new t,v.constructor=e,v.getRatio=function(t){return 0>t?t=0:t>=1&&(t=.999999999),(this._p2*t>>0)*this._p1},v.config=e.config=function(t){return new e(t)},n=l("easing.RoughEase",function(e){e=e||{};for(var n,r,i,o,s,a,l=e.taper||"none",u=[],c=0,f=0|(e.points||20),h=f,d=e.randomize!==!1,m=e.clamp===!0,v=e.template instanceof t?e.template:null,g="number"==typeof e.strength?.4*e.strength:.4;--h>-1;)n=d?Math.random():1/f*h,r=v?v.getRatio(n):n,"none"===l?i=g:"out"===l?(o=1-n,i=o*o*g):"in"===l?i=n*n*g:.5>n?(o=2*n,i=o*o*.5*g):(o=2*(1-n),i=o*o*.5*g),d?r+=Math.random()*i-.5*i:h%2?r+=.5*i:r-=.5*i,m&&(r>1?r=1:0>r&&(r=0)),u[c++]={x:n,y:r};for(u.sort(function(t,e){return t.x-e.x}),a=new p(1,1,null),h=f;--h>-1;)s=u[h],a=new p(s.x,s.y,a);this._prev=new p(0,0,0!==a.t?a:a.next)},!0),v=n.prototype=new t,v.constructor=n,v.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},v.config=function(t){return new n(t)},n.ease=new n,f("Bounce",u("BounceOut",function(t){return 1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),u("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:2/2.75>t?1-(7.5625*(t-=1.5/2.75)*t+.75):2.5/2.75>t?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),u("BounceInOut",function(t){var e=.5>t;return t=e?1-2*t:2*t-1,t=1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),f("Circ",u("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),u("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),u("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),r=function(e,n,r){var i=l("easing."+e,function(t,e){this._p1=t>=1?t:1,this._p2=(e||r)/(1>t?t:1),this._p3=this._p2/s*(Math.asin(1/this._p1)||0),this._p2=s/this._p2},!0),o=i.prototype=new t;return o.constructor=i,o.getRatio=n,o.config=function(t,e){return new i(t,e)},i},f("Elastic",r("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),r("ElasticIn",function(t){return-(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2))},.3),r("ElasticInOut",function(t){return(t*=2)<1?-.5*(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)):this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),f("Expo",u("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),u("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),u("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),f("Sine",u("SineOut",function(t){return Math.sin(t*a)}),u("SineIn",function(t){return-Math.cos(t*a)+1}),u("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),l("easing.EaseLookup",{find:function(e){return t.map[e]}},!0),c(i.SlowMo,"SlowMo","ease,"),c(n,"RoughEase","ease,"),c(e,"SteppedEase","ease,"),d},!0)}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()(),function(){"use strict";var t=function(){return _gsScope.GreenSockGlobals||_gsScope};"function"==typeof define&&define.amd?define(["TweenLite"],t):"undefined"!=typeof module&&module.exports&&(require("../TweenLite.js"),module.exports=t())}();var _gsScope="undefined"!=typeof module&&module.exports&&"undefined"!=typeof global?global:this||window;(_gsScope._gsQueue||(_gsScope._gsQueue=[])).push(function(){"use strict";_gsScope._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var n,r,i,o,s=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=s.prototype.setRatio},a=_gsScope._gsDefine.globals,l={},u=s.prototype=new t("css");u.constructor=s,s.version="1.18.2",s.API=2,s.defaultTransformPerspective=0,s.defaultSkewType="compensated",s.defaultSmoothOrigin=!0,u="px",s.suffixMap={top:u,right:u,bottom:u,left:u,width:u,height:u,fontSize:u,padding:u,margin:u,perspective:u,lineHeight:""};var c,f,p,h,d,m,v=/(?:\d|\-\d|\.\d|\-\.\d)+/g,g=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,y=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,$=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,b=/(?:\d|\-|\+|=|#|\.)*/g,w=/opacity *= *([^)]*)/i,x=/opacity:([^;]*)/i,_=/alpha\(opacity *=.+?\)/i,T=/^(rgb|hsl)/,C=/([A-Z])/g,S=/-([a-z])/gi,k=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,E=function(t,e){return e.toUpperCase()},A=/(?:Left|Right|Width)/i,O=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,j=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,P=/,(?=[^\)]*(?:\(|$))/gi,N=Math.PI/180,D=180/Math.PI,M={},I=document,R=function(t){return I.createElementNS?I.createElementNS("http://www.w3.org/1999/xhtml",t):I.createElement(t)},q=R("div"),F=R("img"),L=s._internals={_specialProps:l},V=navigator.userAgent,H=function(){var t=V.indexOf("Android"),e=R("a");return p=-1!==V.indexOf("Safari")&&-1===V.indexOf("Chrome")&&(-1===t||Number(V.substr(t+8,1))>3),d=p&&Number(V.substr(V.indexOf("Version/")+8,1))<6,h=-1!==V.indexOf("Firefox"),(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(V)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(V))&&(m=parseFloat(RegExp.$1)),e?(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity)):!1}(),B=function(t){return w.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},z=function(t){window.console&&console.log(t)},U="",W="",X=function(t,e){e=e||q;var n,r,i=e.style;if(void 0!==i[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),n=["O","Moz","ms","Ms","Webkit"],r=5;--r>-1&&void 0===i[n[r]+t];);return r>=0?(W=3===r?"ms":n[r],U="-"+W.toLowerCase()+"-",W+t):null},Y=I.defaultView?I.defaultView.getComputedStyle:function(){},G=s.getStyle=function(t,e,n,r,i){var o;return H||"opacity"!==e?(!r&&t.style[e]?o=t.style[e]:(n=n||Y(t))?o=n[e]||n.getPropertyValue(e)||n.getPropertyValue(e.replace(C,"-$1").toLowerCase()):t.currentStyle&&(o=t.currentStyle[e]),null==i||o&&"none"!==o&&"auto"!==o&&"auto auto"!==o?o:i):B(t)},Q=L.convertToPixels=function(t,n,r,i,o){if("px"===i||!i)return r;if("auto"===i||!r)return 0;var a,l,u,c=A.test(n),f=t,p=q.style,h=0>r;if(h&&(r=-r),"%"===i&&-1!==n.indexOf("border"))a=r/100*(c?t.clientWidth:t.clientHeight);else{if(p.cssText="border:0 solid red;position:"+G(t,"position")+";line-height:0;","%"!==i&&f.appendChild&&"v"!==i.charAt(0)&&"rem"!==i)p[c?"borderLeftWidth":"borderTopWidth"]=r+i;else{if(f=t.parentNode||I.body,l=f._gsCache,u=e.ticker.frame,l&&c&&l.time===u)return l.width*r/100;p[c?"width":"height"]=r+i}f.appendChild(q),a=parseFloat(q[c?"offsetWidth":"offsetHeight"]),f.removeChild(q),c&&"%"===i&&s.cacheWidths!==!1&&(l=f._gsCache=f._gsCache||{},l.time=u,l.width=a/r*100),0!==a||o||(a=Q(t,n,r,i,!0))}return h?-a:a},Z=L.calculateOffset=function(t,e,n){if("absolute"!==G(t,"position",n))return 0;var r="left"===e?"Left":"Top",i=G(t,"margin"+r,n);return t["offset"+r]-(Q(t,e,parseFloat(i),i.replace(b,""))||0)},K=function(t,e){var n,r,i,o={};if(e=e||Y(t,null))if(n=e.length)for(;--n>-1;)i=e[n],(-1===i.indexOf("-transform")||Ct===i)&&(o[i.replace(S,E)]=e.getPropertyValue(i));else for(n in e)(-1===n.indexOf("Transform")||Tt===n)&&(o[n]=e[n]);else if(e=t.currentStyle||t.style)for(n in e)"string"==typeof n&&void 0===o[n]&&(o[n.replace(S,E)]=e[n]);return H||(o.opacity=B(t)),r=Rt(t,e,!1),o.rotation=r.rotation,o.skewX=r.skewX,o.scaleX=r.scaleX,o.scaleY=r.scaleY,o.x=r.x,o.y=r.y,kt&&(o.z=r.z,o.rotationX=r.rotationX,o.rotationY=r.rotationY,o.scaleZ=r.scaleZ),o.filters&&delete o.filters,o},J=function(t,e,n,r,i){var o,s,a,l={},u=t.style;for(s in n)"cssText"!==s&&"length"!==s&&isNaN(s)&&(e[s]!==(o=n[s])||i&&i[s])&&-1===s.indexOf("Origin")&&("number"==typeof o||"string"==typeof o)&&(l[s]="auto"!==o||"left"!==s&&"top"!==s?""!==o&&"auto"!==o&&"none"!==o||"string"!=typeof e[s]||""===e[s].replace($,"")?o:0:Z(t,s),void 0!==u[s]&&(a=new dt(u,s,u[s],a)));if(r)for(s in r)"className"!==s&&(l[s]=r[s]);return{difs:l,firstMPT:a}},tt={width:["Left","Right"],height:["Top","Bottom"]},et=["marginLeft","marginRight","marginTop","marginBottom"],nt=function(t,e,n){var r=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),i=tt[e],o=i.length;for(n=n||Y(t,null);--o>-1;)r-=parseFloat(G(t,"padding"+i[o],n,!0))||0,r-=parseFloat(G(t,"border"+i[o]+"Width",n,!0))||0;return r},rt=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";(null==t||""===t)&&(t="0 0");var n=t.split(" "),r=-1!==t.indexOf("left")?"0%":-1!==t.indexOf("right")?"100%":n[0],i=-1!==t.indexOf("top")?"0%":-1!==t.indexOf("bottom")?"100%":n[1];return null==i?i="center"===r?"50%":"0":"center"===i&&(i="50%"),("center"===r||isNaN(parseFloat(r))&&-1===(r+"").indexOf("="))&&(r="50%"),t=r+" "+i+(n.length>2?" "+n[2]:""),e&&(e.oxp=-1!==r.indexOf("%"),e.oyp=-1!==i.indexOf("%"),e.oxr="="===r.charAt(1),e.oyr="="===i.charAt(1),e.ox=parseFloat(r.replace($,"")),e.oy=parseFloat(i.replace($,"")),e.v=t),e||t},it=function(t,e){return"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)},ot=function(t,e){return null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)},st=function(t,e,n,r){var i,o,s,a,l,u=1e-6;return null==t?a=e:"number"==typeof t?a=t:(i=360,o=t.split("_"),l="="===t.charAt(1),s=(l?parseInt(t.charAt(0)+"1",10)*parseFloat(o[0].substr(2)):parseFloat(o[0]))*(-1===t.indexOf("rad")?1:D)-(l?0:e),o.length&&(r&&(r[n]=e+s),-1!==t.indexOf("short")&&(s%=i,s!==s%(i/2)&&(s=0>s?s+i:s-i)),-1!==t.indexOf("_cw")&&0>s?s=(s+9999999999*i)%i-(s/i|0)*i:-1!==t.indexOf("ccw")&&s>0&&(s=(s-9999999999*i)%i-(s/i|0)*i)),a=e+s),u>a&&a>-u&&(a=0),a},at={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},lt=function(t,e,n){return t=0>t?t+1:t>1?t-1:t,255*(1>6*t?e+(n-e)*t*6:.5>t?n:2>3*t?e+(n-e)*(2/3-t)*6:e)+.5|0},ut=s.parseColor=function(t,e){var n,r,i,o,s,a,l,u,c,f,p;if(t)if("number"==typeof t)n=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),at[t])n=at[t];else if("#"===t.charAt(0))4===t.length&&(r=t.charAt(1),i=t.charAt(2),o=t.charAt(3),t="#"+r+r+i+i+o+o),t=parseInt(t.substr(1),16),n=[t>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(n=p=t.match(v),e){if(-1!==t.indexOf("="))return t.match(g)}else s=Number(n[0])%360/360,a=Number(n[1])/100,l=Number(n[2])/100,i=.5>=l?l*(a+1):l+a-l*a,r=2*l-i,n.length>3&&(n[3]=Number(t[3])),n[0]=lt(s+1/3,r,i),n[1]=lt(s,r,i),n[2]=lt(s-1/3,r,i);else n=t.match(v)||at.transparent;n[0]=Number(n[0]),n[1]=Number(n[1]),n[2]=Number(n[2]),n.length>3&&(n[3]=Number(n[3]))}else n=at.black;return e&&!p&&(r=n[0]/255,i=n[1]/255,o=n[2]/255,u=Math.max(r,i,o),c=Math.min(r,i,o),l=(u+c)/2,u===c?s=a=0:(f=u-c,a=l>.5?f/(2-u-c):f/(u+c),s=u===r?(i-o)/f+(o>i?6:0):u===i?(o-r)/f+2:(r-i)/f+4,s*=60),n[0]=s+.5|0,n[1]=100*a+.5|0,n[2]=100*l+.5|0),n},ct=function(t,e){var n,r,i,o=t.match(ft)||[],s=0,a=o.length?"":t;for(n=0;n<o.length;n++)r=o[n],i=t.substr(s,t.indexOf(r,s)-s),s+=i.length+r.length,r=ut(r,e),3===r.length&&r.push(1),a+=i+(e?"hsla("+r[0]+","+r[1]+"%,"+r[2]+"%,"+r[3]:"rgba("+r.join(","))+")";return a},ft="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(u in at)ft+="|"+u+"\\b";ft=new RegExp(ft+")","gi"),s.colorStringFilter=function(t){var e,n=t[0]+t[1];ft.lastIndex=0,ft.test(n)&&(e=-1!==n.indexOf("hsl(")||-1!==n.indexOf("hsla("),t[0]=ct(t[0],e),t[1]=ct(t[1],e))},e.defaultStringFilter||(e.defaultStringFilter=s.colorStringFilter);var pt=function(t,e,n,r){if(null==t)return function(t){return t};var i,o=e?(t.match(ft)||[""])[0]:"",s=t.split(o).join("").match(y)||[],a=t.substr(0,t.indexOf(s[0])),l=")"===t.charAt(t.length-1)?")":"",u=-1!==t.indexOf(" ")?" ":",",c=s.length,f=c>0?s[0].replace(v,""):"";return c?i=e?function(t){var e,p,h,d;if("number"==typeof t)t+=f;else if(r&&P.test(t)){for(d=t.replace(P,"|").split("|"),h=0;h<d.length;h++)d[h]=i(d[h]);return d.join(",")}if(e=(t.match(ft)||[o])[0],p=t.split(e).join("").match(y)||[],h=p.length,c>h--)for(;++h<c;)p[h]=n?p[(h-1)/2|0]:s[h];return a+p.join(u)+u+e+l+(-1!==t.indexOf("inset")?" inset":"")}:function(t){var e,o,p;if("number"==typeof t)t+=f;else if(r&&P.test(t)){for(o=t.replace(P,"|").split("|"),p=0;p<o.length;p++)o[p]=i(o[p]);return o.join(",")}if(e=t.match(y)||[],p=e.length,c>p--)for(;++p<c;)e[p]=n?e[(p-1)/2|0]:s[p];return a+e.join(u)+l}:function(t){return t}},ht=function(t){return t=t.split(","),function(e,n,r,i,o,s,a){var l,u=(n+"").split(" ");for(a={},l=0;4>l;l++)a[t[l]]=u[l]=u[l]||u[(l-1)/2>>0];return i.parse(e,a,o,s)}},dt=(L._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,n,r,i,o,s=this.data,a=s.proxy,l=s.firstMPT,u=1e-6;l;)e=a[l.v],l.r?e=Math.round(e):u>e&&e>-u&&(e=0),l.t[l.p]=e,l=l._next;if(s.autoRotate&&(s.autoRotate.rotation=a.rotation),1===t||0===t)for(l=s.firstMPT,o=1===t?"e":"b";l;){if(n=l.t,n.type){if(1===n.type){for(i=n.xs0+n.s+n.xs1,r=1;r<n.l;r++)i+=n["xn"+r]+n["xs"+(r+1)];n[o]=i}}else n[o]=n.s+n.xs0;l=l._next}},function(t,e,n,r,i){this.t=t,this.p=e,this.v=n,this.r=i,r&&(r._prev=this,this._next=r)}),mt=(L._parseToProxy=function(t,e,n,r,i,o){var s,a,l,u,c,f=r,p={},h={},d=n._transform,m=M;for(n._transform=null,M=e,r=c=n.parse(t,e,r,i),M=m,o&&(n._transform=d,f&&(f._prev=null,f._prev&&(f._prev._next=null)));r&&r!==f;){if(r.type<=1&&(a=r.p,h[a]=r.s+r.c,p[a]=r.s,o||(u=new dt(r,"s",a,u,r.r),r.c=0),1===r.type))for(s=r.l;--s>0;)l="xn"+s,a=r.p+"_"+l,h[a]=r.data[l],p[a]=r[l],o||(u=new dt(r,l,a,u,r.rxp[l]));r=r._next}return{proxy:p,end:h,firstMPT:u,pt:c}},L.CSSPropTween=function(t,e,r,i,s,a,l,u,c,f,p){this.t=t,this.p=e,this.s=r,this.c=i,this.n=l||e,t instanceof mt||o.push(this.n),this.r=u,this.type=a||0,c&&(this.pr=c,n=!0),this.b=void 0===f?r:f,this.e=void 0===p?r+i:p,s&&(this._next=s,s._prev=this)}),vt=function(t,e,n,r,i,o){var s=new mt(t,e,n,r-n,i,-1,o);return s.b=n,s.e=s.xs0=r,s},gt=s.parseComplex=function(t,e,n,r,i,o,s,a,l,u){n=n||o||"",s=new mt(t,e,0,0,s,u?2:1,null,!1,a,n,r),r+="";var f,p,h,d,m,y,$,b,w,x,_,T,C,S=n.split(", ").join(",").split(" "),k=r.split(", ").join(",").split(" "),E=S.length,A=c!==!1;for((-1!==r.indexOf(",")||-1!==n.indexOf(","))&&(S=S.join(" ").replace(P,", ").split(" "),k=k.join(" ").replace(P,", ").split(" "),E=S.length),E!==k.length&&(S=(o||"").split(" "),E=S.length),s.plugin=l,s.setRatio=u,ft.lastIndex=0,f=0;E>f;f++)if(d=S[f],m=k[f],b=parseFloat(d),b||0===b)s.appendXtra("",b,it(m,b),m.replace(g,""),A&&-1!==m.indexOf("px"),!0);else if(i&&ft.test(d))T=","===m.charAt(m.length-1)?"),":")",C=-1!==m.indexOf("hsl")&&H,d=ut(d,C),m=ut(m,C),w=d.length+m.length>6,w&&!H&&0===m[3]?(s["xs"+s.l]+=s.l?" transparent":"transparent",s.e=s.e.split(k[f]).join("transparent")):(H||(w=!1),C?s.appendXtra(w?"hsla(":"hsl(",d[0],it(m[0],d[0]),",",!1,!0).appendXtra("",d[1],it(m[1],d[1]),"%,",!1).appendXtra("",d[2],it(m[2],d[2]),w?"%,":"%"+T,!1):s.appendXtra(w?"rgba(":"rgb(",d[0],m[0]-d[0],",",!0,!0).appendXtra("",d[1],m[1]-d[1],",",!0).appendXtra("",d[2],m[2]-d[2],w?",":T,!0),w&&(d=d.length<4?1:d[3],s.appendXtra("",d,(m.length<4?1:m[3])-d,T,!1))),ft.lastIndex=0;else if(y=d.match(v)){if($=m.match(g),!$||$.length!==y.length)return s;for(h=0,p=0;p<y.length;p++)_=y[p],x=d.indexOf(_,h),s.appendXtra(d.substr(h,x-h),Number(_),it($[p],_),"",A&&"px"===d.substr(x+_.length,2),0===p),h=x+_.length;s["xs"+s.l]+=d.substr(h)}else s["xs"+s.l]+=s.l?" "+m:m;if(-1!==r.indexOf("=")&&s.data){for(T=s.xs0+s.data.s,f=1;f<s.l;f++)T+=s["xs"+f]+s.data["xn"+f];s.e=T+s["xs"+f]}return s.l||(s.type=-1,s.xs0=s.e),s.xfirst||s},yt=9;for(u=mt.prototype,u.l=u.pr=0;--yt>0;)u["xn"+yt]=0,u["xs"+yt]="";u.xs0="",u._next=u._prev=u.xfirst=u.data=u.plugin=u.setRatio=u.rxp=null,u.appendXtra=function(t,e,n,r,i,o){var s=this,a=s.l;return s["xs"+a]+=o&&a?" "+t:t||"",n||0===a||s.plugin?(s.l++,s.type=s.setRatio?2:1,s["xs"+s.l]=r||"",a>0?(s.data["xn"+a]=e+n,s.rxp["xn"+a]=i,s["xn"+a]=e,s.plugin||(s.xfirst=new mt(s,"xn"+a,e,n,s.xfirst||s,0,s.n,i,s.pr),s.xfirst.xs0=0),s):(s.data={s:e+n},s.rxp={},s.s=e,s.c=n,s.r=i,s)):(s["xs"+a]+=e+(r||""),s)};var $t=function(t,e){e=e||{},this.p=e.prefix?X(t)||t:t,l[t]=l[this.p]=this,this.format=e.formatter||pt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},bt=L._registerComplexSpecialProp=function(t,e,n){"object"!=typeof e&&(e={parser:n});var r,i,o=t.split(","),s=e.defaultValue;for(n=n||[s],r=0;r<o.length;r++)e.prefix=0===r&&e.prefix,e.defaultValue=n[r]||s,i=new $t(o[r],e)},wt=function(t){if(!l[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";bt(t,{parser:function(t,n,r,i,o,s,u){var c=a.com.greensock.plugins[e];return c?(c._cssRegister(),l[r].parse(t,n,r,i,o,s,u)):(z("Error: "+e+" js file not loaded."),o)}})}};u=$t.prototype,u.parseComplex=function(t,e,n,r,i,o){var s,a,l,u,c,f,p=this.keyword;if(this.multi&&(P.test(n)||P.test(e)?(a=e.replace(P,"|").split("|"),l=n.replace(P,"|").split("|")):p&&(a=[e],l=[n])),l){for(u=l.length>a.length?l.length:a.length,s=0;u>s;s++)e=a[s]=a[s]||this.dflt,n=l[s]=l[s]||this.dflt,p&&(c=e.indexOf(p),f=n.indexOf(p),c!==f&&(-1===f?a[s]=a[s].split(p).join(""):-1===c&&(a[s]+=" "+p)));e=a.join(", "),n=l.join(", ")}return gt(t,this.p,e,n,this.clrs,this.dflt,r,this.pr,i,o)},u.parse=function(t,e,n,r,o,s,a){return this.parseComplex(t.style,this.format(G(t,this.p,i,!1,this.dflt)),this.format(e),o,s)},s.registerSpecialProp=function(t,e,n){bt(t,{parser:function(t,r,i,o,s,a,l){var u=new mt(t,i,0,0,s,2,i,!1,n);return u.plugin=a,u.setRatio=e(t,r,o._tween,i),u},priority:n})},s.useSVGTransformAttr=p||h;var xt,_t="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Tt=X("transform"),Ct=U+"transform",St=X("transformOrigin"),kt=null!==X("perspective"),Et=L.Transform=function(){this.perspective=parseFloat(s.defaultTransformPerspective)||0,this.force3D=s.defaultForce3D!==!1&&kt?s.defaultForce3D||"auto":!1},At=window.SVGElement,Ot=function(t,e,n){var r,i=I.createElementNS("http://www.w3.org/2000/svg",t),o=/([a-z])([A-Z])/g;for(r in n)i.setAttributeNS(null,r.replace(o,"$1-$2").toLowerCase(),n[r]);return e.appendChild(i),i},jt=I.documentElement,Pt=function(){var t,e,n,r=m||/Android/i.test(V)&&!window.chrome;return I.createElementNS&&!r&&(t=Ot("svg",jt),e=Ot("rect",t,{width:100,height:50,x:100}),n=e.getBoundingClientRect().width,e.style[St]="50% 50%",e.style[Tt]="scaleX(0.5)",r=n===e.getBoundingClientRect().width&&!(h&&kt),jt.removeChild(t)),r}(),Nt=function(t,e,n,r,i){var o,a,l,u,c,f,p,h,d,m,v,g,y,$,b=t._gsTransform,w=It(t,!0);b&&(y=b.xOrigin,$=b.yOrigin),(!r||(o=r.split(" ")).length<2)&&(p=t.getBBox(),e=rt(e).split(" "),o=[(-1!==e[0].indexOf("%")?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(-1!==e[1].indexOf("%")?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),n.xOrigin=u=parseFloat(o[0]),n.yOrigin=c=parseFloat(o[1]),r&&w!==Mt&&(f=w[0],p=w[1],h=w[2],d=w[3],m=w[4],v=w[5],g=f*d-p*h,a=u*(d/g)+c*(-h/g)+(h*v-d*m)/g,l=u*(-p/g)+c*(f/g)-(f*v-p*m)/g,u=n.xOrigin=o[0]=a,c=n.yOrigin=o[1]=l),b&&(i||i!==!1&&s.defaultSmoothOrigin!==!1?(a=u-y,l=c-$,b.xOffset+=a*w[0]+l*w[2]-a,b.yOffset+=a*w[1]+l*w[3]-l):b.xOffset=b.yOffset=0),t.setAttribute("data-svg-origin",o.join(" "))},Dt=function(t){return!!(At&&"function"==typeof t.getBBox&&t.getCTM&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},Mt=[1,0,0,1,0,0],It=function(t,e){var n,r,i,o,s,a=t._gsTransform||new Et,l=1e5;if(Tt?r=G(t,Ct,null,!0):t.currentStyle&&(r=t.currentStyle.filter.match(O),
r=r&&4===r.length?[r[0].substr(4),Number(r[2].substr(4)),Number(r[1].substr(4)),r[3].substr(4),a.x||0,a.y||0].join(","):""),n=!r||"none"===r||"matrix(1, 0, 0, 1, 0, 0)"===r,(a.svg||t.getBBox&&Dt(t))&&(n&&-1!==(t.style[Tt]+"").indexOf("matrix")&&(r=t.style[Tt],n=0),i=t.getAttribute("transform"),n&&i&&(-1!==i.indexOf("matrix")?(r=i,n=0):-1!==i.indexOf("translate")&&(r="matrix(1,0,0,1,"+i.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",")+")",n=0))),n)return Mt;for(i=(r||"").match(/(?:\-|\b)[\d\-\.e]+\b/gi)||[],yt=i.length;--yt>-1;)o=Number(i[yt]),i[yt]=(s=o-(o|=0))?(s*l+(0>s?-.5:.5)|0)/l+o:o;return e&&i.length>6?[i[0],i[1],i[4],i[5],i[12],i[13]]:i},Rt=L.getTransform=function(t,n,r,o){if(t._gsTransform&&r&&!o)return t._gsTransform;var a,l,u,c,f,p,h=r?t._gsTransform||new Et:new Et,d=h.scaleX<0,m=2e-5,v=1e5,g=kt?parseFloat(G(t,St,n,!1,"0 0 0").split(" ")[2])||h.zOrigin||0:0,y=parseFloat(s.defaultTransformPerspective)||0;if(h.svg=!(!t.getBBox||!Dt(t)),h.svg&&(Nt(t,G(t,St,i,!1,"50% 50%")+"",h,t.getAttribute("data-svg-origin")),xt=s.useSVGTransformAttr||Pt),a=It(t),a!==Mt){if(16===a.length){var $,b,w,x,_,T=a[0],C=a[1],S=a[2],k=a[3],E=a[4],A=a[5],O=a[6],j=a[7],P=a[8],N=a[9],M=a[10],I=a[12],R=a[13],q=a[14],F=a[11],L=Math.atan2(O,M);h.zOrigin&&(q=-h.zOrigin,I=P*q-a[12],R=N*q-a[13],q=M*q+h.zOrigin-a[14]),h.rotationX=L*D,L&&(x=Math.cos(-L),_=Math.sin(-L),$=E*x+P*_,b=A*x+N*_,w=O*x+M*_,P=E*-_+P*x,N=A*-_+N*x,M=O*-_+M*x,F=j*-_+F*x,E=$,A=b,O=w),L=Math.atan2(-S,M),h.rotationY=L*D,L&&(x=Math.cos(-L),_=Math.sin(-L),$=T*x-P*_,b=C*x-N*_,w=S*x-M*_,N=C*_+N*x,M=S*_+M*x,F=k*_+F*x,T=$,C=b,S=w),L=Math.atan2(C,T),h.rotation=L*D,L&&(x=Math.cos(-L),_=Math.sin(-L),T=T*x+E*_,b=C*x+A*_,A=C*-_+A*x,O=S*-_+O*x,C=b),h.rotationX&&Math.abs(h.rotationX)+Math.abs(h.rotation)>359.9&&(h.rotationX=h.rotation=0,h.rotationY=180-h.rotationY),h.scaleX=(Math.sqrt(T*T+C*C)*v+.5|0)/v,h.scaleY=(Math.sqrt(A*A+N*N)*v+.5|0)/v,h.scaleZ=(Math.sqrt(O*O+M*M)*v+.5|0)/v,h.skewX=0,h.perspective=F?1/(0>F?-F:F):0,h.x=I,h.y=R,h.z=q,h.svg&&(h.x-=h.xOrigin-(h.xOrigin*T-h.yOrigin*E),h.y-=h.yOrigin-(h.yOrigin*C-h.xOrigin*A))}else if((!kt||o||!a.length||h.x!==a[4]||h.y!==a[5]||!h.rotationX&&!h.rotationY)&&(void 0===h.x||"none"!==G(t,"display",n))){var V=a.length>=6,H=V?a[0]:1,B=a[1]||0,z=a[2]||0,U=V?a[3]:1;h.x=a[4]||0,h.y=a[5]||0,u=Math.sqrt(H*H+B*B),c=Math.sqrt(U*U+z*z),f=H||B?Math.atan2(B,H)*D:h.rotation||0,p=z||U?Math.atan2(z,U)*D+f:h.skewX||0,Math.abs(p)>90&&Math.abs(p)<270&&(d?(u*=-1,p+=0>=f?180:-180,f+=0>=f?180:-180):(c*=-1,p+=0>=p?180:-180)),h.scaleX=u,h.scaleY=c,h.rotation=f,h.skewX=p,kt&&(h.rotationX=h.rotationY=h.z=0,h.perspective=y,h.scaleZ=1),h.svg&&(h.x-=h.xOrigin-(h.xOrigin*H+h.yOrigin*z),h.y-=h.yOrigin-(h.xOrigin*B+h.yOrigin*U))}h.zOrigin=g;for(l in h)h[l]<m&&h[l]>-m&&(h[l]=0)}return r&&(t._gsTransform=h,h.svg&&(xt&&t.style[Tt]?e.delayedCall(.001,function(){Vt(t.style,Tt)}):!xt&&t.getAttribute("transform")&&e.delayedCall(.001,function(){t.removeAttribute("transform")}))),h},qt=function(t){var e,n,r=this.data,i=-r.rotation*N,o=i+r.skewX*N,s=1e5,a=(Math.cos(i)*r.scaleX*s|0)/s,l=(Math.sin(i)*r.scaleX*s|0)/s,u=(Math.sin(o)*-r.scaleY*s|0)/s,c=(Math.cos(o)*r.scaleY*s|0)/s,f=this.t.style,p=this.t.currentStyle;if(p){n=l,l=-u,u=-n,e=p.filter,f.filter="";var h,d,v=this.t.offsetWidth,g=this.t.offsetHeight,y="absolute"!==p.position,$="progid:DXImageTransform.Microsoft.Matrix(M11="+a+", M12="+l+", M21="+u+", M22="+c,x=r.x+v*r.xPercent/100,_=r.y+g*r.yPercent/100;if(null!=r.ox&&(h=(r.oxp?v*r.ox*.01:r.ox)-v/2,d=(r.oyp?g*r.oy*.01:r.oy)-g/2,x+=h-(h*a+d*l),_+=d-(h*u+d*c)),y?(h=v/2,d=g/2,$+=", Dx="+(h-(h*a+d*l)+x)+", Dy="+(d-(h*u+d*c)+_)+")"):$+=", sizingMethod='auto expand')",-1!==e.indexOf("DXImageTransform.Microsoft.Matrix(")?f.filter=e.replace(j,$):f.filter=$+" "+e,(0===t||1===t)&&1===a&&0===l&&0===u&&1===c&&(y&&-1===$.indexOf("Dx=0, Dy=0")||w.test(e)&&100!==parseFloat(RegExp.$1)||-1===e.indexOf(e.indexOf("Alpha"))&&f.removeAttribute("filter")),!y){var T,C,S,k=8>m?1:-1;for(h=r.ieOffsetX||0,d=r.ieOffsetY||0,r.ieOffsetX=Math.round((v-((0>a?-a:a)*v+(0>l?-l:l)*g))/2+x),r.ieOffsetY=Math.round((g-((0>c?-c:c)*g+(0>u?-u:u)*v))/2+_),yt=0;4>yt;yt++)C=et[yt],T=p[C],n=-1!==T.indexOf("px")?parseFloat(T):Q(this.t,C,parseFloat(T),T.replace(b,""))||0,S=n!==r[C]?2>yt?-r.ieOffsetX:-r.ieOffsetY:2>yt?h-r.ieOffsetX:d-r.ieOffsetY,f[C]=(r[C]=Math.round(n-S*(0===yt||2===yt?1:k)))+"px"}}},Ft=L.set3DTransformRatio=L.setTransformRatio=function(t){var e,n,r,i,o,s,a,l,u,c,f,p,d,m,v,g,y,$,b,w,x,_,T,C=this.data,S=this.t.style,k=C.rotation,E=C.rotationX,A=C.rotationY,O=C.scaleX,j=C.scaleY,P=C.scaleZ,D=C.x,M=C.y,I=C.z,R=C.svg,q=C.perspective,F=C.force3D;if(((1===t||0===t)&&"auto"===F&&(this.tween._totalTime===this.tween._totalDuration||!this.tween._totalTime)||!F)&&!I&&!q&&!A&&!E&&1===P||xt&&R||!kt)return void(k||C.skewX||R?(k*=N,_=C.skewX*N,T=1e5,e=Math.cos(k)*O,i=Math.sin(k)*O,n=Math.sin(k-_)*-j,o=Math.cos(k-_)*j,_&&"simple"===C.skewType&&(y=Math.tan(_),y=Math.sqrt(1+y*y),n*=y,o*=y,C.skewY&&(e*=y,i*=y)),R&&(D+=C.xOrigin-(C.xOrigin*e+C.yOrigin*n)+C.xOffset,M+=C.yOrigin-(C.xOrigin*i+C.yOrigin*o)+C.yOffset,xt&&(C.xPercent||C.yPercent)&&(m=this.t.getBBox(),D+=.01*C.xPercent*m.width,M+=.01*C.yPercent*m.height),m=1e-6,m>D&&D>-m&&(D=0),m>M&&M>-m&&(M=0)),b=(e*T|0)/T+","+(i*T|0)/T+","+(n*T|0)/T+","+(o*T|0)/T+","+D+","+M+")",R&&xt?this.t.setAttribute("transform","matrix("+b):S[Tt]=(C.xPercent||C.yPercent?"translate("+C.xPercent+"%,"+C.yPercent+"%) matrix(":"matrix(")+b):S[Tt]=(C.xPercent||C.yPercent?"translate("+C.xPercent+"%,"+C.yPercent+"%) matrix(":"matrix(")+O+",0,0,"+j+","+D+","+M+")");if(h&&(m=1e-4,m>O&&O>-m&&(O=P=2e-5),m>j&&j>-m&&(j=P=2e-5),!q||C.z||C.rotationX||C.rotationY||(q=0)),k||C.skewX)k*=N,v=e=Math.cos(k),g=i=Math.sin(k),C.skewX&&(k-=C.skewX*N,v=Math.cos(k),g=Math.sin(k),"simple"===C.skewType&&(y=Math.tan(C.skewX*N),y=Math.sqrt(1+y*y),v*=y,g*=y,C.skewY&&(e*=y,i*=y))),n=-g,o=v;else{if(!(A||E||1!==P||q||R))return void(S[Tt]=(C.xPercent||C.yPercent?"translate("+C.xPercent+"%,"+C.yPercent+"%) translate3d(":"translate3d(")+D+"px,"+M+"px,"+I+"px)"+(1!==O||1!==j?" scale("+O+","+j+")":""));e=o=1,n=i=0}u=1,r=s=a=l=c=f=0,p=q?-1/q:0,d=C.zOrigin,m=1e-6,w=",",x="0",k=A*N,k&&(v=Math.cos(k),g=Math.sin(k),a=-g,c=p*-g,r=e*g,s=i*g,u=v,p*=v,e*=v,i*=v),k=E*N,k&&(v=Math.cos(k),g=Math.sin(k),y=n*v+r*g,$=o*v+s*g,l=u*g,f=p*g,r=n*-g+r*v,s=o*-g+s*v,u*=v,p*=v,n=y,o=$),1!==P&&(r*=P,s*=P,u*=P,p*=P),1!==j&&(n*=j,o*=j,l*=j,f*=j),1!==O&&(e*=O,i*=O,a*=O,c*=O),(d||R)&&(d&&(D+=r*-d,M+=s*-d,I+=u*-d+d),R&&(D+=C.xOrigin-(C.xOrigin*e+C.yOrigin*n)+C.xOffset,M+=C.yOrigin-(C.xOrigin*i+C.yOrigin*o)+C.yOffset),m>D&&D>-m&&(D=x),m>M&&M>-m&&(M=x),m>I&&I>-m&&(I=0)),b=C.xPercent||C.yPercent?"translate("+C.xPercent+"%,"+C.yPercent+"%) matrix3d(":"matrix3d(",b+=(m>e&&e>-m?x:e)+w+(m>i&&i>-m?x:i)+w+(m>a&&a>-m?x:a),b+=w+(m>c&&c>-m?x:c)+w+(m>n&&n>-m?x:n)+w+(m>o&&o>-m?x:o),E||A||1!==P?(b+=w+(m>l&&l>-m?x:l)+w+(m>f&&f>-m?x:f)+w+(m>r&&r>-m?x:r),b+=w+(m>s&&s>-m?x:s)+w+(m>u&&u>-m?x:u)+w+(m>p&&p>-m?x:p)+w):b+=",0,0,0,0,1,0,",b+=D+w+M+w+I+w+(q?1+-I/q:1)+")",S[Tt]=b};u=Et.prototype,u.x=u.y=u.z=u.skewX=u.skewY=u.rotation=u.rotationX=u.rotationY=u.zOrigin=u.xPercent=u.yPercent=u.xOffset=u.yOffset=0,u.scaleX=u.scaleY=u.scaleZ=1,bt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,n,r,o,a,l){if(r._lastParsedTransform===l)return o;r._lastParsedTransform=l;var u,c,f,p,h,d,m,v,g,y,$=t._gsTransform,b=t.style,w=1e-6,x=_t.length,_=l,T={},C="transformOrigin";if(l.display?(p=G(t,"display"),b.display="block",u=Rt(t,i,!0,l.parseTransform),b.display=p):u=Rt(t,i,!0,l.parseTransform),r._transform=u,"string"==typeof _.transform&&Tt)p=q.style,p[Tt]=_.transform,p.display="block",p.position="absolute",I.body.appendChild(q),c=Rt(q,null,!1),I.body.removeChild(q),c.perspective||(c.perspective=u.perspective),null!=_.xPercent&&(c.xPercent=ot(_.xPercent,u.xPercent)),null!=_.yPercent&&(c.yPercent=ot(_.yPercent,u.yPercent));else if("object"==typeof _){if(c={scaleX:ot(null!=_.scaleX?_.scaleX:_.scale,u.scaleX),scaleY:ot(null!=_.scaleY?_.scaleY:_.scale,u.scaleY),scaleZ:ot(_.scaleZ,u.scaleZ),x:ot(_.x,u.x),y:ot(_.y,u.y),z:ot(_.z,u.z),xPercent:ot(_.xPercent,u.xPercent),yPercent:ot(_.yPercent,u.yPercent),perspective:ot(_.transformPerspective,u.perspective)},v=_.directionalRotation,null!=v)if("object"==typeof v)for(p in v)_[p]=v[p];else _.rotation=v;"string"==typeof _.x&&-1!==_.x.indexOf("%")&&(c.x=0,c.xPercent=ot(_.x,u.xPercent)),"string"==typeof _.y&&-1!==_.y.indexOf("%")&&(c.y=0,c.yPercent=ot(_.y,u.yPercent)),c.rotation=st("rotation"in _?_.rotation:"shortRotation"in _?_.shortRotation+"_short":"rotationZ"in _?_.rotationZ:u.rotation,u.rotation,"rotation",T),kt&&(c.rotationX=st("rotationX"in _?_.rotationX:"shortRotationX"in _?_.shortRotationX+"_short":u.rotationX||0,u.rotationX,"rotationX",T),c.rotationY=st("rotationY"in _?_.rotationY:"shortRotationY"in _?_.shortRotationY+"_short":u.rotationY||0,u.rotationY,"rotationY",T)),c.skewX=null==_.skewX?u.skewX:st(_.skewX,u.skewX),c.skewY=null==_.skewY?u.skewY:st(_.skewY,u.skewY),(f=c.skewY-u.skewY)&&(c.skewX+=f,c.rotation+=f)}for(kt&&null!=_.force3D&&(u.force3D=_.force3D,m=!0),u.skewType=_.skewType||u.skewType||s.defaultSkewType,d=u.force3D||u.z||u.rotationX||u.rotationY||c.z||c.rotationX||c.rotationY||c.perspective,d||null==_.scale||(c.scaleZ=1);--x>-1;)n=_t[x],h=c[n]-u[n],(h>w||-w>h||null!=_[n]||null!=M[n])&&(m=!0,o=new mt(u,n,u[n],h,o),n in T&&(o.e=T[n]),o.xs0=0,o.plugin=a,r._overwriteProps.push(o.n));return h=_.transformOrigin,u.svg&&(h||_.svgOrigin)&&(g=u.xOffset,y=u.yOffset,Nt(t,rt(h),c,_.svgOrigin,_.smoothOrigin),o=vt(u,"xOrigin",($?u:c).xOrigin,c.xOrigin,o,C),o=vt(u,"yOrigin",($?u:c).yOrigin,c.yOrigin,o,C),(g!==u.xOffset||y!==u.yOffset)&&(o=vt(u,"xOffset",$?g:u.xOffset,u.xOffset,o,C),o=vt(u,"yOffset",$?y:u.yOffset,u.yOffset,o,C)),h=xt?null:"0px 0px"),(h||kt&&d&&u.zOrigin)&&(Tt?(m=!0,n=St,h=(h||G(t,n,i,!1,"50% 50%"))+"",o=new mt(b,n,0,0,o,-1,C),o.b=b[n],o.plugin=a,kt?(p=u.zOrigin,h=h.split(" "),u.zOrigin=(h.length>2&&(0===p||"0px"!==h[2])?parseFloat(h[2]):p)||0,o.xs0=o.e=h[0]+" "+(h[1]||"50%")+" 0px",o=new mt(u,"zOrigin",0,0,o,-1,o.n),o.b=p,o.xs0=o.e=u.zOrigin):o.xs0=o.e=h):rt(h+"",u)),m&&(r._transformType=u.svg&&xt||!d&&3!==this._transformType?2:3),o},prefix:!0}),bt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),bt("borderRadius",{defaultValue:"0px",parser:function(t,e,n,o,s,a){e=this.format(e);var l,u,c,f,p,h,d,m,v,g,y,$,b,w,x,_,T=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],C=t.style;for(v=parseFloat(t.offsetWidth),g=parseFloat(t.offsetHeight),l=e.split(" "),u=0;u<T.length;u++)this.p.indexOf("border")&&(T[u]=X(T[u])),p=f=G(t,T[u],i,!1,"0px"),-1!==p.indexOf(" ")&&(f=p.split(" "),p=f[0],f=f[1]),h=c=l[u],d=parseFloat(p),$=p.substr((d+"").length),b="="===h.charAt(1),b?(m=parseInt(h.charAt(0)+"1",10),h=h.substr(2),m*=parseFloat(h),y=h.substr((m+"").length-(0>m?1:0))||""):(m=parseFloat(h),y=h.substr((m+"").length)),""===y&&(y=r[n]||$),y!==$&&(w=Q(t,"borderLeft",d,$),x=Q(t,"borderTop",d,$),"%"===y?(p=w/v*100+"%",f=x/g*100+"%"):"em"===y?(_=Q(t,"borderLeft",1,"em"),p=w/_+"em",f=x/_+"em"):(p=w+"px",f=x+"px"),b&&(h=parseFloat(p)+m+y,c=parseFloat(f)+m+y)),s=gt(C,T[u],p+" "+f,h+" "+c,!1,"0px",s);return s},prefix:!0,formatter:pt("0px 0px 0px 0px",!1,!0)}),bt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,n,r,o,s){var a,l,u,c,f,p,h="background-position",d=i||Y(t,null),v=this.format((d?m?d.getPropertyValue(h+"-x")+" "+d.getPropertyValue(h+"-y"):d.getPropertyValue(h):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),g=this.format(e);if(-1!==v.indexOf("%")!=(-1!==g.indexOf("%"))&&(p=G(t,"backgroundImage").replace(k,""),p&&"none"!==p)){for(a=v.split(" "),l=g.split(" "),F.setAttribute("src",p),u=2;--u>-1;)v=a[u],c=-1!==v.indexOf("%"),c!==(-1!==l[u].indexOf("%"))&&(f=0===u?t.offsetWidth-F.width:t.offsetHeight-F.height,a[u]=c?parseFloat(v)/100*f+"px":parseFloat(v)/f*100+"%");v=a.join(" ")}return this.parseComplex(t.style,v,g,o,s)},formatter:rt}),bt("backgroundSize",{defaultValue:"0 0",formatter:rt}),bt("perspective",{defaultValue:"0px",prefix:!0}),bt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),bt("transformStyle",{prefix:!0}),bt("backfaceVisibility",{prefix:!0}),bt("userSelect",{prefix:!0}),bt("margin",{parser:ht("marginTop,marginRight,marginBottom,marginLeft")}),bt("padding",{parser:ht("paddingTop,paddingRight,paddingBottom,paddingLeft")}),bt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,n,r,o,s){var a,l,u;return 9>m?(l=t.currentStyle,u=8>m?" ":",",a="rect("+l.clipTop+u+l.clipRight+u+l.clipBottom+u+l.clipLeft+")",e=this.format(e).split(",").join(u)):(a=this.format(G(t,this.p,i,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,o,s)}}),bt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),bt("autoRound,strictUnits",{parser:function(t,e,n,r,i){return i}}),bt("border",{defaultValue:"0px solid #000",parser:function(t,e,n,r,o,s){return this.parseComplex(t.style,this.format(G(t,"borderTopWidth",i,!1,"0px")+" "+G(t,"borderTopStyle",i,!1,"solid")+" "+G(t,"borderTopColor",i,!1,"#000")),this.format(e),o,s)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(ft)||["#000"])[0]}}),bt("borderWidth",{parser:ht("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),bt("float,cssFloat,styleFloat",{parser:function(t,e,n,r,i,o){var s=t.style,a="cssFloat"in s?"cssFloat":"styleFloat";return new mt(s,a,0,0,i,-1,n,!1,0,s[a],e)}});var Lt=function(t){var e,n=this.t,r=n.filter||G(this.data,"filter")||"",i=this.s+this.c*t|0;100===i&&(-1===r.indexOf("atrix(")&&-1===r.indexOf("radient(")&&-1===r.indexOf("oader(")?(n.removeAttribute("filter"),e=!G(this.data,"filter")):(n.filter=r.replace(_,""),e=!0)),e||(this.xn1&&(n.filter=r=r||"alpha(opacity="+i+")"),-1===r.indexOf("pacity")?0===i&&this.xn1||(n.filter=r+" alpha(opacity="+i+")"):n.filter=r.replace(w,"opacity="+i))};bt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,n,r,o,s){var a=parseFloat(G(t,"opacity",i,!1,"1")),l=t.style,u="autoAlpha"===n;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),u&&1===a&&"hidden"===G(t,"visibility",i)&&0!==e&&(a=0),H?o=new mt(l,"opacity",a,e-a,o):(o=new mt(l,"opacity",100*a,100*(e-a),o),o.xn1=u?1:0,l.zoom=1,o.type=2,o.b="alpha(opacity="+o.s+")",o.e="alpha(opacity="+(o.s+o.c)+")",o.data=t,o.plugin=s,o.setRatio=Lt),u&&(o=new mt(l,"visibility",0,0,o,-1,null,!1,0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit"),o.xs0="inherit",r._overwriteProps.push(o.n),r._overwriteProps.push(n)),o}});var Vt=function(t,e){e&&(t.removeProperty?(("ms"===e.substr(0,2)||"webkit"===e.substr(0,6))&&(e="-"+e),t.removeProperty(e.replace(C,"-$1").toLowerCase())):t.removeAttribute(e))},Ht=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,n=this.t.style;e;)e.v?n[e.p]=e.v:Vt(n,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};bt("className",{parser:function(t,e,r,o,s,a,l){var u,c,f,p,h,d=t.getAttribute("class")||"",m=t.style.cssText;if(s=o._classNamePT=new mt(t,r,0,0,s,2),s.setRatio=Ht,s.pr=-11,n=!0,s.b=d,c=K(t,i),f=t._gsClassPT){for(p={},h=f.data;h;)p[h.p]=1,h=h._next;f.setRatio(1)}return t._gsClassPT=s,s.e="="!==e.charAt(1)?e:d.replace(new RegExp("\\s*\\b"+e.substr(2)+"\\b"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",s.e),u=J(t,c,K(t),l,p),t.setAttribute("class",d),s.data=u.firstMPT,t.style.cssText=m,s=s.xfirst=o.parse(t,u.difs,s,a)}});var Bt=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,n,r,i,o,s=this.t.style,a=l.transform.parse;if("all"===this.e)s.cssText="",i=!0;else for(e=this.e.split(" ").join("").split(","),r=e.length;--r>-1;)n=e[r],l[n]&&(l[n].parse===a?i=!0:n="transformOrigin"===n?St:l[n].p),Vt(s,n);i&&(Vt(s,Tt),o=this.t._gsTransform,o&&(o.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(bt("clearProps",{parser:function(t,e,r,i,o){return o=new mt(t,r,0,0,o,2),o.setRatio=Bt,o.e=e,o.pr=-10,o.data=i._tween,n=!0,o}}),u="bezier,throwProps,physicsProps,physics2D".split(","),yt=u.length;yt--;)wt(u[yt]);u=s.prototype,u._firstPT=u._lastParsedTransform=u._transform=null,u._onInitTween=function(t,e,a){if(!t.nodeType)return!1;this._target=t,this._tween=a,this._vars=e,c=e.autoRound,n=!1,r=e.suffixMap||s.suffixMap,i=Y(t,""),o=this._overwriteProps;var u,h,m,v,g,y,$,b,w,_=t.style;if(f&&""===_.zIndex&&(u=G(t,"zIndex",i),("auto"===u||""===u)&&this._addLazySet(_,"zIndex",0)),"string"==typeof e&&(v=_.cssText,u=K(t,i),_.cssText=v+";"+e,u=J(t,u,K(t)).difs,!H&&x.test(e)&&(u.opacity=parseFloat(RegExp.$1)),e=u,_.cssText=v),e.className?this._firstPT=h=l.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=h=this.parse(t,e,null),this._transformType){for(w=3===this._transformType,Tt?p&&(f=!0,""===_.zIndex&&($=G(t,"zIndex",i),("auto"===$||""===$)&&this._addLazySet(_,"zIndex",0)),d&&this._addLazySet(_,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(w?"visible":"hidden"))):_.zoom=1,m=h;m&&m._next;)m=m._next;b=new mt(t,"transform",0,0,null,2),this._linkCSSP(b,null,m),b.setRatio=Tt?Ft:qt,b.data=this._transform||Rt(t,i,!0),b.tween=a,b.pr=-1,o.pop()}if(n){for(;h;){for(y=h._next,m=v;m&&m.pr>h.pr;)m=m._next;(h._prev=m?m._prev:g)?h._prev._next=h:v=h,(h._next=m)?m._prev=h:g=h,h=y}this._firstPT=v}return!0},u.parse=function(t,e,n,o){var s,a,u,f,p,h,d,m,v,g,y=t.style;for(s in e)h=e[s],a=l[s],a?n=a.parse(t,h,s,this,n,o,e):(p=G(t,s,i)+"",v="string"==typeof h,"color"===s||"fill"===s||"stroke"===s||-1!==s.indexOf("Color")||v&&T.test(h)?(v||(h=ut(h),h=(h.length>3?"rgba(":"rgb(")+h.join(",")+")"),n=gt(y,s,p,h,!0,"transparent",n,0,o)):!v||-1===h.indexOf(" ")&&-1===h.indexOf(",")?(u=parseFloat(p),d=u||0===u?p.substr((u+"").length):"",(""===p||"auto"===p)&&("width"===s||"height"===s?(u=nt(t,s,i),d="px"):"left"===s||"top"===s?(u=Z(t,s,i),d="px"):(u="opacity"!==s?0:1,d="")),g=v&&"="===h.charAt(1),g?(f=parseInt(h.charAt(0)+"1",10),h=h.substr(2),f*=parseFloat(h),m=h.replace(b,"")):(f=parseFloat(h),m=v?h.replace(b,""):""),""===m&&(m=s in r?r[s]:d),h=f||0===f?(g?f+u:f)+m:e[s],d!==m&&""!==m&&(f||0===f)&&u&&(u=Q(t,s,u,d),"%"===m?(u/=Q(t,s,100,"%")/100,e.strictUnits!==!0&&(p=u+"%")):"em"===m||"rem"===m||"vw"===m||"vh"===m?u/=Q(t,s,1,m):"px"!==m&&(f=Q(t,s,f,m),m="px"),g&&(f||0===f)&&(h=f+u+m)),g&&(f+=u),!u&&0!==u||!f&&0!==f?void 0!==y[s]&&(h||h+""!="NaN"&&null!=h)?(n=new mt(y,s,f||u||0,0,n,-1,s,!1,0,p,h),n.xs0="none"!==h||"display"!==s&&-1===s.indexOf("Style")?h:p):z("invalid "+s+" tween value: "+e[s]):(n=new mt(y,s,u,f-u,n,0,s,c!==!1&&("px"===m||"zIndex"===s),0,p,h),n.xs0=m)):n=gt(y,s,p,h,!0,null,n,0,o)),o&&n&&!n.plugin&&(n.plugin=o);return n},u.setRatio=function(t){var e,n,r,i=this._firstPT,o=1e-6;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;i;){if(e=i.c*t+i.s,i.r?e=Math.round(e):o>e&&e>-o&&(e=0),i.type)if(1===i.type)if(r=i.l,2===r)i.t[i.p]=i.xs0+e+i.xs1+i.xn1+i.xs2;else if(3===r)i.t[i.p]=i.xs0+e+i.xs1+i.xn1+i.xs2+i.xn2+i.xs3;else if(4===r)i.t[i.p]=i.xs0+e+i.xs1+i.xn1+i.xs2+i.xn2+i.xs3+i.xn3+i.xs4;else if(5===r)i.t[i.p]=i.xs0+e+i.xs1+i.xn1+i.xs2+i.xn2+i.xs3+i.xn3+i.xs4+i.xn4+i.xs5;else{for(n=i.xs0+e+i.xs1,r=1;r<i.l;r++)n+=i["xn"+r]+i["xs"+(r+1)];i.t[i.p]=n}else-1===i.type?i.t[i.p]=i.xs0:i.setRatio&&i.setRatio(t);else i.t[i.p]=e+i.xs0;i=i._next}else for(;i;)2!==i.type?i.t[i.p]=i.b:i.setRatio(t),i=i._next;else for(;i;){if(2!==i.type)if(i.r&&-1!==i.type)if(e=Math.round(i.s+i.c),i.type){if(1===i.type){for(r=i.l,n=i.xs0+e+i.xs1,r=1;r<i.l;r++)n+=i["xn"+r]+i["xs"+(r+1)];i.t[i.p]=n}}else i.t[i.p]=e+i.xs0;else i.t[i.p]=i.e;else i.setRatio(t);i=i._next}},u._enableTransforms=function(t){this._transform=this._transform||Rt(this._target,i,!0),this._transformType=this._transform.svg&&xt||!t&&3!==this._transformType?2:3};var zt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};u._addLazySet=function(t,e,n){var r=this._firstPT=new mt(t,e,0,0,this._firstPT,2);r.e=n,r.setRatio=zt,r.data=this},u._linkCSSP=function(t,e,n,r){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,r=!0),n?n._next=t:r||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=n),t},u._kill=function(e){var n,r,i,o=e;if(e.autoAlpha||e.alpha){o={};for(r in e)o[r]=e[r];o.opacity=1,o.autoAlpha&&(o.visibility=1)}return e.className&&(n=this._classNamePT)&&(i=n.xfirst,i&&i._prev?this._linkCSSP(i._prev,n._next,i._prev._prev):i===this._firstPT&&(this._firstPT=n._next),n._next&&this._linkCSSP(n._next,n._next._next,i._prev),this._classNamePT=null),t.prototype._kill.call(this,o)};var Ut=function(t,e,n){var r,i,o,s;if(t.slice)for(i=t.length;--i>-1;)Ut(t[i],e,n);else for(r=t.childNodes,i=r.length;--i>-1;)o=r[i],s=o.type,o.style&&(e.push(K(o)),n&&n.push(o)),1!==s&&9!==s&&11!==s||!o.childNodes.length||Ut(o,e,n)};return s.cascadeTo=function(t,n,r){var i,o,s,a,l=e.to(t,n,r),u=[l],c=[],f=[],p=[],h=e._internals.reservedProps;for(t=l._targets||l.target,Ut(t,c,p),l.render(n,!0,!0),Ut(t,f),l.render(0,!0,!0),l._enabled(!0),i=p.length;--i>-1;)if(o=J(p[i],c[i],f[i]),o.firstMPT){o=o.difs;for(s in r)h[s]&&(o[s]=r[s]);a={};for(s in o)a[s]=c[i][s];u.push(e.fromTo(p[i],n,a,o))}return u},t.activate([s]),s},!0)}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()(),function(t){"use strict";var e=function(){return(_gsScope.GreenSockGlobals||_gsScope)[t]};"function"==typeof define&&define.amd?define(["TweenLite"],e):"undefined"!=typeof module&&module.exports&&(require("../TweenLite.js"),module.exports=e())}("CSSPlugin"),function(t){function e(e,n,r,i){var o=e.text(),s=o.split(n),a="";s.length&&(t(s).each(function(t,e){a+='<span class="'+r+(t+1)+'" aria-hidden="true">'+e+"</span>"+i}),e.attr("aria-label",o).empty().append(a))}var n={init:function(){return this.each(function(){e(t(this),"","char","")})},words:function(){return this.each(function(){e(t(this)," ","word"," ")})},lines:function(){return this.each(function(){var n="eefec303079ad17405c889e092e105b0";e(t(this).children("br").replaceWith(n).end(),n,"line","")})}};t.fn.lettering=function(e){return e&&n[e]?n[e].apply(this,[].slice.call(arguments,1)):"letters"!==e&&e?(t.error("Method "+e+" does not exist on jQuery.lettering"),this):n.init.apply(this,[].slice.call(arguments,0))}}(jQuery),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t:t(jQuery)}(function(t){function e(e){var s=e||window.event,a=l.call(arguments,1),u=0,f=0,p=0,h=0,d=0,m=0;if(e=t.event.fix(s),e.type="mousewheel","detail"in s&&(p=-1*s.detail),"wheelDelta"in s&&(p=s.wheelDelta),"wheelDeltaY"in s&&(p=s.wheelDeltaY),"wheelDeltaX"in s&&(f=-1*s.wheelDeltaX),"axis"in s&&s.axis===s.HORIZONTAL_AXIS&&(f=-1*p,p=0),u=0===p?f:p,"deltaY"in s&&(p=-1*s.deltaY,u=p),"deltaX"in s&&(f=s.deltaX,0===p&&(u=-1*f)),0!==p||0!==f){if(1===s.deltaMode){var v=t.data(this,"mousewheel-line-height");u*=v,p*=v,f*=v}else if(2===s.deltaMode){var g=t.data(this,"mousewheel-page-height");u*=g,p*=g,f*=g}if(h=Math.max(Math.abs(p),Math.abs(f)),(!o||o>h)&&(o=h,r(s,h)&&(o/=40)),r(s,h)&&(u/=40,f/=40,p/=40),u=Math[u>=1?"floor":"ceil"](u/o),f=Math[f>=1?"floor":"ceil"](f/o),p=Math[p>=1?"floor":"ceil"](p/o),c.settings.normalizeOffset&&this.getBoundingClientRect){var y=this.getBoundingClientRect();d=e.clientX-y.left,m=e.clientY-y.top}return e.deltaX=f,e.deltaY=p,e.deltaFactor=o,e.offsetX=d,e.offsetY=m,e.deltaMode=0,a.unshift(e,u,f,p),i&&clearTimeout(i),i=setTimeout(n,200),(t.event.dispatch||t.event.handle).apply(this,a)}}function n(){o=null}function r(t,e){return c.settings.adjustOldDeltas&&"mousewheel"===t.type&&e%120===0}var i,o,s=["wheel","mousewheel","DOMMouseScroll","MozMousePixelScroll"],a="onwheel"in document||document.documentMode>=9?["wheel"]:["mousewheel","DomMouseScroll","MozMousePixelScroll"],l=Array.prototype.slice;if(t.event.fixHooks)for(var u=s.length;u;)t.event.fixHooks[s[--u]]=t.event.mouseHooks;var c=t.event.special.mousewheel={version:"3.1.12",setup:function(){if(this.addEventListener)for(var n=a.length;n;)this.addEventListener(a[--n],e,!1);else this.onmousewheel=e;t.data(this,"mousewheel-line-height",c.getLineHeight(this)),t.data(this,"mousewheel-page-height",c.getPageHeight(this))},teardown:function(){if(this.removeEventListener)for(var n=a.length;n;)this.removeEventListener(a[--n],e,!1);else this.onmousewheel=null;t.removeData(this,"mousewheel-line-height"),t.removeData(this,"mousewheel-page-height")},getLineHeight:function(e){var n=t(e),r=n["offsetParent"in t.fn?"offsetParent":"parent"]();return r.length||(r=t("body")),parseInt(r.css("fontSize"),10)||parseInt(n.css("fontSize"),10)||16},getPageHeight:function(e){return t(e).height()},settings:{adjustOldDeltas:!0,normalizeOffset:!0}};t.fn.extend({mousewheel:function(t){return t?this.bind("mousewheel",t):this.trigger("mousewheel")},unmousewheel:function(t){return this.unbind("mousewheel",t)}})}),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){t.fn.jScrollPane=function(e){function n(e,n){function r(n){var o,a,u,c,f,d,m=!1,v=!1;if(F=n,void 0===L)f=e.scrollTop(),d=e.scrollLeft(),e.css({overflow:"hidden",padding:0}),V=e.innerWidth()+gt,H=e.innerHeight(),e.width(V),L=t('<div class="jspPane" />').css("padding",vt).append(e.children()),B=t('<div class="jspContainer" />').css({width:V+"px",height:H+"px"}).append(L).appendTo(e);else{if(e.css("width",""),m=F.stickToBottom&&S(),v=F.stickToRight&&k(),c=e.innerWidth()+gt!=V||e.outerHeight()!=H,c&&(V=e.innerWidth()+gt,H=e.innerHeight(),B.css({width:V+"px",height:H+"px"})),!c&&yt==z&&L.outerHeight()==U)return void e.width(V);yt=z,L.css("width",""),e.width(V),B.find(">.jspVerticalBar,>.jspHorizontalBar").remove().end()}L.css("overflow","auto"),z=n.contentWidth?n.contentWidth:L[0].scrollWidth,U=L[0].scrollHeight,L.css("overflow",""),W=z/V,X=U/H,Y=X>1,G=W>1,G||Y?(e.addClass("jspScrollable"),o=F.maintainPosition&&(K||et),o&&(a=T(),u=C()),i(),s(),l(),o&&(x(v?z-V:a,!1),w(m?U-H:u,!1)),j(),E(),R(),F.enableKeyboardNavigation&&N(),F.clickOnTrack&&p(),M(),F.hijackInternalLinks&&I()):(e.removeClass("jspScrollable"),L.css({top:0,left:0,width:B.width()-gt}),A(),P(),D(),h()),F.autoReinitialise&&!mt?mt=setInterval(function(){r(F)},F.autoReinitialiseDelay):!F.autoReinitialise&&mt&&clearInterval(mt),f&&e.scrollTop(0)&&w(f,!1),d&&e.scrollLeft(0)&&x(d,!1),e.trigger("jsp-initialised",[G||Y])}function i(){Y&&(B.append(t('<div class="jspVerticalBar" />').append(t('<div class="jspCap jspCapTop" />'),t('<div class="jspTrack" />').append(t('<div class="jspDrag" />').append(t('<div class="jspDragTop" />'),t('<div class="jspDragBottom" />'))),t('<div class="jspCap jspCapBottom" />'))),nt=B.find(">.jspVerticalBar"),rt=nt.find(">.jspTrack"),Q=rt.find(">.jspDrag"),F.showArrows&&(at=t('<a class="jspArrow jspArrowUp" />').bind("mousedown.jsp",c(0,-1)).bind("click.jsp",O),lt=t('<a class="jspArrow jspArrowDown" />').bind("mousedown.jsp",c(0,1)).bind("click.jsp",O),F.arrowScrollOnHover&&(at.bind("mouseover.jsp",c(0,-1,at)),lt.bind("mouseover.jsp",c(0,1,lt))),u(rt,F.verticalArrowPositions,at,lt)),ot=H,B.find(">.jspVerticalBar>.jspCap:visible,>.jspVerticalBar>.jspArrow").each(function(){ot-=t(this).outerHeight()}),Q.hover(function(){Q.addClass("jspHover")},function(){Q.removeClass("jspHover")}).bind("mousedown.jsp",function(e){t("html").bind("dragstart.jsp selectstart.jsp",O),Q.addClass("jspActive");var n=e.pageY-Q.position().top;return t("html").bind("mousemove.jsp",function(t){m(t.pageY-n,!1)}).bind("mouseup.jsp mouseleave.jsp",d),!1}),o())}function o(){rt.height(ot+"px"),K=0,it=F.verticalGutter+rt.outerWidth(),L.width(V-it-gt);try{0===nt.position().left&&L.css("margin-left",it+"px")}catch(t){}}function s(){G&&(B.append(t('<div class="jspHorizontalBar" />').append(t('<div class="jspCap jspCapLeft" />'),t('<div class="jspTrack" />').append(t('<div class="jspDrag" />').append(t('<div class="jspDragLeft" />'),t('<div class="jspDragRight" />'))),t('<div class="jspCap jspCapRight" />'))),ut=B.find(">.jspHorizontalBar"),ct=ut.find(">.jspTrack"),J=ct.find(">.jspDrag"),F.showArrows&&(ht=t('<a class="jspArrow jspArrowLeft" />').bind("mousedown.jsp",c(-1,0)).bind("click.jsp",O),dt=t('<a class="jspArrow jspArrowRight" />').bind("mousedown.jsp",c(1,0)).bind("click.jsp",O),F.arrowScrollOnHover&&(ht.bind("mouseover.jsp",c(-1,0,ht)),dt.bind("mouseover.jsp",c(1,0,dt))),u(ct,F.horizontalArrowPositions,ht,dt)),J.hover(function(){J.addClass("jspHover")},function(){J.removeClass("jspHover")}).bind("mousedown.jsp",function(e){t("html").bind("dragstart.jsp selectstart.jsp",O),J.addClass("jspActive");var n=e.pageX-J.position().left;return t("html").bind("mousemove.jsp",function(t){g(t.pageX-n,!1)}).bind("mouseup.jsp mouseleave.jsp",d),!1}),ft=B.innerWidth(),a())}function a(){B.find(">.jspHorizontalBar>.jspCap:visible,>.jspHorizontalBar>.jspArrow").each(function(){ft-=t(this).outerWidth()}),ct.width(ft+"px"),et=0}function l(){if(G&&Y){var e=ct.outerHeight(),n=rt.outerWidth();ot-=e,t(ut).find(">.jspCap:visible,>.jspArrow").each(function(){ft+=t(this).outerWidth()}),ft-=n,H-=n,V-=e,ct.parent().append(t('<div class="jspCorner" />').css("width",e+"px")),o(),a()}G&&L.width(B.outerWidth()-gt+"px"),U=L.outerHeight(),X=U/H,G&&(pt=Math.ceil(1/W*ft),pt>F.horizontalDragMaxWidth?pt=F.horizontalDragMaxWidth:pt<F.horizontalDragMinWidth&&(pt=F.horizontalDragMinWidth),J.width(pt+"px"),tt=ft-pt,y(et)),Y&&(st=Math.ceil(1/X*ot),st>F.verticalDragMaxHeight?st=F.verticalDragMaxHeight:st<F.verticalDragMinHeight&&(st=F.verticalDragMinHeight),Q.height(st+"px"),Z=ot-st,v(K))}function u(t,e,n,r){var i,o="before",s="after";"os"==e&&(e=/Mac/.test(navigator.platform)?"after":"split"),e==o?s=e:e==s&&(o=e,i=n,n=r,r=i),t[o](n)[s](r)}function c(t,e,n){return function(){return f(t,e,this,n),this.blur(),!1}}function f(e,n,r,i){r=t(r).addClass("jspActive");var o,s,a=!0,l=function(){0!==e&&$t.scrollByX(e*F.arrowButtonSpeed),0!==n&&$t.scrollByY(n*F.arrowButtonSpeed),s=setTimeout(l,a?F.initialDelay:F.arrowRepeatFreq),a=!1};l(),o=i?"mouseout.jsp":"mouseup.jsp",i=i||t("html"),i.bind(o,function(){r.removeClass("jspActive"),s&&clearTimeout(s),s=null,i.unbind(o)})}function p(){h(),Y&&rt.bind("mousedown.jsp",function(e){if(void 0===e.originalTarget||e.originalTarget==e.currentTarget){var n,r=t(this),i=r.offset(),o=e.pageY-i.top-K,s=!0,a=function(){var t=r.offset(),i=e.pageY-t.top-st/2,u=H*F.scrollPagePercent,c=Z*u/(U-H);if(0>o)K-c>i?$t.scrollByY(-u):m(i);else{if(!(o>0))return void l();i>K+c?$t.scrollByY(u):m(i)}n=setTimeout(a,s?F.initialDelay:F.trackClickRepeatFreq),s=!1},l=function(){n&&clearTimeout(n),n=null,t(document).unbind("mouseup.jsp",l)};return a(),t(document).bind("mouseup.jsp",l),!1}}),G&&ct.bind("mousedown.jsp",function(e){if(void 0===e.originalTarget||e.originalTarget==e.currentTarget){var n,r=t(this),i=r.offset(),o=e.pageX-i.left-et,s=!0,a=function(){var t=r.offset(),i=e.pageX-t.left-pt/2,u=V*F.scrollPagePercent,c=tt*u/(z-V);if(0>o)et-c>i?$t.scrollByX(-u):g(i);else{if(!(o>0))return void l();i>et+c?$t.scrollByX(u):g(i)}n=setTimeout(a,s?F.initialDelay:F.trackClickRepeatFreq),s=!1},l=function(){n&&clearTimeout(n),n=null,t(document).unbind("mouseup.jsp",l)};return a(),t(document).bind("mouseup.jsp",l),!1}})}function h(){ct&&ct.unbind("mousedown.jsp"),
rt&&rt.unbind("mousedown.jsp")}function d(){t("html").unbind("dragstart.jsp selectstart.jsp mousemove.jsp mouseup.jsp mouseleave.jsp"),Q&&Q.removeClass("jspActive"),J&&J.removeClass("jspActive")}function m(t,e){Y&&(0>t?t=0:t>Z&&(t=Z),void 0===e&&(e=F.animateScroll),e?$t.animate(Q,"top",t,v):(Q.css("top",t),v(t)))}function v(t){void 0===t&&(t=Q.position().top),B.scrollTop(0),K=t||0;var n=0===K,r=K==Z,i=t/Z,o=-i*(U-H);(bt!=n||xt!=r)&&(bt=n,xt=r,e.trigger("jsp-arrow-change",[bt,xt,wt,_t])),$(n,r),L.css("top",o),e.trigger("jsp-scroll-y",[-o,n,r]).trigger("scroll")}function g(t,e){G&&(0>t?t=0:t>tt&&(t=tt),void 0===e&&(e=F.animateScroll),e?$t.animate(J,"left",t,y):(J.css("left",t),y(t)))}function y(t){void 0===t&&(t=J.position().left),B.scrollTop(0),et=t||0;var n=0===et,r=et==tt,i=t/tt,o=-i*(z-V);(wt!=n||_t!=r)&&(wt=n,_t=r,e.trigger("jsp-arrow-change",[bt,xt,wt,_t])),b(n,r),L.css("left",o),e.trigger("jsp-scroll-x",[-o,n,r]).trigger("scroll")}function $(t,e){F.showArrows&&(at[t?"addClass":"removeClass"]("jspDisabled"),lt[e?"addClass":"removeClass"]("jspDisabled"))}function b(t,e){F.showArrows&&(ht[t?"addClass":"removeClass"]("jspDisabled"),dt[e?"addClass":"removeClass"]("jspDisabled"))}function w(t,e){var n=t/(U-H);m(n*Z,e)}function x(t,e){var n=t/(z-V);g(n*tt,e)}function _(e,n,r){var i,o,s,a,l,u,c,f,p,h=0,d=0;try{i=t(e)}catch(m){return}for(o=i.outerHeight(),s=i.outerWidth(),B.scrollTop(0),B.scrollLeft(0);!i.is(".jspPane");)if(h+=i.position().top,d+=i.position().left,i=i.offsetParent(),/^body|html$/i.test(i[0].nodeName))return;a=C(),u=a+H,a>h||n?f=h-F.horizontalGutter:h+o>u&&(f=h-H+o+F.horizontalGutter),isNaN(f)||w(f,r),l=T(),c=l+V,l>d||n?p=d-F.horizontalGutter:d+s>c&&(p=d-V+s+F.horizontalGutter),isNaN(p)||x(p,r)}function T(){return-L.position().left}function C(){return-L.position().top}function S(){var t=U-H;return t>20&&t-C()<10}function k(){var t=z-V;return t>20&&t-T()<10}function E(){B.unbind(Ct).bind(Ct,function(t,e,n,r){et||(et=0),K||(K=0);var i=et,o=K,s=t.deltaFactor||F.mouseWheelSpeed;return $t.scrollBy(n*s,-r*s,!1),i==et&&o==K})}function A(){B.unbind(Ct)}function O(){return!1}function j(){L.find(":input,a").unbind("focus.jsp").bind("focus.jsp",function(t){_(t.target,!1)})}function P(){L.find(":input,a").unbind("focus.jsp")}function N(){function n(){var t=et,e=K;switch(r){case 40:$t.scrollByY(F.keyboardSpeed,!1);break;case 38:$t.scrollByY(-F.keyboardSpeed,!1);break;case 34:case 32:$t.scrollByY(H*F.scrollPagePercent,!1);break;case 33:$t.scrollByY(-H*F.scrollPagePercent,!1);break;case 39:$t.scrollByX(F.keyboardSpeed,!1);break;case 37:$t.scrollByX(-F.keyboardSpeed,!1)}return i=t!=et||e!=K}var r,i,o=[];G&&o.push(ut[0]),Y&&o.push(nt[0]),L.bind("focus.jsp",function(){e.focus()}),e.attr("tabindex",0).unbind("keydown.jsp keypress.jsp").bind("keydown.jsp",function(e){if(e.target===this||o.length&&t(e.target).closest(o).length){var s=et,a=K;switch(e.keyCode){case 40:case 38:case 34:case 32:case 33:case 39:case 37:r=e.keyCode,n();break;case 35:w(U-H),r=null;break;case 36:w(0),r=null}return i=e.keyCode==r&&s!=et||a!=K,!i}}).bind("keypress.jsp",function(t){return t.keyCode==r&&n(),!i}),F.hideFocus?(e.css("outline","none"),"hideFocus"in B[0]&&e.attr("hideFocus",!0)):(e.css("outline",""),"hideFocus"in B[0]&&e.attr("hideFocus",!1))}function D(){e.attr("tabindex","-1").removeAttr("tabindex").unbind("keydown.jsp keypress.jsp"),L.unbind(".jsp")}function M(){if(location.hash&&location.hash.length>1){var e,n,r=escape(location.hash.substr(1));try{e=t("#"+r+', a[name="'+r+'"]')}catch(i){return}e.length&&L.find(r)&&(0===B.scrollTop()?n=setInterval(function(){B.scrollTop()>0&&(_(e,!0),t(document).scrollTop(B.position().top),clearInterval(n))},50):(_(e,!0),t(document).scrollTop(B.position().top)))}}function I(){t(document.body).data("jspHijack")||(t(document.body).data("jspHijack",!0),t(document.body).delegate("a[href*=#]","click",function(e){var n,r,i,o,s,a,l=this.href.substr(0,this.href.indexOf("#")),u=location.href;if(-1!==location.href.indexOf("#")&&(u=location.href.substr(0,location.href.indexOf("#"))),l===u){n=escape(this.href.substr(this.href.indexOf("#")+1));try{r=t("#"+n+', a[name="'+n+'"]')}catch(c){return}r.length&&(i=r.closest(".jspScrollable"),o=i.data("jsp"),o.scrollToElement(r,!0),i[0].scrollIntoView&&(s=t(window).scrollTop(),a=r.offset().top,(s>a||a>s+t(window).height())&&i[0].scrollIntoView()),e.preventDefault())}}))}function R(){var t,e,n,r,i,o=!1;B.unbind("touchstart.jsp touchmove.jsp touchend.jsp click.jsp-touchclick").bind("touchstart.jsp",function(s){var a=s.originalEvent.touches[0];t=T(),e=C(),n=a.pageX,r=a.pageY,i=!1,o=!0}).bind("touchmove.jsp",function(s){if(o){var a=s.originalEvent.touches[0],l=et,u=K;return $t.scrollTo(t+n-a.pageX,e+r-a.pageY),i=i||Math.abs(n-a.pageX)>5||Math.abs(r-a.pageY)>5,l==et&&u==K}}).bind("touchend.jsp",function(t){o=!1}).bind("click.jsp-touchclick",function(t){return i?(i=!1,!1):void 0})}function q(){var t=C(),n=T();e.removeClass("jspScrollable").unbind(".jsp"),L.unbind(".jsp"),e.replaceWith(Tt.append(L.children())),Tt.scrollTop(t),Tt.scrollLeft(n),mt&&clearInterval(mt)}var F,L,V,H,B,z,U,W,X,Y,G,Q,Z,K,J,tt,et,nt,rt,it,ot,st,at,lt,ut,ct,ft,pt,ht,dt,mt,vt,gt,yt,$t=this,bt=!0,wt=!0,xt=!1,_t=!1,Tt=e.clone(!1,!1).empty(),Ct=t.fn.mwheelIntent?"mwheelIntent.jsp":"mousewheel.jsp";"border-box"===e.css("box-sizing")?(vt=0,gt=0):(vt=e.css("paddingTop")+" "+e.css("paddingRight")+" "+e.css("paddingBottom")+" "+e.css("paddingLeft"),gt=(parseInt(e.css("paddingLeft"),10)||0)+(parseInt(e.css("paddingRight"),10)||0)),t.extend($t,{reinitialise:function(e){e=t.extend({},F,e),r(e)},scrollToElement:function(t,e,n){_(t,e,n)},scrollTo:function(t,e,n){x(t,n),w(e,n)},scrollToX:function(t,e){x(t,e)},scrollToY:function(t,e){w(t,e)},scrollToPercentX:function(t,e){x(t*(z-V),e)},scrollToPercentY:function(t,e){w(t*(U-H),e)},scrollBy:function(t,e,n){$t.scrollByX(t,n),$t.scrollByY(e,n)},scrollByX:function(t,e){var n=T()+Math[0>t?"floor":"ceil"](t),r=n/(z-V);g(r*tt,e)},scrollByY:function(t,e){var n=C()+Math[0>t?"floor":"ceil"](t),r=n/(U-H);m(r*Z,e)},positionDragX:function(t,e){g(t,e)},positionDragY:function(t,e){m(t,e)},animate:function(t,e,n,r){var i={};i[e]=n,t.animate(i,{duration:F.animateDuration,easing:F.animateEase,queue:!1,step:r})},getContentPositionX:function(){return T()},getContentPositionY:function(){return C()},getContentWidth:function(){return z},getContentHeight:function(){return U},getPercentScrolledX:function(){return T()/(z-V)},getPercentScrolledY:function(){return C()/(U-H)},getIsScrollableH:function(){return G},getIsScrollableV:function(){return Y},getContentPane:function(){return L},scrollToBottom:function(t){m(Z,t)},hijackInternalLinks:t.noop,destroy:function(){q()}}),r(n)}return e=t.extend({},t.fn.jScrollPane.defaults,e),t.each(["arrowButtonSpeed","trackClickSpeed","keyboardSpeed"],function(){e[this]=e[this]||e.speed}),this.each(function(){var r=t(this),i=r.data("jsp");i?i.reinitialise(e):(t("script",r).filter('[type="text/javascript"],:not([type])').remove(),i=new n(r,e),r.data("jsp",i))})},t.fn.jScrollPane.defaults={showArrows:!1,maintainPosition:!0,stickToBottom:!1,stickToRight:!1,clickOnTrack:!0,autoReinitialise:!1,autoReinitialiseDelay:500,verticalDragMinHeight:0,verticalDragMaxHeight:99999,horizontalDragMinWidth:0,horizontalDragMaxWidth:99999,contentWidth:void 0,animateScroll:!1,animateDuration:300,animateEase:"linear",hijackInternalLinks:!1,verticalGutter:4,horizontalGutter:4,mouseWheelSpeed:3,arrowButtonSpeed:0,arrowRepeatFreq:50,arrowScrollOnHover:!1,trackClickSpeed:0,trackClickRepeatFreq:70,verticalArrowPositions:"split",horizontalArrowPositions:"split",enableKeyboardNavigation:!0,hideFocus:!1,keyboardSpeed:0,initialDelay:300,speed:30,scrollPagePercent:.8}}),function(){var t,e,n,r,i,o,s,a,l,u;e=window.device,t={},window.device=t,r=window.document.documentElement,u=window.navigator.userAgent.toLowerCase(),t.ios=function(){return t.iphone()||t.ipod()||t.ipad()},t.iphone=function(){return!t.windows()&&i("iphone")},t.ipod=function(){return i("ipod")},t.ipad=function(){return i("ipad")},t.android=function(){return!t.windows()&&i("android")},t.androidPhone=function(){return t.android()&&i("mobile")},t.androidTablet=function(){return t.android()&&!i("mobile")},t.blackberry=function(){return i("blackberry")||i("bb10")||i("rim")},t.blackberryPhone=function(){return t.blackberry()&&!i("tablet")},t.blackberryTablet=function(){return t.blackberry()&&i("tablet")},t.windows=function(){return i("windows")},t.windowsPhone=function(){return t.windows()&&i("phone")},t.windowsTablet=function(){return t.windows()&&i("touch")&&!t.windowsPhone()},t.fxos=function(){return(i("(mobile;")||i("(tablet;"))&&i("; rv:")},t.fxosPhone=function(){return t.fxos()&&i("mobile")},t.fxosTablet=function(){return t.fxos()&&i("tablet")},t.meego=function(){return i("meego")},t.cordova=function(){return window.cordova&&"file:"===location.protocol},t.nodeWebkit=function(){return"object"==typeof window.process},t.mobile=function(){return t.androidPhone()||t.iphone()||t.ipod()||t.windowsPhone()||t.blackberryPhone()||t.fxosPhone()||t.meego()},t.tablet=function(){return t.ipad()||t.androidTablet()||t.blackberryTablet()||t.windowsTablet()||t.fxosTablet()},t.desktop=function(){return!t.tablet()&&!t.mobile()},t.television=function(){var t;for(television=["googletv","viera","smarttv","internet.tv","netcast","nettv","appletv","boxee","kylo","roku","dlnadoc","roku","pov_tv","hbbtv","ce-html"],t=0;t<television.length;){if(i(television[t]))return!0;t++}return!1},t.portrait=function(){return window.innerHeight/window.innerWidth>1},t.landscape=function(){return window.innerHeight/window.innerWidth<1},t.noConflict=function(){return window.device=e,this},i=function(t){return-1!==u.indexOf(t)},s=function(t){var e;return e=new RegExp(t,"i"),r.className.match(e)},n=function(t){var e=null;s(t)||(e=r.className.replace(/^\s+|\s+$/g,""),r.className=e+" "+t)},l=function(t){s(t)&&(r.className=r.className.replace(" "+t,""))},t.ios()?t.ipad()?n("ios ipad tablet"):t.iphone()?n("ios iphone mobile"):t.ipod()&&n("ios ipod mobile"):t.android()?n(t.androidTablet()?"android tablet":"android mobile"):t.blackberry()?n(t.blackberryTablet()?"blackberry tablet":"blackberry mobile"):t.windows()?n(t.windowsTablet()?"windows tablet":t.windowsPhone()?"windows mobile":"desktop"):t.fxos()?n(t.fxosTablet()?"fxos tablet":"fxos mobile"):t.meego()?n("meego mobile"):t.nodeWebkit()?n("node-webkit"):t.television()?n("television"):t.desktop()&&n("desktop"),t.cordova()&&n("cordova"),o=function(){t.landscape()?(l("portrait"),n("landscape")):(l("landscape"),n("portrait"))},a=Object.prototype.hasOwnProperty.call(window,"onorientationchange")?"orientationchange":"resize",window.addEventListener?window.addEventListener(a,o,!1):window.attachEvent?window.attachEvent(a,o):window[a]=o,o(),"function"==typeof define&&"object"==typeof define.amd&&define.amd?define(function(){return t}):"undefined"!=typeof module&&module.exports?module.exports=t:window.device=t}.call(this),$(document).ready(function(){function t(){$("body").removeClass("phone"),$(window).width()<768&&$("body").addClass("phone")}function e(){window.removeEventListener&&window.removeEventListener("DOMMouseScroll",preventDefault(),!1),window.onmousewheel=document.onmousewheel=null,window.onwheel=null,window.ontouchmove=null,document.onkeydown=null}var n=$(window).height(),r=$(window).width(),i=$(".icon_text").height();if(t(),$(window).resize(function(){n=$(window).height(),r=$(window).width(),$(".mainblock").css({height:n-(70+i)}),$(".nav-wrapper").css({height:n,width:r}),t()}),$(".mainblock").css({height:n-(70+i)}),$(".nav-wrapper").css({height:n,width:r}),$("p.call_us img").click(function(t){var e=$("div.feedback");if("block"!=e.css("display")){e.fadeIn(200);var n=!0;$(document).bind("click.myEvent",function(t){n||0!=$(t.target).closest("div.feedback").length||(e.fadeOut(200),$(document).unbind("click.myEvent")),n=!1})}t.preventDefault()}),$(".nav-wrapper > ul > li").each(function(){$("ul",this).length>0&&$(this).addClass("has-kids")}),$("li.has-kids > a").click(function(t){t.preventDefault();var e=$(this).parent("li"),n=29*$("ul li",e).size(),r=$("ul",e),i=$("ul li",e);e.hasClass("opened")?TweenLite.to(i,.2,{css:{rotationX:90},ease:Power4.easeOut,delay:.2,onComplete:function(){TweenLite.to(r,.2,{css:{height:0,overflow:"hidden"},ease:Power4.easeOut,delay:.2}),e.removeClass("opened")}}):TweenLite.to(r,.2,{css:{height:n,overflow:"visible"},delay:.2,onComplete:function(){TweenLite.to(i,.2,{css:{rotationX:.01},ease:Power4.easeOut,delay:.2}),e.addClass("opened")}})}),$("a.menu-button").click(function(t){t.preventDefault();var e=$("div.pp-menu");e.css({display:"block"}),TweenLite.to(e,.2,{css:{rotationX:0,scale:1,opacity:1},ease:Power4.easeOut,delay:.2}),$(this).animate({opacity:"0"},600)}),$("div.pp-menu a.close").click(function(t){t.preventDefault();var e=$("div.pp-menu");TweenLite.to(e,.5,{css:{rotationX:90,scale:.7,opacity:0},ease:Power4.easeOut,delay:.5,onComplete:function(){e.css({display:"none"})}}),$("a.menu-button").animate({opacity:"1.0"},600)}),$(".mainblock").length>0&&$("html").hasClass("desktop")){var o=!1,s=!1,a=[0,1],l=$(window),u=$(".mainblock"),c=$("body"),f=$(".our_prims").offset().top-70;l.on("scroll touchmove mousewheel",function(t){var n=l.scrollTop();a[0]=a[1],a[1]=n,n>0?s||(o?$("html, body").animate({scrollTop:0},0):(TweenLite.to(u,.4,{css:{opacity:1,rotationX:.01,scale:.95},ease:Power4.easeOut,delay:0}),TweenLite.to(u,.4,{css:{opacity:1,rotationX:.01,scale:1,marginTop:-f},ease:Power4.easeOut,delay:.6,onComplete:function(){o=!1,s=!0,c.addClass("cover-gone"),e()}}),TweenLite.to($(".our_prims"),.4,{css:{opacity:.8,rotationX:.01,scale:.95},ease:Power4.easeOut,delay:0,onComplete:function(){TweenLite.to($(".our_prims"),.4,{css:{opacity:1,rotationX:.01,scale:1},ease:Power4.easeOut,delay:.7})}}),$("html, body").animate({scrollTop:0},0))):0==n&&s&&a[1]<a[0]&&TweenLite.to(u,.4,{css:{marginTop:0},ease:Power4.easeOut,delay:0,onComplete:function(){s=!1,c.removeClass("ss-cover-gone")}})})}$(window).load(function(){$(".grid-container").isotope({itemSelector:".grid-item",masonry:{columns:2,gutter:60}}),$(window).resize(function(){$(".grid-container").isotope("reloadItems")})}),$(".text .insidelook p").lettering();var p=function(t,e){var n=new Array(e),r=t.length,i=new Array(r);if(e>r)throw new RangeError("getRandom: more elements taken than available");for(;e--;){var o=Math.floor(Math.random()*r);n[e]=t[o in i?i[o]:o],i[o]=--r}return n},h=function(t,e){e-t.toString().length+1;return t},d=function(t){t=t||3;for(var e={first:1,last:36},n=[],r=e.first;r<=e.last;r++)n.push("images/emoji/{i}.png".replace("{i}",h(r,4)));$(".emoji-trigger").hover(function(){for(var e=p(n,t),r=[],i=0;t>i;i++){var o=$(".emoji-container"),s=$("<div>").css({width:Math.floor(100*Math.random())+50,position:"absolute",top:Math.floor(Math.random()*o.height())+20,left:Math.floor(Math.random()*o.width())-50,zIndex:0,opacity:"0"}).attr("class","emoji-triggered"),a=$("<img>").attr("src",e[i]).addClass("img-responsive");r.push(s.append(a).appendTo(".emoji-container")),$(".emoji-triggered").css({opacity:"1.0"})}},function(){$(".emoji-triggered").remove()})};d(),$(window).load(function(){if($("div.cloud").length>0){var t=$("div.bottom div.button").offset().top-$(window).height(),e=$("div.has_questions .questions_form .form_text").offset().top-$(window).height();$(window).scroll(function(){var n=$(window).scrollTop()+$(window).height(),r=350,i=64;if(n>=e&&t>=n){var o=t-e,s=t-n,a=r-r*(s/o),l=i-i*(s/o);230>a&&(a=230),40>l&&(l=40),$("div.cloud a").css({width:a,height:l,"line-height":l+"px"}),350==a?$("div.cloud").addClass("hide"):$("div.cloud").removeClass("hide")}else n>e&&n>t&&(console.log("hhh"),a=350,l=64,230>a&&(a=230),40>l&&(l=40),$("div.cloud a").css({width:a,height:l,"line-height":l+"px"}),350==a?$("div.cloud").addClass("hide"):$("div.cloud").removeClass("hide"))})}}),$('input[type="checkbox"]').styler(),$("div.icon_text div.one p").mouseover(function(){var t=$(this).closest("div.one");$("div.tooltip",t).stop().animate({display:"block",opacity:"1"},600)}),$("div.icon_text div.one").mouseleave(function(){$("div.tooltip",this).stop().animate({display:"none",opacity:"0"},600)});$(".scroll-pane").jScrollPane({autoReinitialise:!0});$("#oferta nav ul li a").click(function(t){t.preventDefault();var e=$(this).attr("href");$(e)}),$(".show_oferta").click(function(t){t.preventDefault(),$("#order").modal("hide");var e=$("#oferta");e.css({display:"block"}),TweenLite.to(e,.2,{css:{rotationX:0,scale:1,opacity:1},ease:Power4.easeOut,delay:.2})}),$("#oferta a.close").click(function(t){t.preventDefault();var e=$("#oferta");TweenLite.to(e,.5,{css:{rotationX:90,scale:.7,opacity:0},ease:Power4.easeOut,delay:.5,onComplete:function(){e.css({display:"none"})}})}),$(".show_subs").click(function(t){t.preventDefault(),$(".modal").modal("hide");var e=$("#subscript");e.css({display:"block"}),TweenLite.to(e,.2,{css:{rotationX:0,scale:1,opacity:1},ease:Power4.easeOut,delay:.2})}),$("#subscript a.close").click(function(t){t.preventDefault();var e=$("#subscript");TweenLite.to(e,.5,{css:{rotationX:90,scale:.7,opacity:0},ease:Power4.easeOut,delay:.5,onComplete:function(){e.css({display:"none"})}})}),$("#support nav a").click(function(t){if(t.preventDefault(),!$(this).hasClass("active")){var e=$(this).attr("href");$("#support div.contents").removeClass("hide"),$("#support div.contents div.paragraph").fadeOut(200,function(){setTimeout(function(){$(e).fadeIn(200)},200)}),$("#support nav a").removeClass("active"),$(this).addClass("active")}}),$("a.show_support_menu").click(function(t){var e=$("#support nav");if("block"!=e.css("display")){e.fadeIn(200);var n=!0;$(document).bind("click.myEvent",function(t){n||0!=$(t.target).closest("#support nav").length||(e.fadeOut(200),$(document).unbind("click.myEvent")),n=!1})}t.preventDefault()}),$('#order form input[type="file"]').change(function(){$("#order form div.load").fadeOut(200,function(){setTimeout(function(){$("#order form div.afterload").fadeIn(200)},200)})})});
//# sourceMappingURL=data:application/json;base64,
